# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..commons.types.environment_id import EnvironmentId
from ..core.request_options import RequestOptions
from .types.list_data_retention_policies_response import ListDataRetentionPoliciesResponse
from ..core.pydantic_utilities import parse_obj_as
from ..commons.errors.bad_request_error import BadRequestError
from ..commons.types.errors import Errors
from ..commons.errors.not_found_error import NotFoundError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from .types.data_retention_policy_enum import DataRetentionPolicyEnum
from .types.data_retention_policy_response import DataRetentionPolicyResponse
from ..commons.types.data_retention_policy_id import DataRetentionPolicyId
from ..core.jsonable_encoder import jsonable_encoder
from ..commons.types.success import Success
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class DataRetentionPoliciesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        environment_id: typing.Optional[EnvironmentId] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListDataRetentionPoliciesResponse:
        """
        Returns all data retention policies on an account matching a filter for environmentId

        Parameters
        ----------
        environment_id : typing.Optional[EnvironmentId]
            The associated Environment ID of the policy.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListDataRetentionPoliciesResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.data_retention_policies.list(
            environment_id="us_env_YOUR_ID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "data-retention-policies",
            method="GET",
            params={
                "environmentId": environment_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListDataRetentionPoliciesResponse,
                    parse_obj_as(
                        type_=ListDataRetentionPoliciesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self,
        *,
        type: DataRetentionPolicyEnum,
        period: int,
        environment_id: EnvironmentId,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DataRetentionPolicyResponse:
        """
        Add a new data retention policy to the space

        Parameters
        ----------
        type : DataRetentionPolicyEnum

        period : int

        environment_id : EnvironmentId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DataRetentionPolicyResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.data_retention_policies.create(
            type="lastActivity",
            period=5,
            environment_id="us_env_YOUR_ID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "data-retention-policies",
            method="POST",
            json={
                "type": type,
                "period": period,
                "environmentId": environment_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DataRetentionPolicyResponse,
                    parse_obj_as(
                        type_=DataRetentionPolicyResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self, id: DataRetentionPolicyId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DataRetentionPolicyResponse:
        """
        Returns a single data retention policy

        Parameters
        ----------
        id : DataRetentionPolicyId
            ID of data retention policy to return

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DataRetentionPolicyResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.data_retention_policies.get(
            id="us_drp_YOUR_ID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"data-retention-policies/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DataRetentionPolicyResponse,
                    parse_obj_as(
                        type_=DataRetentionPolicyResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        id: DataRetentionPolicyId,
        *,
        type: DataRetentionPolicyEnum,
        period: int,
        environment_id: EnvironmentId,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DataRetentionPolicyResponse:
        """
        Updates a single data retention policy

        Parameters
        ----------
        id : DataRetentionPolicyId
            ID of data retention policy to update

        type : DataRetentionPolicyEnum

        period : int

        environment_id : EnvironmentId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DataRetentionPolicyResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.data_retention_policies.update(
            id="us_drp_YOUR_ID",
            type="lastActivity",
            period=5,
            environment_id="us_env_YOUR_ID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"data-retention-policies/{jsonable_encoder(id)}",
            method="PATCH",
            json={
                "type": type,
                "period": period,
                "environmentId": environment_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DataRetentionPolicyResponse,
                    parse_obj_as(
                        type_=DataRetentionPolicyResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(self, id: DataRetentionPolicyId, *, request_options: typing.Optional[RequestOptions] = None) -> Success:
        """
        Deletes a single data retention policy

        Parameters
        ----------
        id : DataRetentionPolicyId
            ID of data retention policy to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Success

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.data_retention_policies.delete(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"data-retention-policies/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Success,
                    parse_obj_as(
                        type_=Success,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncDataRetentionPoliciesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        environment_id: typing.Optional[EnvironmentId] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListDataRetentionPoliciesResponse:
        """
        Returns all data retention policies on an account matching a filter for environmentId

        Parameters
        ----------
        environment_id : typing.Optional[EnvironmentId]
            The associated Environment ID of the policy.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListDataRetentionPoliciesResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.data_retention_policies.list(
                environment_id="us_env_YOUR_ID",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "data-retention-policies",
            method="GET",
            params={
                "environmentId": environment_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListDataRetentionPoliciesResponse,
                    parse_obj_as(
                        type_=ListDataRetentionPoliciesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self,
        *,
        type: DataRetentionPolicyEnum,
        period: int,
        environment_id: EnvironmentId,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DataRetentionPolicyResponse:
        """
        Add a new data retention policy to the space

        Parameters
        ----------
        type : DataRetentionPolicyEnum

        period : int

        environment_id : EnvironmentId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DataRetentionPolicyResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.data_retention_policies.create(
                type="lastActivity",
                period=5,
                environment_id="us_env_YOUR_ID",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "data-retention-policies",
            method="POST",
            json={
                "type": type,
                "period": period,
                "environmentId": environment_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DataRetentionPolicyResponse,
                    parse_obj_as(
                        type_=DataRetentionPolicyResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self, id: DataRetentionPolicyId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DataRetentionPolicyResponse:
        """
        Returns a single data retention policy

        Parameters
        ----------
        id : DataRetentionPolicyId
            ID of data retention policy to return

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DataRetentionPolicyResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.data_retention_policies.get(
                id="us_drp_YOUR_ID",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"data-retention-policies/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DataRetentionPolicyResponse,
                    parse_obj_as(
                        type_=DataRetentionPolicyResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        id: DataRetentionPolicyId,
        *,
        type: DataRetentionPolicyEnum,
        period: int,
        environment_id: EnvironmentId,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DataRetentionPolicyResponse:
        """
        Updates a single data retention policy

        Parameters
        ----------
        id : DataRetentionPolicyId
            ID of data retention policy to update

        type : DataRetentionPolicyEnum

        period : int

        environment_id : EnvironmentId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DataRetentionPolicyResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.data_retention_policies.update(
                id="us_drp_YOUR_ID",
                type="lastActivity",
                period=5,
                environment_id="us_env_YOUR_ID",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"data-retention-policies/{jsonable_encoder(id)}",
            method="PATCH",
            json={
                "type": type,
                "period": period,
                "environmentId": environment_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DataRetentionPolicyResponse,
                    parse_obj_as(
                        type_=DataRetentionPolicyResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(
        self, id: DataRetentionPolicyId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Success:
        """
        Deletes a single data retention policy

        Parameters
        ----------
        id : DataRetentionPolicyId
            ID of data retention policy to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Success

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.data_retention_policies.delete(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"data-retention-policies/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Success,
                    parse_obj_as(
                        type_=Success,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
