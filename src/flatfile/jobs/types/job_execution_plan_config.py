# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from .edge import Edge
from ...core.serialization import FieldMetadata
from .source_field import SourceField
from .destination_field import DestinationField
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class JobExecutionPlanConfig(UniversalBaseModel):
    """
    The execution plan for a job, for example, for a map job, the execution plan is the mapping of the source sheet to the destination sheet.
    """

    field_mapping: typing_extensions.Annotated[
        typing.Optional[typing.List[Edge]], FieldMetadata(alias="fieldMapping")
    ] = None
    unmapped_source_fields: typing_extensions.Annotated[
        typing.Optional[typing.List[SourceField]], FieldMetadata(alias="unmappedSourceFields")
    ] = None
    unmapped_destination_fields: typing_extensions.Annotated[
        typing.Optional[typing.List[DestinationField]], FieldMetadata(alias="unmappedDestinationFields")
    ] = None
    program_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="programId")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
