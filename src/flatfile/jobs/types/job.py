# This file was auto-generated by Fern from our API Definition.

from .job_config import JobConfig
from ...commons.types.job_id import JobId
import typing_extensions
import datetime as dt
from ...core.serialization import FieldMetadata
import pydantic
import typing
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class Job(JobConfig):
    """
    A single unit of work that will execute asynchronously

    Examples
    --------
    import datetime

    from flatfile.jobs import EmptyObject, Job, JobSubject_Resource

    Job(
        id="us_jb_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-10-30 20:04:28.556000+00:00",
        ),
        updated_at=datetime.datetime.fromisoformat(
            "2023-10-30 20:04:32.075000+00:00",
        ),
        started_at=datetime.datetime.fromisoformat(
            "2023-10-30 20:04:29.453000+00:00",
        ),
        finished_at=datetime.datetime.fromisoformat(
            "2023-10-30 20:04:32.074000+00:00",
        ),
        environment_id="us_env_YOUR_ID",
        type="workbook",
        operation="submitAction",
        source="us_wb_YOUR_ID",
        destination="us_wb_YOUR_ID",
        config=EmptyObject(),
        trigger="immediate",
        status="complete",
        progress=100,
        file_id="us_fl_YOUR_ID",
        mode="foreground",
        input={},
        subject=JobSubject_Resource(
            id="us_wb_YOUR_ID",
        ),
        outcome={
            "message": "Data was successfully submitted to Webhook.site. Go check it out at https://example.site/example."
        },
        info="Starting job to submit action to webhook.site",
        managed=True,
    )
    """

    id: JobId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")] = pydantic.Field()
    """
    Date the item was created
    """

    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")] = pydantic.Field()
    """
    Date the item was last updated
    """

    started_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="startedAt")] = (
        pydantic.Field(default=None)
    )
    """
    the time that the job started at
    """

    finished_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="finishedAt")] = (
        pydantic.Field(default=None)
    )
    """
    the time that the job finished at
    """

    outcome_acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="outcomeAcknowledgedAt")
    ] = pydantic.Field(default=None)
    """
    the time that the job's outcome has been acknowledged by a user
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
