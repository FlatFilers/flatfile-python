# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
from .job_type import JobType
import pydantic
from .job_source import JobSource
import typing
from .job_destination import JobDestination
from .job_update_config import JobUpdateConfig
from .trigger import Trigger
from .job_status import JobStatus
import typing_extensions
from ...commons.types.file_id import FileId
from ...core.serialization import FieldMetadata
from .job_mode import JobMode
from .job_subject import JobSubject
from ...commons.types.environment_id import EnvironmentId
from .job_part_execution import JobPartExecution
from ...commons.types.job_id import JobId
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class JobConfig(UniversalBaseModel):
    """
    A single unit of work that a pipeline will execute

    Examples
    --------
    from flatfile.jobs import JobConfig

    JobConfig(
        type="workbook",
        operation="submitAction",
        source="us_wb_YOUR_ID",
    )
    """

    type: JobType = pydantic.Field()
    """
    The type of job
    """

    operation: str = pydantic.Field()
    """
    the type of operation to perform on the data. For example, "export".
    """

    source: JobSource
    destination: typing.Optional[JobDestination] = None
    config: typing.Optional[JobUpdateConfig] = None
    trigger: typing.Optional[Trigger] = pydantic.Field(default=None)
    """
    the type of trigger to use for this job
    """

    status: typing.Optional[JobStatus] = pydantic.Field(default=None)
    """
    the status of the job
    """

    progress: typing.Optional[int] = pydantic.Field(default=None)
    """
    the progress of the job. Whole number between 0 and 100
    """

    file_id: typing_extensions.Annotated[typing.Optional[FileId], FieldMetadata(alias="fileId")] = None
    mode: typing.Optional[JobMode] = pydantic.Field(default=None)
    """
    the mode of the job
    """

    input: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Input parameters for this job type.
    """

    subject: typing.Optional[JobSubject] = pydantic.Field(default=None)
    """
    Subject parameters for this job type.
    """

    outcome: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Outcome summary of job.
    """

    info: typing.Optional[str] = pydantic.Field(default=None)
    """
    Current status of job in text
    """

    managed: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Indicates if Flatfile is managing the control flow of this job or if it is being manually tracked.
    """

    environment_id: typing_extensions.Annotated[
        typing.Optional[EnvironmentId], FieldMetadata(alias="environmentId")
    ] = pydantic.Field(default=None)
    """
    The id of the environment this job belongs to
    """

    part: typing.Optional[int] = pydantic.Field(default=None)
    """
    The part number of this job
    """

    part_data: typing_extensions.Annotated[
        typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]], FieldMetadata(alias="partData")
    ] = pydantic.Field(default=None)
    """
    The data for this part of the job
    """

    part_execution: typing_extensions.Annotated[
        typing.Optional[JobPartExecution], FieldMetadata(alias="partExecution")
    ] = pydantic.Field(default=None)
    """
    The execution mode for this part of the job
    """

    parent_id: typing_extensions.Annotated[typing.Optional[JobId], FieldMetadata(alias="parentId")] = pydantic.Field(
        default=None
    )
    """
    The id of the parent job
    """

    predecessor_ids: typing_extensions.Annotated[
        typing.Optional[typing.List[JobId]], FieldMetadata(alias="predecessorIds")
    ] = pydantic.Field(default=None)
    """
    The ids of the jobs that must complete before this job can start
    """

    metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Additional metadata for the job
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
