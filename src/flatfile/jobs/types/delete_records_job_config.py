# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
from ...commons.types.filter import Filter
import pydantic
import typing_extensions
from ...commons.types.filter_field import FilterField
from ...core.serialization import FieldMetadata
from ...commons.types.search_value import SearchValue
from ...commons.types.search_field import SearchField
from ...commons.types.sheet_id import SheetId
from ...commons.types.record_id import RecordId
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class DeleteRecordsJobConfig(UniversalBaseModel):
    """
    The configuration for a delete job
    """

    filter: typing.Optional[Filter] = pydantic.Field(default=None)
    """
    Options to filter records (default=none)
    """

    filter_field: typing_extensions.Annotated[typing.Optional[FilterField], FieldMetadata(alias="filterField")] = (
        pydantic.Field(default=None)
    )
    """
    Use this to narrow the valid/error filter results to a specific field (Requires filter to be set)
    """

    search_value: typing_extensions.Annotated[typing.Optional[SearchValue], FieldMetadata(alias="searchValue")] = None
    search_field: typing_extensions.Annotated[typing.Optional[SearchField], FieldMetadata(alias="searchField")] = None
    q: typing.Optional[str] = pydantic.Field(default=None)
    """
    FFQL query to filter records
    """

    sheet: SheetId
    exceptions: typing.Optional[typing.List[RecordId]] = pydantic.Field(default=None)
    """
    List of record ids to exclude from deletion
    """

    snapshot_label: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="snapshotLabel")] = (
        pydantic.Field(default=None)
    )
    """
    If specified, a snapshot will be generated with this label
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
