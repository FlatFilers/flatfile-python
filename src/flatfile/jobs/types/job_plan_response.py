# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
from .job_plan import JobPlan
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import typing
import pydantic


class JobPlanResponse(UniversalBaseModel):
    """
    Examples
    --------
    import datetime

    from flatfile.jobs import (
        Edge,
        EmptyObject,
        Job,
        JobExecutionPlan,
        JobPlan,
        JobPlanResponse,
        JobSubject_Resource,
        Metadata,
    )
    from flatfile.property import Property_String

    JobPlanResponse(
        data=JobPlan(
            job=Job(
                id="us_jb_YOUR_ID",
                created_at=datetime.datetime.fromisoformat(
                    "2023-10-30 20:04:28.556000+00:00",
                ),
                updated_at=datetime.datetime.fromisoformat(
                    "2023-10-30 20:04:32.075000+00:00",
                ),
                started_at=datetime.datetime.fromisoformat(
                    "2023-10-30 20:04:29.453000+00:00",
                ),
                finished_at=datetime.datetime.fromisoformat(
                    "2023-10-30 20:04:32.074000+00:00",
                ),
                environment_id="us_env_YOUR_ID",
                type="workbook",
                operation="submitAction",
                source="us_wb_YOUR_ID",
                destination="us_wb_YOUR_ID",
                config=EmptyObject(),
                trigger="immediate",
                status="complete",
                progress=100,
                file_id="us_fl_YOUR_ID",
                mode="foreground",
                input={},
                subject=JobSubject_Resource(
                    id="us_wb_YOUR_ID",
                ),
                outcome={
                    "message": "Data was successfully submitted to Webhook.site. Go check it out at https://example.site/example."
                },
                info="Starting job to submit action to webhook.site",
                managed=True,
            ),
            plan=JobExecutionPlan(
                field_mapping=[
                    Edge(
                        source_field=Property_String(
                            key="firstName",
                        ),
                        destination_field=Property_String(
                            key="firstName",
                            label="First Name",
                        ),
                        preview=["John", "Suzy", "Joe"],
                        metadata=Metadata(
                            certainty="absolute",
                            confidence=1.0,
                            source="exact",
                        ),
                    ),
                    Edge(
                        source_field=Property_String(
                            key="lastName",
                        ),
                        destination_field=Property_String(
                            key="lastName",
                            label="Last Name",
                        ),
                        preview=["Smith", "Que", "Montana"],
                        metadata=Metadata(
                            certainty="absolute",
                            confidence=1.0,
                            source="exact",
                        ),
                    ),
                ],
                unmapped_source_fields=[],
                unmapped_destination_fields=[],
            ),
        ),
    )
    """

    data: JobPlan

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
