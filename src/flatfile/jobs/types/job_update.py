# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
from .job_update_config import JobUpdateConfig
from .job_status import JobStatus
import pydantic
import typing_extensions
import datetime as dt
from ...core.serialization import FieldMetadata
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class JobUpdate(UniversalBaseModel):
    """
    A single unit of work that will be executed

    Examples
    --------
    from flatfile.jobs import EmptyObject, JobUpdate

    JobUpdate(
        config=EmptyObject(),
        status="complete",
        progress=100,
    )
    """

    config: typing.Optional[JobUpdateConfig] = None
    status: typing.Optional[JobStatus] = pydantic.Field(default=None)
    """
    the status of the job
    """

    progress: typing.Optional[int] = pydantic.Field(default=None)
    """
    the progress of the job. Whole number between 0 and 100
    """

    outcome_acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="outcomeAcknowledgedAt")
    ] = pydantic.Field(default=None)
    """
    the time that the job's outcome has been acknowledged by a user
    """

    info: typing.Optional[str] = pydantic.Field(default=None)
    """
    Current status of job in text
    """

    metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Additional metadata for the job
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
