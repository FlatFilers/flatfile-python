# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
from .category_mapping import CategoryMapping
import pydantic
import typing_extensions
from .enum_value import EnumValue
from ...core.serialization import FieldMetadata
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class EnumDetails(UniversalBaseModel):
    """
    Only available if one or more of the destination fields is of type enum. Provides category mapping.
    """

    mapping: typing.List[CategoryMapping] = pydantic.Field()
    """
    The mapping of source values to destination values
    """

    unused_source_values: typing_extensions.Annotated[
        typing.Optional[typing.List[EnumValue]], FieldMetadata(alias="unusedSourceValues")
    ] = pydantic.Field(default=None)
    """
    A list of source values that are not mapped from
    """

    unused_destination_values: typing_extensions.Annotated[
        typing.Optional[typing.List[EnumValue]], FieldMetadata(alias="unusedDestinationValues")
    ] = pydantic.Field(default=None)
    """
    A list of destination values that are not mapped to
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
