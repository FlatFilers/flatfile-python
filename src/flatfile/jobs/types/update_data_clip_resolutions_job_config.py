# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing_extensions
from ...commons.types.data_clip_id import DataClipId
from ...core.serialization import FieldMetadata
import pydantic
from ...commons.types.sheet_id import SheetId
from ...data_clips.types.resolve_to import ResolveTo
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import typing


class UpdateDataClipResolutionsJobConfig(UniversalBaseModel):
    """
    Configuration for a data clip resolution job
    """

    clip_id: typing_extensions.Annotated[DataClipId, FieldMetadata(alias="clipId")] = pydantic.Field()
    """
    The ID of the data clip to resolve
    """

    clipped_sheet_id: typing_extensions.Annotated[SheetId, FieldMetadata(alias="clippedSheetId")] = pydantic.Field()
    """
    The ID of the sheet that contains the data clip
    """

    resolve_to: typing_extensions.Annotated[ResolveTo, FieldMetadata(alias="resolveTo")]
    column_field: typing_extensions.Annotated[str, FieldMetadata(alias="columnField")] = pydantic.Field()
    """
    Optional. If provided, only this column will be resolved.
    """

    column_value: typing_extensions.Annotated[str, FieldMetadata(alias="columnValue")] = pydantic.Field()
    """
    Optional. If provided, this value in the column will be replaced with the resolution target.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
