# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ...commons.types.version_id import VersionId
from ...core.serialization import FieldMetadata
import pydantic
from ...commons.types.commit_id import CommitId
from ...commons.types.sort_field import SortField
from ...commons.types.sort_direction import SortDirection
from ...commons.types.filter import Filter
from ...commons.types.filter_field import FilterField
from ...commons.types.search_value import SearchValue
from ...commons.types.search_field import SearchField
from ...commons.types.record_id import RecordId
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class ExportOptions(UniversalBaseModel):
    version_id: typing_extensions.Annotated[typing.Optional[VersionId], FieldMetadata(alias="versionId")] = (
        pydantic.Field(default=None)
    )
    """
    Deprecated, use `commitId` instead
    """

    commit_id: typing_extensions.Annotated[typing.Optional[CommitId], FieldMetadata(alias="commitId")] = pydantic.Field(
        default=None
    )
    """
    If provided, the snapshot version of the workbook will be used for the export
    """

    sort_field: typing_extensions.Annotated[typing.Optional[SortField], FieldMetadata(alias="sortField")] = (
        pydantic.Field(default=None)
    )
    """
    The field to sort the records on
    """

    sort_direction: typing_extensions.Annotated[
        typing.Optional[SortDirection], FieldMetadata(alias="sortDirection")
    ] = pydantic.Field(default=None)
    """
    The direction to sort the records
    """

    filter: typing.Optional[Filter] = pydantic.Field(default=None)
    """
    The filter to apply to the records
    """

    filter_field: typing_extensions.Annotated[typing.Optional[FilterField], FieldMetadata(alias="filterField")] = (
        pydantic.Field(default=None)
    )
    """
    The field to filter on
    """

    search_value: typing_extensions.Annotated[typing.Optional[SearchValue], FieldMetadata(alias="searchValue")] = (
        pydantic.Field(default=None)
    )
    """
    The value to search for
    """

    search_field: typing_extensions.Annotated[typing.Optional[SearchField], FieldMetadata(alias="searchField")] = (
        pydantic.Field(default=None)
    )
    """
    The field to search for the search value in
    """

    q: typing.Optional[str] = pydantic.Field(default=None)
    """
    The FFQL query to filter records
    """

    ids: typing.Optional[typing.List[RecordId]] = pydantic.Field(default=None)
    """
    The Record Ids param (ids) is a list of record ids that can be passed to several record endpoints allowing the user to identify specific records to INCLUDE in the query, or specific records to EXCLUDE, depending on whether or not filters are being applied. When passing a query param that filters the record dataset, such as 'searchValue', or a 'filter' of 'valid' | 'error' | 'all', the 'ids' param will EXCLUDE those records from the filtered results. For basic queries that do not filter the dataset, passing record ids in the 'ids' param will limit the dataset to INCLUDE just those specific records
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
