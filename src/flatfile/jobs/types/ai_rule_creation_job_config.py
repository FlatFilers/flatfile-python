# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import typing_extensions
from ...commons.types.sheet_id import SheetId
from ...core.serialization import FieldMetadata
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class AiRuleCreationJobConfig(UniversalBaseModel):
    """
    Configuration for AI-powered rule creation jobs that generate or replace field constraints
    """

    label: typing.Optional[str] = pydantic.Field(default=None)
    """
    Display name for the rule to be created
    """

    prompt: str = pydantic.Field()
    """
    The natural language description of the rule to be created
    """

    sheet_id: typing_extensions.Annotated[SheetId, FieldMetadata(alias="sheetId")] = pydantic.Field()
    """
    The ID of the sheet containing the field to create/update the rule for
    """

    field_key: typing_extensions.Annotated[str, FieldMetadata(alias="fieldKey")] = pydantic.Field()
    """
    The key of the field to create/update the rule for
    """

    index: typing.Optional[int] = pydantic.Field(default=None)
    """
    To edit an existing rule, provide the index of the constraint in the constraints array for the field and that constraint will be replaced.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
