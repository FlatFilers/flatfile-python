# This file was auto-generated by Fern from our API Definition.

from .job_execution_plan import JobExecutionPlan
import typing_extensions
from ...commons.types.file_id import FileId
from ...core.serialization import FieldMetadata
from ...commons.types.job_id import JobId
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import typing
import pydantic


class JobExecutionPlanRequest(JobExecutionPlan):
    """
    Examples
    --------
    from flatfile.jobs import (
        DestinationField,
        Edge,
        JobExecutionPlanRequest,
        SourceField,
    )
    from flatfile.property import Property_String

    JobExecutionPlanRequest(
        field_mapping=[
            Edge(
                source_field=Property_String(
                    key="firstName",
                ),
                destination_field=Property_String(
                    key="firstName",
                    label="First Name",
                ),
            ),
            Edge(
                source_field=Property_String(
                    key="lastName",
                ),
                destination_field=Property_String(
                    key="lastName",
                    label="Last Name",
                ),
            ),
        ],
        unmapped_source_fields=[
            SourceField(
                source_field=Property_String(
                    key="email",
                ),
            )
        ],
        unmapped_destination_fields=[
            DestinationField(
                destination_field=Property_String(
                    key="email",
                    label="Email",
                ),
            )
        ],
        file_id="us_fl_YOUR_ID",
        job_id="us_jb_YOUR_ID",
    )
    """

    file_id: typing_extensions.Annotated[FileId, FieldMetadata(alias="fileId")]
    job_id: typing_extensions.Annotated[JobId, FieldMetadata(alias="jobId")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
