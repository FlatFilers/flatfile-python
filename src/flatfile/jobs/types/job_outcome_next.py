# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ...core.pydantic_utilities import UniversalBaseModel
import typing
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
import typing_extensions
from ...core.serialization import FieldMetadata
from .job_outcome_next_file_object import JobOutcomeNextFileObject


class JobOutcomeNext_Id(UniversalBaseModel):
    """
    Examples
    --------
    from flatfile.jobs import JobOutcomeNext_Id

    JobOutcomeNext_Id(
        id="us_jb_YOUR_ID",
    )
    """

    type: typing.Literal["id"] = "id"
    id: str
    label: typing.Optional[str] = None
    path: typing.Optional[str] = None
    query: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class JobOutcomeNext_Url(UniversalBaseModel):
    """
    Examples
    --------
    from flatfile.jobs import JobOutcomeNext_Id

    JobOutcomeNext_Id(
        id="us_jb_YOUR_ID",
    )
    """

    type: typing.Literal["url"] = "url"
    url: str
    label: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class JobOutcomeNext_Download(UniversalBaseModel):
    """
    Examples
    --------
    from flatfile.jobs import JobOutcomeNext_Id

    JobOutcomeNext_Id(
        id="us_jb_YOUR_ID",
    )
    """

    type: typing.Literal["download"] = "download"
    url: str
    label: typing.Optional[str] = None
    file_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="fileName")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class JobOutcomeNext_Files(UniversalBaseModel):
    """
    Examples
    --------
    from flatfile.jobs import JobOutcomeNext_Id

    JobOutcomeNext_Id(
        id="us_jb_YOUR_ID",
    )
    """

    type: typing.Literal["files"] = "files"
    files: typing.List[JobOutcomeNextFileObject]
    label: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class JobOutcomeNext_Wait(UniversalBaseModel):
    """
    Examples
    --------
    from flatfile.jobs import JobOutcomeNext_Id

    JobOutcomeNext_Id(
        id="us_jb_YOUR_ID",
    )
    """

    type: typing.Literal["wait"] = "wait"
    fade: typing.Optional[bool] = None
    confetti: typing.Optional[bool] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class JobOutcomeNext_Snapshot(UniversalBaseModel):
    """
    Examples
    --------
    from flatfile.jobs import JobOutcomeNext_Id

    JobOutcomeNext_Id(
        id="us_jb_YOUR_ID",
    )
    """

    type: typing.Literal["snapshot"] = "snapshot"
    snapshot_id: typing_extensions.Annotated[str, FieldMetadata(alias="snapshotId")]
    sheet_id: typing_extensions.Annotated[str, FieldMetadata(alias="sheetId")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class JobOutcomeNext_Retry(UniversalBaseModel):
    """
    Examples
    --------
    from flatfile.jobs import JobOutcomeNext_Id

    JobOutcomeNext_Id(
        id="us_jb_YOUR_ID",
    )
    """

    type: typing.Literal["retry"] = "retry"
    label: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class JobOutcomeNext_View(UniversalBaseModel):
    """
    Examples
    --------
    from flatfile.jobs import JobOutcomeNext_Id

    JobOutcomeNext_Id(
        id="us_jb_YOUR_ID",
    )
    """

    type: typing.Literal["view"] = "view"
    sheet_id: typing_extensions.Annotated[str, FieldMetadata(alias="sheetId")]
    hidden_columns: typing_extensions.Annotated[typing.List[str], FieldMetadata(alias="hiddenColumns")]
    label: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


"""
from flatfile.jobs import JobOutcomeNext_Id

JobOutcomeNext_Id(
    id="us_jb_YOUR_ID",
)
"""
JobOutcomeNext = typing.Union[
    JobOutcomeNext_Id,
    JobOutcomeNext_Url,
    JobOutcomeNext_Download,
    JobOutcomeNext_Files,
    JobOutcomeNext_Wait,
    JobOutcomeNext_Snapshot,
    JobOutcomeNext_Retry,
    JobOutcomeNext_View,
]
