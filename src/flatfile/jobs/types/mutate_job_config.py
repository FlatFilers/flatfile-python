# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing_extensions
from ...commons.types.sheet_id import SheetId
from ...core.serialization import FieldMetadata
import pydantic
import typing
from ...commons.types.filter import Filter
from ...commons.types.filter_field import FilterField
from ...commons.types.search_value import SearchValue
from ...commons.types.search_field import SearchField
from ...commons.types.record_id import RecordId
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class MutateJobConfig(UniversalBaseModel):
    sheet_id: typing_extensions.Annotated[SheetId, FieldMetadata(alias="sheetId")]
    mutate_record: typing_extensions.Annotated[str, FieldMetadata(alias="mutateRecord")] = pydantic.Field()
    """
    A JavaScript function that will be run on each record in the sheet, it should return a mutated record.
    """

    mutation_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="mutationId")] = pydantic.Field(
        default=None
    )
    """
    If the mutation was generated through some sort of id-ed process, this links this job and that process.
    """

    snapshot_label: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="snapshotLabel")] = (
        pydantic.Field(default=None)
    )
    """
    If specified, a snapshot will be generated with this label
    """

    snapshot_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="snapshotId")] = pydantic.Field(
        default=None
    )
    """
    The generated snapshotId will be stored here
    """

    filter: typing.Optional[Filter] = None
    filter_field: typing_extensions.Annotated[typing.Optional[FilterField], FieldMetadata(alias="filterField")] = None
    search_value: typing_extensions.Annotated[typing.Optional[SearchValue], FieldMetadata(alias="searchValue")] = None
    search_field: typing_extensions.Annotated[typing.Optional[SearchField], FieldMetadata(alias="searchField")] = None
    q: typing.Optional[str] = None
    ids: typing.Optional[typing.List[RecordId]] = pydantic.Field(default=None)
    """
    The Record Ids param (ids) is a list of record ids that can be passed to several record endpoints allowing the user to identify specific records to INCLUDE in the query, or specific records to EXCLUDE, depending on whether or not filters are being applied. When passing a query param that filters the record dataset, such as 'searchValue', or a 'filter' of 'valid' | 'error' | 'all', the 'ids' param will EXCLUDE those records from the filtered results. For basic queries that do not filter the dataset, passing record ids in the 'ids' param will limit the dataset to INCLUDE just those specific records
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
