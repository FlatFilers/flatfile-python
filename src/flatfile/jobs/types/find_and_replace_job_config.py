# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
from ...commons.types.filter import Filter
import pydantic
import typing_extensions
from ...commons.types.filter_field import FilterField
from ...core.serialization import FieldMetadata
from ...commons.types.search_value import SearchValue
from ...commons.types.search_field import SearchField
from ...commons.types.record_id import RecordId
from ...records.types.cell_value_union import CellValueUnion
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class FindAndReplaceJobConfig(UniversalBaseModel):
    filter: typing.Optional[Filter] = pydantic.Field(default=None)
    """
    The filter to apply to the records
    """

    filter_field: typing_extensions.Annotated[typing.Optional[FilterField], FieldMetadata(alias="filterField")] = (
        pydantic.Field(default=None)
    )
    """
    The field to filter on
    """

    search_value: typing_extensions.Annotated[typing.Optional[SearchValue], FieldMetadata(alias="searchValue")] = (
        pydantic.Field(default=None)
    )
    """
    The value to search for
    """

    search_field: typing_extensions.Annotated[typing.Optional[SearchField], FieldMetadata(alias="searchField")] = (
        pydantic.Field(default=None)
    )
    """
    The field to search for the search value in
    """

    q: typing.Optional[str] = pydantic.Field(default=None)
    """
    The FFQL query to filter records
    """

    ids: typing.Optional[typing.List[RecordId]] = pydantic.Field(default=None)
    """
    The Record Ids param (ids) is a list of record ids that can be passed to several record endpoints allowing the user to identify specific records to INCLUDE in the query, or specific records to EXCLUDE, depending on whether or not filters are being applied. When passing a query param that filters the record dataset, such as 'searchValue', or a 'filter' of 'valid' | 'error' | 'all', the 'ids' param will EXCLUDE those records from the filtered results. For basic queries that do not filter the dataset, passing record ids in the 'ids' param will limit the dataset to INCLUDE just those specific records
    """

    find: typing.Optional[CellValueUnion] = pydantic.Field(default=None)
    """
    A value to find for a given field in a sheet. Wrap the value in "" for exact match
    """

    replace: typing.Optional[CellValueUnion] = pydantic.Field(default=None)
    """
    The value to replace found values with
    """

    field_key: typing_extensions.Annotated[str, FieldMetadata(alias="fieldKey")] = pydantic.Field()
    """
    A unique key used to identify a field in a sheet
    """

    snapshot_label: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="snapshotLabel")] = (
        pydantic.Field(default=None)
    )
    """
    If specified, a snapshot will be generated with this label
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
