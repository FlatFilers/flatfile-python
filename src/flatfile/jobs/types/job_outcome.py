# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
from .job_outcome_trigger import JobOutcomeTrigger
import typing_extensions
from ...core.serialization import FieldMetadata
from .job_outcome_next import JobOutcomeNext
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class JobOutcome(UniversalBaseModel):
    """
    Outcome summary of a job

    Examples
    --------
    from flatfile.jobs import JobOutcome, JobOutcomeNext_Id

    JobOutcome(
        acknowledge=True,
        button_text="Acknowledge",
        next=JobOutcomeNext_Id(
            id="us_jb_YOUR_ID",
        ),
        heading="Success",
        message="Job was successful",
    )
    """

    acknowledge: typing.Optional[bool] = None
    trigger: typing.Optional[JobOutcomeTrigger] = None
    button_text: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="buttonText")] = None
    next: typing.Optional[JobOutcomeNext] = None
    heading: typing.Optional[str] = None
    message: typing.Optional[str] = None
    hide_default_button: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="hideDefaultButton")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
