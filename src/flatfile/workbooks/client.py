# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..commons.types.space_id import SpaceId
from ..core.request_options import RequestOptions
from .types.list_workbooks_response import ListWorkbooksResponse
from ..core.pydantic_utilities import parse_obj_as
from ..commons.errors.bad_request_error import BadRequestError
from ..commons.types.errors import Errors
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..commons.types.environment_id import EnvironmentId
from ..sheets.types.sheet_config import SheetConfig
from ..commons.types.action import Action
from .types.workbook_config_settings import WorkbookConfigSettings
from .types.workbook_treatments import WorkbookTreatments
from .types.workbook_response import WorkbookResponse
from ..core.serialization import convert_and_respect_annotation_metadata
from ..commons.types.workbook_id import WorkbookId
from ..core.jsonable_encoder import jsonable_encoder
from ..commons.errors.not_found_error import NotFoundError
from ..commons.types.success import Success
from ..sheets.types.sheet_config_or_update import SheetConfigOrUpdate
from ..commits.types.list_commits_response import ListCommitsResponse
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class WorkbooksClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        space_id: typing.Optional[SpaceId] = None,
        name: typing.Optional[str] = None,
        namespace: typing.Optional[str] = None,
        label: typing.Optional[str] = None,
        treatment: typing.Optional[str] = None,
        include_sheets: typing.Optional[bool] = None,
        include_counts: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListWorkbooksResponse:
        """
        Returns all workbooks matching a filter for an account or space

        Parameters
        ----------
        space_id : typing.Optional[SpaceId]
            The associated Space ID of the Workbook.

        name : typing.Optional[str]
            Filter by name. Precede with - to negate the filter

        namespace : typing.Optional[str]
            Filter by namespace. Precede with - to negate the filter

        label : typing.Optional[str]
            Filter by label. Precede with - to negate the filter

        treatment : typing.Optional[str]
            Filter by treatment.

        include_sheets : typing.Optional[bool]
            Include sheets for the workbook (default true)

        include_counts : typing.Optional[bool]
            Include counts for the workbook. **DEPRECATED** Counts will return 0s. Use GET /sheets/:sheetId/counts

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListWorkbooksResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.workbooks.list(
            space_id="us_sp_YOUR_ID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "workbooks",
            method="GET",
            params={
                "spaceId": space_id,
                "name": name,
                "namespace": namespace,
                "label": label,
                "treatment": treatment,
                "includeSheets": include_sheets,
                "includeCounts": include_counts,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListWorkbooksResponse,
                    parse_obj_as(
                        type_=ListWorkbooksResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self,
        *,
        name: str,
        labels: typing.Optional[typing.Sequence[str]] = OMIT,
        space_id: typing.Optional[SpaceId] = OMIT,
        environment_id: typing.Optional[EnvironmentId] = OMIT,
        namespace: typing.Optional[str] = OMIT,
        sheets: typing.Optional[typing.Sequence[SheetConfig]] = OMIT,
        actions: typing.Optional[typing.Sequence[Action]] = OMIT,
        settings: typing.Optional[WorkbookConfigSettings] = OMIT,
        metadata: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        treatments: typing.Optional[typing.Sequence[WorkbookTreatments]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> WorkbookResponse:
        """
        Creates a workbook and adds it to a space

        Parameters
        ----------
        name : str
            The name of the Workbook.

        labels : typing.Optional[typing.Sequence[str]]
            An optional list of labels for the Workbook.

        space_id : typing.Optional[SpaceId]
            Space to associate with the Workbook.

        environment_id : typing.Optional[EnvironmentId]
            Environment to associate with the Workbook

        namespace : typing.Optional[str]
            Optional namespace to apply to the Workbook.

        sheets : typing.Optional[typing.Sequence[SheetConfig]]
            Sheets to create on the Workbook.

        actions : typing.Optional[typing.Sequence[Action]]
            Actions to create on the Workbook.

        settings : typing.Optional[WorkbookConfigSettings]
            The Workbook settings.

        metadata : typing.Optional[typing.Optional[typing.Any]]
            Metadata for the workbook

        treatments : typing.Optional[typing.Sequence[WorkbookTreatments]]
            Treatments for the workbook

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WorkbookResponse

        Examples
        --------
        from flatfile import Flatfile
        from flatfile.commons import Action
        from flatfile.property import Property_String
        from flatfile.sheets import SheetConfig
        from flatfile.workbooks import WorkbookConfigSettings

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.workbooks.create(
            name="My First Workbook",
            sheets=[
                SheetConfig(
                    name="Contacts",
                    slug="contacts",
                    fields=[
                        Property_String(
                            key="firstName",
                            label="First Name",
                        ),
                        Property_String(
                            key="lastName",
                            label="Last Name",
                        ),
                        Property_String(
                            key="email",
                            label="Email",
                        ),
                    ],
                    mapping_confidence_threshold=0.5,
                )
            ],
            labels=["simple-demo"],
            actions=[
                Action(
                    operation="submitAction",
                    mode="foreground",
                    label="Submit",
                    description="Submit data to webhook.site",
                    primary=True,
                )
            ],
            settings=WorkbookConfigSettings(
                track_changes=True,
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "workbooks",
            method="POST",
            json={
                "name": name,
                "labels": labels,
                "spaceId": space_id,
                "environmentId": environment_id,
                "namespace": namespace,
                "sheets": convert_and_respect_annotation_metadata(
                    object_=sheets, annotation=typing.Sequence[SheetConfig], direction="write"
                ),
                "actions": convert_and_respect_annotation_metadata(
                    object_=actions, annotation=typing.Sequence[Action], direction="write"
                ),
                "settings": convert_and_respect_annotation_metadata(
                    object_=settings, annotation=WorkbookConfigSettings, direction="write"
                ),
                "metadata": metadata,
                "treatments": treatments,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    WorkbookResponse,
                    parse_obj_as(
                        type_=WorkbookResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self, workbook_id: WorkbookId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> WorkbookResponse:
        """
        Returns a single workbook

        Parameters
        ----------
        workbook_id : WorkbookId
            ID of workbook to return

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WorkbookResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.workbooks.get(
            workbook_id="us_wb_YOUR_ID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"workbooks/{jsonable_encoder(workbook_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    WorkbookResponse,
                    parse_obj_as(
                        type_=WorkbookResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(self, workbook_id: WorkbookId, *, request_options: typing.Optional[RequestOptions] = None) -> Success:
        """
        Deletes a workbook and all of its record data permanently

        Parameters
        ----------
        workbook_id : WorkbookId
            ID of workbook to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Success

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.workbooks.delete(
            workbook_id="us_wb_YOUR_ID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"workbooks/{jsonable_encoder(workbook_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Success,
                    parse_obj_as(
                        type_=Success,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        workbook_id: WorkbookId,
        *,
        name: typing.Optional[str] = OMIT,
        labels: typing.Optional[typing.Sequence[str]] = OMIT,
        space_id: typing.Optional[SpaceId] = OMIT,
        environment_id: typing.Optional[EnvironmentId] = OMIT,
        namespace: typing.Optional[str] = OMIT,
        sheets: typing.Optional[typing.Sequence[SheetConfigOrUpdate]] = OMIT,
        actions: typing.Optional[typing.Sequence[Action]] = OMIT,
        metadata: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        settings: typing.Optional[WorkbookConfigSettings] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> WorkbookResponse:
        """
        Updates a workbook
        <Note>
          Adding a sheet to a workbook does not require the config object to be provided, however updating an existing sheet does.
        </Note>

        Parameters
        ----------
        workbook_id : WorkbookId
            ID of workbook to update

        name : typing.Optional[str]
            The name of the Workbook.

        labels : typing.Optional[typing.Sequence[str]]
            An optional list of labels for the Workbook.

        space_id : typing.Optional[SpaceId]
            The Space Id associated with the Workbook.

        environment_id : typing.Optional[EnvironmentId]
            The Environment Id associated with the Workbook.

        namespace : typing.Optional[str]
            The namespace of the Workbook.

        sheets : typing.Optional[typing.Sequence[SheetConfigOrUpdate]]
            Describes shape of data as well as behavior

        actions : typing.Optional[typing.Sequence[Action]]

        metadata : typing.Optional[typing.Optional[typing.Any]]
            Metadata for the workbook

        settings : typing.Optional[WorkbookConfigSettings]
            The Workbook settings.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WorkbookResponse

        Examples
        --------
        from flatfile import Flatfile
        from flatfile.commons import Action

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.workbooks.update(
            workbook_id="us_wb_YOUR_ID",
            name="My Updated Workbook",
            labels=["my-new-label"],
            actions=[
                Action(
                    operation="submitAction",
                    mode="foreground",
                    label="Submit Changes",
                    description="Submit data to webhook.site",
                    primary=True,
                )
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"workbooks/{jsonable_encoder(workbook_id)}",
            method="PATCH",
            json={
                "name": name,
                "labels": labels,
                "spaceId": space_id,
                "environmentId": environment_id,
                "namespace": namespace,
                "sheets": convert_and_respect_annotation_metadata(
                    object_=sheets, annotation=typing.Sequence[SheetConfigOrUpdate], direction="write"
                ),
                "actions": convert_and_respect_annotation_metadata(
                    object_=actions, annotation=typing.Sequence[Action], direction="write"
                ),
                "metadata": metadata,
                "settings": convert_and_respect_annotation_metadata(
                    object_=settings, annotation=WorkbookConfigSettings, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    WorkbookResponse,
                    parse_obj_as(
                        type_=WorkbookResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_workbook_commits(
        self,
        workbook_id: WorkbookId,
        *,
        completed: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListCommitsResponse:
        """
        Returns the commits for a workbook

        Parameters
        ----------
        workbook_id : WorkbookId
            ID of workbook

        completed : typing.Optional[bool]
            If true, only return commits that have been completed. If false, only return commits that have not been completed. If not provided, return all commits.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListCommitsResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.workbooks.get_workbook_commits(
            workbook_id="us_wb_YOUR_ID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"workbooks/{jsonable_encoder(workbook_id)}/commits",
            method="GET",
            params={
                "completed": completed,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListCommitsResponse,
                    parse_obj_as(
                        type_=ListCommitsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncWorkbooksClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        space_id: typing.Optional[SpaceId] = None,
        name: typing.Optional[str] = None,
        namespace: typing.Optional[str] = None,
        label: typing.Optional[str] = None,
        treatment: typing.Optional[str] = None,
        include_sheets: typing.Optional[bool] = None,
        include_counts: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListWorkbooksResponse:
        """
        Returns all workbooks matching a filter for an account or space

        Parameters
        ----------
        space_id : typing.Optional[SpaceId]
            The associated Space ID of the Workbook.

        name : typing.Optional[str]
            Filter by name. Precede with - to negate the filter

        namespace : typing.Optional[str]
            Filter by namespace. Precede with - to negate the filter

        label : typing.Optional[str]
            Filter by label. Precede with - to negate the filter

        treatment : typing.Optional[str]
            Filter by treatment.

        include_sheets : typing.Optional[bool]
            Include sheets for the workbook (default true)

        include_counts : typing.Optional[bool]
            Include counts for the workbook. **DEPRECATED** Counts will return 0s. Use GET /sheets/:sheetId/counts

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListWorkbooksResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.workbooks.list(
                space_id="us_sp_YOUR_ID",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "workbooks",
            method="GET",
            params={
                "spaceId": space_id,
                "name": name,
                "namespace": namespace,
                "label": label,
                "treatment": treatment,
                "includeSheets": include_sheets,
                "includeCounts": include_counts,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListWorkbooksResponse,
                    parse_obj_as(
                        type_=ListWorkbooksResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self,
        *,
        name: str,
        labels: typing.Optional[typing.Sequence[str]] = OMIT,
        space_id: typing.Optional[SpaceId] = OMIT,
        environment_id: typing.Optional[EnvironmentId] = OMIT,
        namespace: typing.Optional[str] = OMIT,
        sheets: typing.Optional[typing.Sequence[SheetConfig]] = OMIT,
        actions: typing.Optional[typing.Sequence[Action]] = OMIT,
        settings: typing.Optional[WorkbookConfigSettings] = OMIT,
        metadata: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        treatments: typing.Optional[typing.Sequence[WorkbookTreatments]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> WorkbookResponse:
        """
        Creates a workbook and adds it to a space

        Parameters
        ----------
        name : str
            The name of the Workbook.

        labels : typing.Optional[typing.Sequence[str]]
            An optional list of labels for the Workbook.

        space_id : typing.Optional[SpaceId]
            Space to associate with the Workbook.

        environment_id : typing.Optional[EnvironmentId]
            Environment to associate with the Workbook

        namespace : typing.Optional[str]
            Optional namespace to apply to the Workbook.

        sheets : typing.Optional[typing.Sequence[SheetConfig]]
            Sheets to create on the Workbook.

        actions : typing.Optional[typing.Sequence[Action]]
            Actions to create on the Workbook.

        settings : typing.Optional[WorkbookConfigSettings]
            The Workbook settings.

        metadata : typing.Optional[typing.Optional[typing.Any]]
            Metadata for the workbook

        treatments : typing.Optional[typing.Sequence[WorkbookTreatments]]
            Treatments for the workbook

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WorkbookResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile
        from flatfile.commons import Action
        from flatfile.property import Property_String
        from flatfile.sheets import SheetConfig
        from flatfile.workbooks import WorkbookConfigSettings

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.workbooks.create(
                name="My First Workbook",
                sheets=[
                    SheetConfig(
                        name="Contacts",
                        slug="contacts",
                        fields=[
                            Property_String(
                                key="firstName",
                                label="First Name",
                            ),
                            Property_String(
                                key="lastName",
                                label="Last Name",
                            ),
                            Property_String(
                                key="email",
                                label="Email",
                            ),
                        ],
                        mapping_confidence_threshold=0.5,
                    )
                ],
                labels=["simple-demo"],
                actions=[
                    Action(
                        operation="submitAction",
                        mode="foreground",
                        label="Submit",
                        description="Submit data to webhook.site",
                        primary=True,
                    )
                ],
                settings=WorkbookConfigSettings(
                    track_changes=True,
                ),
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "workbooks",
            method="POST",
            json={
                "name": name,
                "labels": labels,
                "spaceId": space_id,
                "environmentId": environment_id,
                "namespace": namespace,
                "sheets": convert_and_respect_annotation_metadata(
                    object_=sheets, annotation=typing.Sequence[SheetConfig], direction="write"
                ),
                "actions": convert_and_respect_annotation_metadata(
                    object_=actions, annotation=typing.Sequence[Action], direction="write"
                ),
                "settings": convert_and_respect_annotation_metadata(
                    object_=settings, annotation=WorkbookConfigSettings, direction="write"
                ),
                "metadata": metadata,
                "treatments": treatments,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    WorkbookResponse,
                    parse_obj_as(
                        type_=WorkbookResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self, workbook_id: WorkbookId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> WorkbookResponse:
        """
        Returns a single workbook

        Parameters
        ----------
        workbook_id : WorkbookId
            ID of workbook to return

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WorkbookResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.workbooks.get(
                workbook_id="us_wb_YOUR_ID",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"workbooks/{jsonable_encoder(workbook_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    WorkbookResponse,
                    parse_obj_as(
                        type_=WorkbookResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(
        self, workbook_id: WorkbookId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Success:
        """
        Deletes a workbook and all of its record data permanently

        Parameters
        ----------
        workbook_id : WorkbookId
            ID of workbook to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Success

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.workbooks.delete(
                workbook_id="us_wb_YOUR_ID",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"workbooks/{jsonable_encoder(workbook_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Success,
                    parse_obj_as(
                        type_=Success,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        workbook_id: WorkbookId,
        *,
        name: typing.Optional[str] = OMIT,
        labels: typing.Optional[typing.Sequence[str]] = OMIT,
        space_id: typing.Optional[SpaceId] = OMIT,
        environment_id: typing.Optional[EnvironmentId] = OMIT,
        namespace: typing.Optional[str] = OMIT,
        sheets: typing.Optional[typing.Sequence[SheetConfigOrUpdate]] = OMIT,
        actions: typing.Optional[typing.Sequence[Action]] = OMIT,
        metadata: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        settings: typing.Optional[WorkbookConfigSettings] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> WorkbookResponse:
        """
        Updates a workbook
        <Note>
          Adding a sheet to a workbook does not require the config object to be provided, however updating an existing sheet does.
        </Note>

        Parameters
        ----------
        workbook_id : WorkbookId
            ID of workbook to update

        name : typing.Optional[str]
            The name of the Workbook.

        labels : typing.Optional[typing.Sequence[str]]
            An optional list of labels for the Workbook.

        space_id : typing.Optional[SpaceId]
            The Space Id associated with the Workbook.

        environment_id : typing.Optional[EnvironmentId]
            The Environment Id associated with the Workbook.

        namespace : typing.Optional[str]
            The namespace of the Workbook.

        sheets : typing.Optional[typing.Sequence[SheetConfigOrUpdate]]
            Describes shape of data as well as behavior

        actions : typing.Optional[typing.Sequence[Action]]

        metadata : typing.Optional[typing.Optional[typing.Any]]
            Metadata for the workbook

        settings : typing.Optional[WorkbookConfigSettings]
            The Workbook settings.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WorkbookResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile
        from flatfile.commons import Action

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.workbooks.update(
                workbook_id="us_wb_YOUR_ID",
                name="My Updated Workbook",
                labels=["my-new-label"],
                actions=[
                    Action(
                        operation="submitAction",
                        mode="foreground",
                        label="Submit Changes",
                        description="Submit data to webhook.site",
                        primary=True,
                    )
                ],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"workbooks/{jsonable_encoder(workbook_id)}",
            method="PATCH",
            json={
                "name": name,
                "labels": labels,
                "spaceId": space_id,
                "environmentId": environment_id,
                "namespace": namespace,
                "sheets": convert_and_respect_annotation_metadata(
                    object_=sheets, annotation=typing.Sequence[SheetConfigOrUpdate], direction="write"
                ),
                "actions": convert_and_respect_annotation_metadata(
                    object_=actions, annotation=typing.Sequence[Action], direction="write"
                ),
                "metadata": metadata,
                "settings": convert_and_respect_annotation_metadata(
                    object_=settings, annotation=WorkbookConfigSettings, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    WorkbookResponse,
                    parse_obj_as(
                        type_=WorkbookResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_workbook_commits(
        self,
        workbook_id: WorkbookId,
        *,
        completed: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListCommitsResponse:
        """
        Returns the commits for a workbook

        Parameters
        ----------
        workbook_id : WorkbookId
            ID of workbook

        completed : typing.Optional[bool]
            If true, only return commits that have been completed. If false, only return commits that have not been completed. If not provided, return all commits.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListCommitsResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.workbooks.get_workbook_commits(
                workbook_id="us_wb_YOUR_ID",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"workbooks/{jsonable_encoder(workbook_id)}/commits",
            method="GET",
            params={
                "completed": completed,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListCommitsResponse,
                    parse_obj_as(
                        type_=ListCommitsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
