# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import typing_extensions
from ...commons.types.space_id import SpaceId
from ...core.serialization import FieldMetadata
from ...commons.types.environment_id import EnvironmentId
from ...sheets.types.sheet_config_or_update import SheetConfigOrUpdate
from ...commons.types.action import Action
from .workbook_config_settings import WorkbookConfigSettings
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class WorkbookUpdate(UniversalBaseModel):
    """
    The updates to be made to an existing workbook

    Examples
    --------
    from flatfile.commons import Action
    from flatfile.workbooks import WorkbookUpdate

    WorkbookUpdate(
        name="My Updated Workbook",
        labels=["my-new-label"],
        actions=[
            Action(
                operation="submitAction",
                mode="foreground",
                label="Submit Changes",
                description="Submit data to webhook.site",
                primary=True,
            )
        ],
    )
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    The name of the Workbook.
    """

    labels: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    An optional list of labels for the Workbook.
    """

    space_id: typing_extensions.Annotated[typing.Optional[SpaceId], FieldMetadata(alias="spaceId")] = pydantic.Field(
        default=None
    )
    """
    The Space Id associated with the Workbook.
    """

    environment_id: typing_extensions.Annotated[
        typing.Optional[EnvironmentId], FieldMetadata(alias="environmentId")
    ] = pydantic.Field(default=None)
    """
    The Environment Id associated with the Workbook.
    """

    namespace: typing.Optional[str] = pydantic.Field(default=None)
    """
    The namespace of the Workbook.
    """

    sheets: typing.Optional[typing.List[SheetConfigOrUpdate]] = pydantic.Field(default=None)
    """
    Describes shape of data as well as behavior
    """

    actions: typing.Optional[typing.List[Action]] = None
    metadata: typing.Optional[typing.Optional[typing.Any]] = pydantic.Field(default=None)
    """
    Metadata for the workbook
    """

    settings: typing.Optional[WorkbookConfigSettings] = pydantic.Field(default=None)
    """
    The Workbook settings.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
