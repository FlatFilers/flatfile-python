# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing
import typing_extensions
from ...commons.types.space_id import SpaceId
from ...core.serialization import FieldMetadata
from ...commons.types.environment_id import EnvironmentId
from ...sheets.types.sheet_config import SheetConfig
from ...commons.types.action import Action
from .workbook_config_settings import WorkbookConfigSettings
from .workbook_treatments import WorkbookTreatments
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class CreateWorkbookConfig(UniversalBaseModel):
    """
    Properties used to create a new Workbook

    Examples
    --------
    from flatfile.commons import Action
    from flatfile.property import Property_String
    from flatfile.sheets import SheetConfig
    from flatfile.workbooks import CreateWorkbookConfig, WorkbookConfigSettings

    CreateWorkbookConfig(
        name="My First Workbook",
        sheets=[
            SheetConfig(
                name="Contacts",
                slug="contacts",
                fields=[
                    Property_String(
                        key="firstName",
                        label="First Name",
                    ),
                    Property_String(
                        key="lastName",
                        label="Last Name",
                    ),
                    Property_String(
                        key="email",
                        label="Email",
                    ),
                ],
                mapping_confidence_threshold=0.5,
            )
        ],
        labels=["simple-demo"],
        actions=[
            Action(
                operation="submitAction",
                mode="foreground",
                label="Submit",
                description="Submit data to webhook.site",
                primary=True,
            )
        ],
        settings=WorkbookConfigSettings(
            track_changes=True,
        ),
    )
    """

    name: str = pydantic.Field()
    """
    The name of the Workbook.
    """

    labels: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    An optional list of labels for the Workbook.
    """

    space_id: typing_extensions.Annotated[typing.Optional[SpaceId], FieldMetadata(alias="spaceId")] = pydantic.Field(
        default=None
    )
    """
    Space to associate with the Workbook.
    """

    environment_id: typing_extensions.Annotated[
        typing.Optional[EnvironmentId], FieldMetadata(alias="environmentId")
    ] = pydantic.Field(default=None)
    """
    Environment to associate with the Workbook
    """

    namespace: typing.Optional[str] = pydantic.Field(default=None)
    """
    Optional namespace to apply to the Workbook.
    """

    sheets: typing.Optional[typing.List[SheetConfig]] = pydantic.Field(default=None)
    """
    Sheets to create on the Workbook.
    """

    actions: typing.Optional[typing.List[Action]] = pydantic.Field(default=None)
    """
    Actions to create on the Workbook.
    """

    settings: typing.Optional[WorkbookConfigSettings] = pydantic.Field(default=None)
    """
    The Workbook settings.
    """

    metadata: typing.Optional[typing.Optional[typing.Any]] = pydantic.Field(default=None)
    """
    Metadata for the workbook
    """

    treatments: typing.Optional[typing.List[WorkbookTreatments]] = pydantic.Field(default=None)
    """
    Treatments for the workbook
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
