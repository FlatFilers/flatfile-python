# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..commons.types.environment_id import EnvironmentId
from ..core.request_options import RequestOptions
from .types.list_agents_response import ListAgentsResponse
from ..core.pydantic_utilities import parse_obj_as
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..events.types.event_topic import EventTopic
from .types.compiler import Compiler
from .types.agent_response import AgentResponse
from ..commons.errors.bad_request_error import BadRequestError
from ..commons.types.errors import Errors
from ..commons.types.agent_id import AgentId
from ..core.jsonable_encoder import jsonable_encoder
from ..commons.errors.not_found_error import NotFoundError
from .types.list_agent_versions_response import ListAgentVersionsResponse
from ..commons.types.agent_version_id import AgentVersionId
from .types.agent_version_response import AgentVersionResponse
from ..roles.types.list_actor_roles_response import ListActorRolesResponse
from ..commons.errors.forbidden_error import ForbiddenError
from ..commons.types.role_id import RoleId
from ..roles.types.resource_id_union import ResourceIdUnion
from ..roles.types.assign_role_response import AssignRoleResponse
from ..core.serialization import convert_and_respect_annotation_metadata
from ..commons.types.actor_role_id import ActorRoleId
from ..commons.types.success import Success
from .types.get_agent_logs_response import GetAgentLogsResponse
from ..commons.types.event_id import EventId
from .types.get_detailed_agent_log_response import GetDetailedAgentLogResponse
from ..commons.types.space_id import SpaceId
from ..commons.types.success_query_parameter import SuccessQueryParameter
from ..commons.types.page_size import PageSize
from ..commons.types.page_number import PageNumber
from .types.get_detailed_agent_logs_response import GetDetailedAgentLogsResponse
from .types.get_executions_response import GetExecutionsResponse
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class AgentsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self, *, environment_id: EnvironmentId, request_options: typing.Optional[RequestOptions] = None
    ) -> ListAgentsResponse:
        """
        Parameters
        ----------
        environment_id : EnvironmentId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListAgentsResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.agents.list(
            environment_id="us_env_YOUR_ID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "agents",
            method="GET",
            params={
                "environmentId": environment_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListAgentsResponse,
                    parse_obj_as(
                        type_=ListAgentsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self,
        *,
        environment_id: EnvironmentId,
        topics: typing.Optional[typing.Sequence[EventTopic]] = OMIT,
        compiler: typing.Optional[Compiler] = OMIT,
        source: typing.Optional[str] = OMIT,
        source_map: typing.Optional[str] = OMIT,
        slug: typing.Optional[str] = OMIT,
        options: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AgentResponse:
        """
        Parameters
        ----------
        environment_id : EnvironmentId

        topics : typing.Optional[typing.Sequence[EventTopic]]
            The topics the agent should listen for

        compiler : typing.Optional[Compiler]
            The compiler of the agent

        source : typing.Optional[str]
            The source of the agent

        source_map : typing.Optional[str]
            The source map of the agent

        slug : typing.Optional[str]
            The slug of the agent

        options : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Options for the agent

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AgentResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.agents.create(
            environment_id="us_env_YOUR_ID",
            topics=["workbook:updated"],
            compiler="js",
            source="module.exports = { routeEvent: async (...args) => { console.log(args) } }",
            options={"namespace": "space:blue"},
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "agents",
            method="POST",
            params={
                "environmentId": environment_id,
            },
            json={
                "topics": topics,
                "compiler": compiler,
                "source": source,
                "sourceMap": source_map,
                "slug": slug,
                "options": options,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    AgentResponse,
                    parse_obj_as(
                        type_=AgentResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self,
        agent_id: AgentId,
        *,
        environment_id: typing.Optional[EnvironmentId] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AgentResponse:
        """
        Parameters
        ----------
        agent_id : AgentId

        environment_id : typing.Optional[EnvironmentId]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AgentResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.agents.get(
            agent_id="us_ag_YOUR_ID",
            environment_id="us_env_YOUR_ID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"agents/{jsonable_encoder(agent_id)}",
            method="GET",
            params={
                "environmentId": environment_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    AgentResponse,
                    parse_obj_as(
                        type_=AgentResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_versions(
        self, agent_id: AgentId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ListAgentVersionsResponse:
        """
        Parameters
        ----------
        agent_id : AgentId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListAgentVersionsResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.agents.list_versions(
            agent_id="agentId",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"agents/{jsonable_encoder(agent_id)}/versions",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListAgentVersionsResponse,
                    parse_obj_as(
                        type_=ListAgentVersionsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def revert(
        self,
        agent_id: AgentId,
        agent_version_id: AgentVersionId,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AgentVersionResponse:
        """
        Parameters
        ----------
        agent_id : AgentId

        agent_version_id : AgentVersionId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AgentVersionResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.agents.revert(
            agent_id="agentId",
            agent_version_id="agentVersionId",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"agents/{jsonable_encoder(agent_id)}/versions/{jsonable_encoder(agent_version_id)}/revert",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    AgentVersionResponse,
                    parse_obj_as(
                        type_=AgentVersionResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_agent_roles(
        self, agent_id: AgentId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ListActorRolesResponse:
        """
        Lists roles assigned to an agent.

        Parameters
        ----------
        agent_id : AgentId
            The agent id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListActorRolesResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.agents.list_agent_roles(
            agent_id="agentId",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"agents/{jsonable_encoder(agent_id)}/roles",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListActorRolesResponse,
                    parse_obj_as(
                        type_=ListActorRolesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def assign_agent_role(
        self,
        agent_id: AgentId,
        *,
        role_id: RoleId,
        resource_id: ResourceIdUnion,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AssignRoleResponse:
        """
        Assigns a role to a agent.

        Parameters
        ----------
        agent_id : AgentId
            The agent id

        role_id : RoleId

        resource_id : ResourceIdUnion

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AssignRoleResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.agents.assign_agent_role(
            agent_id="agentId",
            role_id="roleId",
            resource_id="resourceId",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"agents/{jsonable_encoder(agent_id)}/roles",
            method="POST",
            json={
                "roleId": role_id,
                "resourceId": convert_and_respect_annotation_metadata(
                    object_=resource_id, annotation=ResourceIdUnion, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    AssignRoleResponse,
                    parse_obj_as(
                        type_=AssignRoleResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_agent_role(
        self, agent_id: AgentId, actor_role_id: ActorRoleId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Success:
        """
        Removes a role from an agent.

        Parameters
        ----------
        agent_id : AgentId
            The agent id

        actor_role_id : ActorRoleId
            The actor role id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Success

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.agents.delete_agent_role(
            agent_id="agentId",
            actor_role_id="actorRoleId",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"agents/{jsonable_encoder(agent_id)}/roles/{jsonable_encoder(actor_role_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Success,
                    parse_obj_as(
                        type_=Success,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_agent_logs(
        self,
        agent_id: AgentId,
        *,
        environment_id: EnvironmentId,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetAgentLogsResponse:
        """
        Parameters
        ----------
        agent_id : AgentId

        environment_id : EnvironmentId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAgentLogsResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.agents.get_agent_logs(
            agent_id="us_ag_YOUR_ID",
            environment_id="us_env_YOUR_ID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"agents/{jsonable_encoder(agent_id)}/logs",
            method="GET",
            params={
                "environmentId": environment_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetAgentLogsResponse,
                    parse_obj_as(
                        type_=GetAgentLogsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_agent_log(
        self,
        event_id: EventId,
        *,
        environment_id: EnvironmentId,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetDetailedAgentLogResponse:
        """
        Parameters
        ----------
        event_id : EventId

        environment_id : EnvironmentId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetDetailedAgentLogResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.agents.get_agent_log(
            event_id="commons.EventId",
            environment_id="us_env_YOUR_ID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"agents/log/{jsonable_encoder(event_id)}",
            method="GET",
            params={
                "environmentId": environment_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetDetailedAgentLogResponse,
                    parse_obj_as(
                        type_=GetDetailedAgentLogResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_environment_agent_logs(
        self,
        *,
        environment_id: EnvironmentId,
        space_id: typing.Optional[SpaceId] = None,
        success: typing.Optional[SuccessQueryParameter] = None,
        page_size: typing.Optional[PageSize] = None,
        page_number: typing.Optional[PageNumber] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetDetailedAgentLogsResponse:
        """
        Parameters
        ----------
        environment_id : EnvironmentId

        space_id : typing.Optional[SpaceId]

        success : typing.Optional[SuccessQueryParameter]

        page_size : typing.Optional[PageSize]

        page_number : typing.Optional[PageNumber]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetDetailedAgentLogsResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.agents.get_environment_agent_logs(
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            success=True,
            page_size=20,
            page_number=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "agents/logs",
            method="GET",
            params={
                "environmentId": environment_id,
                "spaceId": space_id,
                "success": success,
                "pageSize": page_size,
                "pageNumber": page_number,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetDetailedAgentLogsResponse,
                    parse_obj_as(
                        type_=GetDetailedAgentLogsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_environment_agent_executions(
        self,
        *,
        environment_id: EnvironmentId,
        agent_id: typing.Optional[AgentId] = None,
        space_id: typing.Optional[SpaceId] = None,
        success: typing.Optional[SuccessQueryParameter] = None,
        page_size: typing.Optional[PageSize] = None,
        page_number: typing.Optional[PageNumber] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetExecutionsResponse:
        """
        Parameters
        ----------
        environment_id : EnvironmentId

        agent_id : typing.Optional[AgentId]

        space_id : typing.Optional[SpaceId]

        success : typing.Optional[SuccessQueryParameter]

        page_size : typing.Optional[PageSize]

        page_number : typing.Optional[PageNumber]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetExecutionsResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.agents.get_environment_agent_executions(
            environment_id="us_env_YOUR_ID",
            agent_id="us_ag_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            success=True,
            page_size=20,
            page_number=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "agents/executions",
            method="GET",
            params={
                "environmentId": environment_id,
                "agentId": agent_id,
                "spaceId": space_id,
                "success": success,
                "pageSize": page_size,
                "pageNumber": page_number,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetExecutionsResponse,
                    parse_obj_as(
                        type_=GetExecutionsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(
        self,
        agent_id: AgentId,
        *,
        environment_id: EnvironmentId,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Success:
        """
        Deletes a single agent

        Parameters
        ----------
        agent_id : AgentId

        environment_id : EnvironmentId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Success

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.agents.delete(
            agent_id="us_ag_YOUR_ID",
            environment_id="us_env_YOUR_ID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"agents/{jsonable_encoder(agent_id)}",
            method="DELETE",
            params={
                "environmentId": environment_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Success,
                    parse_obj_as(
                        type_=Success,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncAgentsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self, *, environment_id: EnvironmentId, request_options: typing.Optional[RequestOptions] = None
    ) -> ListAgentsResponse:
        """
        Parameters
        ----------
        environment_id : EnvironmentId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListAgentsResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.agents.list(
                environment_id="us_env_YOUR_ID",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "agents",
            method="GET",
            params={
                "environmentId": environment_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListAgentsResponse,
                    parse_obj_as(
                        type_=ListAgentsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self,
        *,
        environment_id: EnvironmentId,
        topics: typing.Optional[typing.Sequence[EventTopic]] = OMIT,
        compiler: typing.Optional[Compiler] = OMIT,
        source: typing.Optional[str] = OMIT,
        source_map: typing.Optional[str] = OMIT,
        slug: typing.Optional[str] = OMIT,
        options: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AgentResponse:
        """
        Parameters
        ----------
        environment_id : EnvironmentId

        topics : typing.Optional[typing.Sequence[EventTopic]]
            The topics the agent should listen for

        compiler : typing.Optional[Compiler]
            The compiler of the agent

        source : typing.Optional[str]
            The source of the agent

        source_map : typing.Optional[str]
            The source map of the agent

        slug : typing.Optional[str]
            The slug of the agent

        options : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Options for the agent

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AgentResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.agents.create(
                environment_id="us_env_YOUR_ID",
                topics=["workbook:updated"],
                compiler="js",
                source="module.exports = { routeEvent: async (...args) => { console.log(args) } }",
                options={"namespace": "space:blue"},
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "agents",
            method="POST",
            params={
                "environmentId": environment_id,
            },
            json={
                "topics": topics,
                "compiler": compiler,
                "source": source,
                "sourceMap": source_map,
                "slug": slug,
                "options": options,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    AgentResponse,
                    parse_obj_as(
                        type_=AgentResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self,
        agent_id: AgentId,
        *,
        environment_id: typing.Optional[EnvironmentId] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AgentResponse:
        """
        Parameters
        ----------
        agent_id : AgentId

        environment_id : typing.Optional[EnvironmentId]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AgentResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.agents.get(
                agent_id="us_ag_YOUR_ID",
                environment_id="us_env_YOUR_ID",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"agents/{jsonable_encoder(agent_id)}",
            method="GET",
            params={
                "environmentId": environment_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    AgentResponse,
                    parse_obj_as(
                        type_=AgentResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_versions(
        self, agent_id: AgentId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ListAgentVersionsResponse:
        """
        Parameters
        ----------
        agent_id : AgentId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListAgentVersionsResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.agents.list_versions(
                agent_id="agentId",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"agents/{jsonable_encoder(agent_id)}/versions",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListAgentVersionsResponse,
                    parse_obj_as(
                        type_=ListAgentVersionsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def revert(
        self,
        agent_id: AgentId,
        agent_version_id: AgentVersionId,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AgentVersionResponse:
        """
        Parameters
        ----------
        agent_id : AgentId

        agent_version_id : AgentVersionId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AgentVersionResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.agents.revert(
                agent_id="agentId",
                agent_version_id="agentVersionId",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"agents/{jsonable_encoder(agent_id)}/versions/{jsonable_encoder(agent_version_id)}/revert",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    AgentVersionResponse,
                    parse_obj_as(
                        type_=AgentVersionResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_agent_roles(
        self, agent_id: AgentId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ListActorRolesResponse:
        """
        Lists roles assigned to an agent.

        Parameters
        ----------
        agent_id : AgentId
            The agent id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListActorRolesResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.agents.list_agent_roles(
                agent_id="agentId",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"agents/{jsonable_encoder(agent_id)}/roles",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListActorRolesResponse,
                    parse_obj_as(
                        type_=ListActorRolesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def assign_agent_role(
        self,
        agent_id: AgentId,
        *,
        role_id: RoleId,
        resource_id: ResourceIdUnion,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AssignRoleResponse:
        """
        Assigns a role to a agent.

        Parameters
        ----------
        agent_id : AgentId
            The agent id

        role_id : RoleId

        resource_id : ResourceIdUnion

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AssignRoleResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.agents.assign_agent_role(
                agent_id="agentId",
                role_id="roleId",
                resource_id="resourceId",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"agents/{jsonable_encoder(agent_id)}/roles",
            method="POST",
            json={
                "roleId": role_id,
                "resourceId": convert_and_respect_annotation_metadata(
                    object_=resource_id, annotation=ResourceIdUnion, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    AssignRoleResponse,
                    parse_obj_as(
                        type_=AssignRoleResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_agent_role(
        self, agent_id: AgentId, actor_role_id: ActorRoleId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Success:
        """
        Removes a role from an agent.

        Parameters
        ----------
        agent_id : AgentId
            The agent id

        actor_role_id : ActorRoleId
            The actor role id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Success

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.agents.delete_agent_role(
                agent_id="agentId",
                actor_role_id="actorRoleId",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"agents/{jsonable_encoder(agent_id)}/roles/{jsonable_encoder(actor_role_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Success,
                    parse_obj_as(
                        type_=Success,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_agent_logs(
        self,
        agent_id: AgentId,
        *,
        environment_id: EnvironmentId,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetAgentLogsResponse:
        """
        Parameters
        ----------
        agent_id : AgentId

        environment_id : EnvironmentId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAgentLogsResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.agents.get_agent_logs(
                agent_id="us_ag_YOUR_ID",
                environment_id="us_env_YOUR_ID",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"agents/{jsonable_encoder(agent_id)}/logs",
            method="GET",
            params={
                "environmentId": environment_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetAgentLogsResponse,
                    parse_obj_as(
                        type_=GetAgentLogsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_agent_log(
        self,
        event_id: EventId,
        *,
        environment_id: EnvironmentId,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetDetailedAgentLogResponse:
        """
        Parameters
        ----------
        event_id : EventId

        environment_id : EnvironmentId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetDetailedAgentLogResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.agents.get_agent_log(
                event_id="commons.EventId",
                environment_id="us_env_YOUR_ID",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"agents/log/{jsonable_encoder(event_id)}",
            method="GET",
            params={
                "environmentId": environment_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetDetailedAgentLogResponse,
                    parse_obj_as(
                        type_=GetDetailedAgentLogResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_environment_agent_logs(
        self,
        *,
        environment_id: EnvironmentId,
        space_id: typing.Optional[SpaceId] = None,
        success: typing.Optional[SuccessQueryParameter] = None,
        page_size: typing.Optional[PageSize] = None,
        page_number: typing.Optional[PageNumber] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetDetailedAgentLogsResponse:
        """
        Parameters
        ----------
        environment_id : EnvironmentId

        space_id : typing.Optional[SpaceId]

        success : typing.Optional[SuccessQueryParameter]

        page_size : typing.Optional[PageSize]

        page_number : typing.Optional[PageNumber]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetDetailedAgentLogsResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.agents.get_environment_agent_logs(
                environment_id="us_env_YOUR_ID",
                space_id="us_sp_YOUR_ID",
                success=True,
                page_size=20,
                page_number=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "agents/logs",
            method="GET",
            params={
                "environmentId": environment_id,
                "spaceId": space_id,
                "success": success,
                "pageSize": page_size,
                "pageNumber": page_number,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetDetailedAgentLogsResponse,
                    parse_obj_as(
                        type_=GetDetailedAgentLogsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_environment_agent_executions(
        self,
        *,
        environment_id: EnvironmentId,
        agent_id: typing.Optional[AgentId] = None,
        space_id: typing.Optional[SpaceId] = None,
        success: typing.Optional[SuccessQueryParameter] = None,
        page_size: typing.Optional[PageSize] = None,
        page_number: typing.Optional[PageNumber] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetExecutionsResponse:
        """
        Parameters
        ----------
        environment_id : EnvironmentId

        agent_id : typing.Optional[AgentId]

        space_id : typing.Optional[SpaceId]

        success : typing.Optional[SuccessQueryParameter]

        page_size : typing.Optional[PageSize]

        page_number : typing.Optional[PageNumber]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetExecutionsResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.agents.get_environment_agent_executions(
                environment_id="us_env_YOUR_ID",
                agent_id="us_ag_YOUR_ID",
                space_id="us_sp_YOUR_ID",
                success=True,
                page_size=20,
                page_number=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "agents/executions",
            method="GET",
            params={
                "environmentId": environment_id,
                "agentId": agent_id,
                "spaceId": space_id,
                "success": success,
                "pageSize": page_size,
                "pageNumber": page_number,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetExecutionsResponse,
                    parse_obj_as(
                        type_=GetExecutionsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(
        self,
        agent_id: AgentId,
        *,
        environment_id: EnvironmentId,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Success:
        """
        Deletes a single agent

        Parameters
        ----------
        agent_id : AgentId

        environment_id : EnvironmentId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Success

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.agents.delete(
                agent_id="us_ag_YOUR_ID",
                environment_id="us_env_YOUR_ID",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"agents/{jsonable_encoder(agent_id)}",
            method="DELETE",
            params={
                "environmentId": environment_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Success,
                    parse_obj_as(
                        type_=Success,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
