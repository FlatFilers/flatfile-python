# This file was auto-generated by Fern from our API Definition.

from .agent_config import AgentConfig
from ...commons.types.agent_id import AgentId
import typing_extensions
import datetime as dt
from ...core.serialization import FieldMetadata
from ...commons.types.account_id import AccountId
from ...commons.types.environment_id import EnvironmentId
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import typing
import pydantic


class Agent(AgentConfig):
    """
    Examples
    --------
    import datetime

    from flatfile.agents import Agent

    Agent(
        id="us_ag_YOUR_ID",
        topics=["workbook:updated"],
        compiler="js",
        source="module.exports = { routeEvent: async (...args) => { console.log(args) } }",
        slug="default",
        created_at=datetime.datetime.fromisoformat(
            "2023-10-30 16:59:45.735000+00:00",
        ),
        updated_at=datetime.datetime.fromisoformat(
            "2023-10-30 16:59:45.735000+00:00",
        ),
        account_id="us_acc_YOUR_ID",
        environment_id="us_env_YOUR_ID",
        options={"namespace": "space:blue"},
    )
    """

    id: AgentId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")]
    account_id: typing_extensions.Annotated[AccountId, FieldMetadata(alias="accountId")]
    environment_id: typing_extensions.Annotated[EnvironmentId, FieldMetadata(alias="environmentId")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
