# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
from ...events.types.event_topic import EventTopic
import pydantic
from .compiler import Compiler
import typing_extensions
from ...core.serialization import FieldMetadata
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class AgentConfig(UniversalBaseModel):
    """
    Properties used to create a new agent

    Examples
    --------
    from flatfile.agents import AgentConfig

    AgentConfig(
        topics=["workbook:updated"],
        compiler="js",
        source="module.exports = { routeEvent: async (...args) => { console.log(args) } }",
        options={"namespace": "space:blue"},
    )
    """

    topics: typing.Optional[typing.List[EventTopic]] = pydantic.Field(default=None)
    """
    The topics the agent should listen for
    """

    compiler: typing.Optional[Compiler] = pydantic.Field(default=None)
    """
    The compiler of the agent
    """

    source: typing.Optional[str] = pydantic.Field(default=None)
    """
    The source of the agent
    """

    source_map: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="sourceMap")] = pydantic.Field(
        default=None
    )
    """
    The source map of the agent
    """

    slug: typing.Optional[str] = pydantic.Field(default=None)
    """
    The slug of the agent
    """

    options: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Options for the agent
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
