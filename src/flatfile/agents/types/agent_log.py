# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing_extensions
from ...commons.types.agent_id import AgentId
from ...core.serialization import FieldMetadata
from ...commons.types.event_id import EventId
import pydantic
import typing
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class AgentLog(UniversalBaseModel):
    """
    A log of an agent execution

    Examples
    --------
    from flatfile.agents import AgentLog

    AgentLog(
        event_id="us_evt_YOUR_ID",
        agent_id="us_ag_YOUR_ID",
        success=True,
        created_at="2022-09-18T00:19:57.007Z",
        completed_at="2022-09-18T00:20:04.007Z",
        log="SUCCESS",
    )
    """

    agent_id: typing_extensions.Annotated[AgentId, FieldMetadata(alias="agentId")]
    event_id: typing_extensions.Annotated[EventId, FieldMetadata(alias="eventId")]
    success: bool = pydantic.Field()
    """
    Whether the agent execution was successful
    """

    created_at: typing_extensions.Annotated[str, FieldMetadata(alias="createdAt")]
    completed_at: typing_extensions.Annotated[str, FieldMetadata(alias="completedAt")]
    log: typing.Optional[str] = pydantic.Field(default=None)
    """
    The log of the agent execution
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
