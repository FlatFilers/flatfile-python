# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing_extensions
from ...commons.types.event_id import EventId
from ...core.serialization import FieldMetadata
import pydantic
import datetime as dt
import typing
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class DetailedAgentLog(UniversalBaseModel):
    """
    A log of an agent execution

    Examples
    --------
    import datetime

    from flatfile.agents import DetailedAgentLog

    DetailedAgentLog(
        event_id="us_evt_YOUR_ID",
        success=True,
        created_at=datetime.datetime.fromisoformat(
            "2022-09-18 00:19:57.007000+00:00",
        ),
        completed_at=datetime.datetime.fromisoformat(
            "2022-09-18 00:20:04.007000+00:00",
        ),
        duration=500,
        topic="space:created",
        context={},
        log="SUCCESS",
    )
    """

    event_id: typing_extensions.Annotated[EventId, FieldMetadata(alias="eventId")]
    success: bool = pydantic.Field()
    """
    Whether the agent execution was successful
    """

    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    completed_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="completedAt")]
    duration: int = pydantic.Field()
    """
    The duration of the agent execution
    """

    topic: str = pydantic.Field()
    """
    The topics of the agent execution
    """

    context: typing.Dict[str, typing.Optional[typing.Any]] = pydantic.Field()
    """
    The context of the agent execution
    """

    log: typing.Optional[str] = pydantic.Field(default=None)
    """
    The log of the agent execution
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
