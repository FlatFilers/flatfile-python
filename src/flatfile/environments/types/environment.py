# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
from ...commons.types.environment_id import EnvironmentId
import typing_extensions
from ...commons.types.account_id import AccountId
from ...core.serialization import FieldMetadata
import pydantic
import typing
from .guest_authentication_enum import GuestAuthenticationEnum
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class Environment(UniversalBaseModel):
    """
    Examples
    --------
    from flatfile.environments import Environment

    Environment(
        id="us_env_YOUR_ID",
        account_id="us_acc_YOUR_ID",
        name="dev",
        is_prod=False,
        guest_authentication=["magic_link"],
        features={},
        metadata={},
        namespaces=["default"],
    )
    """

    id: EnvironmentId
    account_id: typing_extensions.Annotated[AccountId, FieldMetadata(alias="accountId")]
    name: str = pydantic.Field()
    """
    The name of the environment
    """

    is_prod: typing_extensions.Annotated[bool, FieldMetadata(alias="isProd")] = pydantic.Field()
    """
    Whether or not the environment is a production environment
    """

    guest_authentication: typing_extensions.Annotated[
        typing.List[GuestAuthenticationEnum], FieldMetadata(alias="guestAuthentication")
    ]
    features: typing.Dict[str, typing.Optional[typing.Any]]
    metadata: typing.Dict[str, typing.Optional[typing.Any]]
    translations_path: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="translationsPath")] = None
    namespaces: typing.Optional[typing.List[str]] = None
    language_override: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="languageOverride")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
