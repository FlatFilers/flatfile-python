# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
from .domain import Domain
import pydantic
from .context import Context
import typing
from .event_attributes import EventAttributes
import typing_extensions
from ...core.serialization import FieldMetadata
from .origin import Origin
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class BaseEvent(UniversalBaseModel):
    domain: Domain = pydantic.Field()
    """
    The domain of the event
    """

    context: Context = pydantic.Field()
    """
    The context of the event
    """

    attributes: typing.Optional[EventAttributes] = pydantic.Field(default=None)
    """
    The attributes of the event
    """

    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = (
        pydantic.Field(default=None)
    )
    """
    The callback url to acknowledge the event
    """

    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = pydantic.Field(
        default=None
    )
    """
    The url to retrieve the data associated with the event
    """

    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
