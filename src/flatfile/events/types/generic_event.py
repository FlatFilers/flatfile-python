# This file was auto-generated by Fern from our API Definition.

from .base_event import BaseEvent
from ...commons.types.event_id import EventId
import typing_extensions
import datetime as dt
from ...core.serialization import FieldMetadata
import pydantic
import typing
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class GenericEvent(BaseEvent):
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")] = pydantic.Field()
    """
    Date the event was created
    """

    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = (
        pydantic.Field(default=None)
    )
    """
    Date the event was deleted
    """

    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = pydantic.Field(default=None)
    """
    Date the event was acknowledged
    """

    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = (
        pydantic.Field(default=None)
    )
    """
    The actor (user or system) who acknowledged the event
    """

    payload: typing.Dict[str, typing.Optional[typing.Any]]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
