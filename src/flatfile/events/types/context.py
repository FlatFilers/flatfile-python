# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .event_context_slugs import EventContextSlugs
import typing_extensions
from .action_name import ActionName
from ...core.serialization import FieldMetadata
from ...commons.types.account_id import AccountId
from ...commons.types.environment_id import EnvironmentId
from ...commons.types.space_id import SpaceId
from ...commons.types.workbook_id import WorkbookId
from ...commons.types.sheet_id import SheetId
from .sheet_slug import SheetSlug
from ...commons.types.snapshot_id import SnapshotId
from ...commons.types.version_id import VersionId
from ...commons.types.commit_id import CommitId
from ...commons.types.job_id import JobId
from ...commons.types.program_id import ProgramId
from ...commons.types.file_id import FileId
from ...commons.types.document_id import DocumentId
from ...commons.types.event_id import EventId
from ...commons.types.app_id import AppId
from ...commons.types.action_id import ActionId
from ...commons.types.data_clip_id import DataClipId
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class Context(UniversalBaseModel):
    """
    The context of the event

    Examples
    --------
    from flatfile.events import Context

    Context(
        account_id="us_acc_YOUR_ID",
        actor_id="us_key_SOME_KEY",
        environment_id="us_env_YOUR_ID",
        space_id="us_sp_YOUR_ID",
        workbook_id="us_wb_YOUR_ID",
    )
    """

    namespaces: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    The namespaces of the event
    """

    slugs: typing.Optional[EventContextSlugs] = pydantic.Field(default=None)
    """
    The slugs of related resources
    """

    action_name: typing_extensions.Annotated[typing.Optional[ActionName], FieldMetadata(alias="actionName")] = None
    account_id: typing_extensions.Annotated[AccountId, FieldMetadata(alias="accountId")]
    environment_id: typing_extensions.Annotated[EnvironmentId, FieldMetadata(alias="environmentId")]
    space_id: typing_extensions.Annotated[typing.Optional[SpaceId], FieldMetadata(alias="spaceId")] = None
    workbook_id: typing_extensions.Annotated[typing.Optional[WorkbookId], FieldMetadata(alias="workbookId")] = None
    sheet_id: typing_extensions.Annotated[typing.Optional[SheetId], FieldMetadata(alias="sheetId")] = None
    sheet_slug: typing_extensions.Annotated[typing.Optional[SheetSlug], FieldMetadata(alias="sheetSlug")] = None
    snapshot_id: typing_extensions.Annotated[typing.Optional[SnapshotId], FieldMetadata(alias="snapshotId")] = None
    version_id: typing_extensions.Annotated[typing.Optional[VersionId], FieldMetadata(alias="versionId")] = (
        pydantic.Field(default=None)
    )
    """
    Deprecated, use `commitId` instead.
    """

    commit_id: typing_extensions.Annotated[typing.Optional[CommitId], FieldMetadata(alias="commitId")] = None
    job_id: typing_extensions.Annotated[typing.Optional[JobId], FieldMetadata(alias="jobId")] = None
    program_id: typing_extensions.Annotated[typing.Optional[ProgramId], FieldMetadata(alias="programId")] = None
    file_id: typing_extensions.Annotated[typing.Optional[FileId], FieldMetadata(alias="fileId")] = None
    document_id: typing_extensions.Annotated[typing.Optional[DocumentId], FieldMetadata(alias="documentId")] = None
    preceding_event_id: typing_extensions.Annotated[
        typing.Optional[EventId], FieldMetadata(alias="precedingEventId")
    ] = None
    actor_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="actorId")] = pydantic.Field(
        default=None
    )
    """
    Can be a UserId, GuestId, or AgentId
    """

    app_id: typing_extensions.Annotated[typing.Optional[AppId], FieldMetadata(alias="appId")] = None
    action_id: typing_extensions.Annotated[typing.Optional[ActionId], FieldMetadata(alias="actionId")] = None
    data_clip_id: typing_extensions.Annotated[typing.Optional[DataClipId], FieldMetadata(alias="dataClipId")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
