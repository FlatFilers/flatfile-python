# This file was auto-generated by Fern from our API Definition.

from .base_event import BaseEvent
from .event_topic import EventTopic
import typing
import typing_extensions
import datetime as dt
from ...core.serialization import FieldMetadata
import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class CreateEventConfig(BaseEvent):
    """
    Properties used to create a new event

    Examples
    --------
    from flatfile.events import Context, CreateEventConfig

    CreateEventConfig(
        topic="workbook:updated",
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: EventTopic
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = (
        pydantic.Field(default=None)
    )
    """
    Date the event was deleted
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
