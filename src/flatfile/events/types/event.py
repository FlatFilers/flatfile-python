# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ...core.pydantic_utilities import UniversalBaseModel
import typing
from ...commons.types.event_id import EventId
import typing_extensions
import datetime as dt
from ...core.serialization import FieldMetadata
from .domain import Domain
from .context import Context
from .event_attributes import EventAttributes
from .origin import Origin
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class Event_AgentCreated(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["agent:created"] = "agent:created"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_AgentUpdated(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["agent:updated"] = "agent:updated"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_AgentDeleted(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["agent:deleted"] = "agent:deleted"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_SpaceCreated(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["space:created"] = "space:created"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_SpaceUpdated(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["space:updated"] = "space:updated"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_SpaceDeleted(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["space:deleted"] = "space:deleted"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_SpaceArchived(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["space:archived"] = "space:archived"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_SpaceExpired(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["space:expired"] = "space:expired"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_SpaceGuestAdded(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["space:guestAdded"] = "space:guestAdded"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_SpaceGuestRemoved(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["space:guestRemoved"] = "space:guestRemoved"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_DocumentCreated(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["document:created"] = "document:created"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_DocumentUpdated(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["document:updated"] = "document:updated"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_DocumentDeleted(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["document:deleted"] = "document:deleted"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_WorkbookCreated(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["workbook:created"] = "workbook:created"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_WorkbookUpdated(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["workbook:updated"] = "workbook:updated"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_WorkbookDeleted(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["workbook:deleted"] = "workbook:deleted"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_WorkbookExpired(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["workbook:expired"] = "workbook:expired"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_SheetCreated(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["sheet:created"] = "sheet:created"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_SheetUpdated(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["sheet:updated"] = "sheet:updated"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_SheetDeleted(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["sheet:deleted"] = "sheet:deleted"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_SheetCountsUpdated(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["sheet:counts-updated"] = "sheet:counts-updated"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_SnapshotCreated(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["snapshot:created"] = "snapshot:created"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_RecordsCreated(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["records:created"] = "records:created"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_RecordsUpdated(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["records:updated"] = "records:updated"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_RecordsDeleted(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["records:deleted"] = "records:deleted"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_FileCreated(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["file:created"] = "file:created"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_FileUpdated(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["file:updated"] = "file:updated"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_FileDeleted(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["file:deleted"] = "file:deleted"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_FileExpired(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["file:expired"] = "file:expired"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_JobCreated(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["job:created"] = "job:created"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_JobUpdated(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["job:updated"] = "job:updated"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_JobDeleted(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["job:deleted"] = "job:deleted"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_JobFailed(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["job:failed"] = "job:failed"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_JobCompleted(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["job:completed"] = "job:completed"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_JobReady(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["job:ready"] = "job:ready"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_JobScheduled(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["job:scheduled"] = "job:scheduled"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_JobOutcomeAcknowledged(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["job:outcome-acknowledged"] = "job:outcome-acknowledged"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_JobPartsCompleted(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["job:parts-completed"] = "job:parts-completed"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_ProgramCreated(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["program:created"] = "program:created"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_ProgramUpdated(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["program:updated"] = "program:updated"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_CommitCreated(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["commit:created"] = "commit:created"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_CommitUpdated(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["commit:updated"] = "commit:updated"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_CommitCompleted(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["commit:completed"] = "commit:completed"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_SecretCreated(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["secret:created"] = "secret:created"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_SecretUpdated(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["secret:updated"] = "secret:updated"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_SecretDeleted(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["secret:deleted"] = "secret:deleted"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_LayerCreated(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["layer:created"] = "layer:created"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_EnvironmentCreated(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["environment:created"] = "environment:created"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_EnvironmentUpdated(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["environment:updated"] = "environment:updated"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_EnvironmentDeleted(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["environment:deleted"] = "environment:deleted"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_EnvironmentAutobuildCreated(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["environment:autobuild-created"] = "environment:autobuild-created"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_ActionCreated(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["action:created"] = "action:created"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_ActionUpdated(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["action:updated"] = "action:updated"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_ActionDeleted(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["action:deleted"] = "action:deleted"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_DataClipCreated(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["data-clip:created"] = "data-clip:created"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_DataClipUpdated(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["data-clip:updated"] = "data-clip:updated"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_DataClipDeleted(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["data-clip:deleted"] = "data-clip:deleted"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_DataClipCollaboratorUpdated(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["data-clip:collaborator-updated"] = "data-clip:collaborator-updated"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_DataClipResolutionsCreated(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["data-clip:resolutions-created"] = "data-clip:resolutions-created"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_DataClipResolutionsUpdated(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["data-clip:resolutions-updated"] = "data-clip:resolutions-updated"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Event_DataClipResolutionsRefreshed(UniversalBaseModel):
    """
    An event that tracks an activity within an environment

    Examples
    --------
    import datetime

    from flatfile.events import Context, Event_WorkbookUpdated, Origin

    Event_WorkbookUpdated(
        id="us_evt_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-07 20:46:04.300000+00:00",
        ),
        payload={"recordsAdded": 100},
        domain="workbook",
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
        callback_url="",
        data_url="",
        namespaces=["workbook"],
        origin=Origin(
            id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: typing.Literal["data-clip:resolutions-refreshed"] = "data-clip:resolutions-refreshed"
    id: EventId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    acknowledged_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="acknowledgedAt")
    ] = None
    acknowledged_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="acknowledgedBy")] = None
    payload: typing.Dict[str, typing.Optional[typing.Any]]
    domain: Domain
    context: Context
    attributes: typing.Optional[EventAttributes] = None
    callback_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callbackUrl")] = None
    data_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="dataUrl")] = None
    target: typing.Optional[str] = None
    origin: typing.Optional[Origin] = None
    namespaces: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


"""
import datetime

from flatfile.events import Context, Event_WorkbookUpdated, Origin

Event_WorkbookUpdated(
    id="us_evt_YOUR_ID",
    created_at=datetime.datetime.fromisoformat(
        "2023-11-07 20:46:04.300000+00:00",
    ),
    payload={"recordsAdded": 100},
    domain="workbook",
    context=Context(
        account_id="us_acc_YOUR_ID",
        actor_id="us_key_SOME_KEY",
        environment_id="us_env_YOUR_ID",
        space_id="us_sp_YOUR_ID",
        workbook_id="us_wb_YOUR_ID",
    ),
    callback_url="",
    data_url="",
    namespaces=["workbook"],
    origin=Origin(
        id="us_wb_YOUR_ID",
    ),
)
"""
Event = typing.Union[
    Event_AgentCreated,
    Event_AgentUpdated,
    Event_AgentDeleted,
    Event_SpaceCreated,
    Event_SpaceUpdated,
    Event_SpaceDeleted,
    Event_SpaceArchived,
    Event_SpaceExpired,
    Event_SpaceGuestAdded,
    Event_SpaceGuestRemoved,
    Event_DocumentCreated,
    Event_DocumentUpdated,
    Event_DocumentDeleted,
    Event_WorkbookCreated,
    Event_WorkbookUpdated,
    Event_WorkbookDeleted,
    Event_WorkbookExpired,
    Event_SheetCreated,
    Event_SheetUpdated,
    Event_SheetDeleted,
    Event_SheetCountsUpdated,
    Event_SnapshotCreated,
    Event_RecordsCreated,
    Event_RecordsUpdated,
    Event_RecordsDeleted,
    Event_FileCreated,
    Event_FileUpdated,
    Event_FileDeleted,
    Event_FileExpired,
    Event_JobCreated,
    Event_JobUpdated,
    Event_JobDeleted,
    Event_JobFailed,
    Event_JobCompleted,
    Event_JobReady,
    Event_JobScheduled,
    Event_JobOutcomeAcknowledged,
    Event_JobPartsCompleted,
    Event_ProgramCreated,
    Event_ProgramUpdated,
    Event_CommitCreated,
    Event_CommitUpdated,
    Event_CommitCompleted,
    Event_SecretCreated,
    Event_SecretUpdated,
    Event_SecretDeleted,
    Event_LayerCreated,
    Event_EnvironmentCreated,
    Event_EnvironmentUpdated,
    Event_EnvironmentDeleted,
    Event_EnvironmentAutobuildCreated,
    Event_ActionCreated,
    Event_ActionUpdated,
    Event_ActionDeleted,
    Event_DataClipCreated,
    Event_DataClipUpdated,
    Event_DataClipDeleted,
    Event_DataClipCollaboratorUpdated,
    Event_DataClipResolutionsCreated,
    Event_DataClipResolutionsUpdated,
    Event_DataClipResolutionsRefreshed,
]
