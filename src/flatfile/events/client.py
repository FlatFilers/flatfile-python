# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..commons.types.environment_id import EnvironmentId
from ..commons.types.space_id import SpaceId
import datetime as dt
from ..core.request_options import RequestOptions
from .types.list_all_events_response import ListAllEventsResponse
from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import parse_obj_as
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from .types.event_topic import EventTopic
from .types.domain import Domain
from .types.context import Context
from .types.event_attributes import EventAttributes
from .types.origin import Origin
from .types.event_response import EventResponse
from ..core.serialization import convert_and_respect_annotation_metadata
from ..commons.errors.bad_request_error import BadRequestError
from ..commons.types.errors import Errors
from ..commons.errors.not_found_error import NotFoundError
from ..commons.types.event_id import EventId
from ..core.jsonable_encoder import jsonable_encoder
from ..commons.types.success import Success
from ..spaces.types.event_token_response import EventTokenResponse
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class EventsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        environment_id: typing.Optional[EnvironmentId] = None,
        space_id: typing.Optional[SpaceId] = None,
        domain: typing.Optional[str] = None,
        topic: typing.Optional[str] = None,
        since: typing.Optional[dt.datetime] = None,
        page_size: typing.Optional[int] = None,
        page_number: typing.Optional[int] = None,
        include_acknowledged: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListAllEventsResponse:
        """
        Event topics that the Flatfile Platform emits.

        Parameters
        ----------
        environment_id : typing.Optional[EnvironmentId]
            Filter by environment

        space_id : typing.Optional[SpaceId]
            Filter by space

        domain : typing.Optional[str]
            Filter by event domain

        topic : typing.Optional[str]
            Filter by event topic

        since : typing.Optional[dt.datetime]
            Filter by event timestamp

        page_size : typing.Optional[int]
            Number of results to return in a page (default 10)

        page_number : typing.Optional[int]
            Based on pageSize, which page of results to return

        include_acknowledged : typing.Optional[bool]
            Include acknowledged events

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListAllEventsResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.events.list()
        """
        _response = self._client_wrapper.httpx_client.request(
            "events",
            method="GET",
            params={
                "environmentId": environment_id,
                "spaceId": space_id,
                "domain": domain,
                "topic": topic,
                "since": serialize_datetime(since) if since is not None else None,
                "pageSize": page_size,
                "pageNumber": page_number,
                "includeAcknowledged": include_acknowledged,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListAllEventsResponse,
                    parse_obj_as(
                        type_=ListAllEventsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self,
        *,
        topic: EventTopic,
        payload: typing.Dict[str, typing.Optional[typing.Any]],
        domain: Domain,
        context: Context,
        deleted_at: typing.Optional[dt.datetime] = OMIT,
        attributes: typing.Optional[EventAttributes] = OMIT,
        callback_url: typing.Optional[str] = OMIT,
        data_url: typing.Optional[str] = OMIT,
        target: typing.Optional[str] = OMIT,
        origin: typing.Optional[Origin] = OMIT,
        namespaces: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EventResponse:
        """
        Parameters
        ----------
        topic : EventTopic

        payload : typing.Dict[str, typing.Optional[typing.Any]]

        domain : Domain
            The domain of the event

        context : Context
            The context of the event

        deleted_at : typing.Optional[dt.datetime]
            Date the event was deleted

        attributes : typing.Optional[EventAttributes]
            The attributes of the event

        callback_url : typing.Optional[str]
            The callback url to acknowledge the event

        data_url : typing.Optional[str]
            The url to retrieve the data associated with the event

        target : typing.Optional[str]

        origin : typing.Optional[Origin]

        namespaces : typing.Optional[typing.Sequence[str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EventResponse

        Examples
        --------
        from flatfile import Flatfile
        from flatfile.events import Context

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.events.create(
            topic="workbook:updated",
            payload={"recordsAdded": 100},
            domain="workbook",
            context=Context(
                account_id="us_acc_YOUR_ID",
                actor_id="us_key_SOME_KEY",
                environment_id="us_env_YOUR_ID",
                space_id="us_sp_YOUR_ID",
                workbook_id="us_wb_YOUR_ID",
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "events",
            method="POST",
            json={
                "topic": topic,
                "payload": payload,
                "deletedAt": deleted_at,
                "domain": domain,
                "context": convert_and_respect_annotation_metadata(
                    object_=context, annotation=Context, direction="write"
                ),
                "attributes": convert_and_respect_annotation_metadata(
                    object_=attributes, annotation=EventAttributes, direction="write"
                ),
                "callbackUrl": callback_url,
                "dataUrl": data_url,
                "target": target,
                "origin": convert_and_respect_annotation_metadata(object_=origin, annotation=Origin, direction="write"),
                "namespaces": namespaces,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    EventResponse,
                    parse_obj_as(
                        type_=EventResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(self, event_id: EventId, *, request_options: typing.Optional[RequestOptions] = None) -> EventResponse:
        """
        Parameters
        ----------
        event_id : EventId
            The event id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EventResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.events.get(
            event_id="us_evt_YOUR_ID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"events/{jsonable_encoder(event_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    EventResponse,
                    parse_obj_as(
                        type_=EventResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def ack(self, event_id: EventId, *, request_options: typing.Optional[RequestOptions] = None) -> Success:
        """
        Parameters
        ----------
        event_id : EventId
            The event id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Success

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.events.ack(
            event_id="eventId",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"events/{jsonable_encoder(event_id)}/ack",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Success,
                    parse_obj_as(
                        type_=Success,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_event_token(
        self,
        *,
        scope: typing.Optional[str] = None,
        space_id: typing.Optional[SpaceId] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EventTokenResponse:
        """
        Get a token which can be used to subscribe to events for this space

        Parameters
        ----------
        scope : typing.Optional[str]
            The resource ID of the event stream (space or environment id)

        space_id : typing.Optional[SpaceId]
            The space ID of the event stream

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EventTokenResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.events.get_event_token()
        """
        _response = self._client_wrapper.httpx_client.request(
            "subscription",
            method="GET",
            params={
                "scope": scope,
                "spaceId": space_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    EventTokenResponse,
                    parse_obj_as(
                        type_=EventTokenResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncEventsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        environment_id: typing.Optional[EnvironmentId] = None,
        space_id: typing.Optional[SpaceId] = None,
        domain: typing.Optional[str] = None,
        topic: typing.Optional[str] = None,
        since: typing.Optional[dt.datetime] = None,
        page_size: typing.Optional[int] = None,
        page_number: typing.Optional[int] = None,
        include_acknowledged: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListAllEventsResponse:
        """
        Event topics that the Flatfile Platform emits.

        Parameters
        ----------
        environment_id : typing.Optional[EnvironmentId]
            Filter by environment

        space_id : typing.Optional[SpaceId]
            Filter by space

        domain : typing.Optional[str]
            Filter by event domain

        topic : typing.Optional[str]
            Filter by event topic

        since : typing.Optional[dt.datetime]
            Filter by event timestamp

        page_size : typing.Optional[int]
            Number of results to return in a page (default 10)

        page_number : typing.Optional[int]
            Based on pageSize, which page of results to return

        include_acknowledged : typing.Optional[bool]
            Include acknowledged events

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListAllEventsResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.events.list()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "events",
            method="GET",
            params={
                "environmentId": environment_id,
                "spaceId": space_id,
                "domain": domain,
                "topic": topic,
                "since": serialize_datetime(since) if since is not None else None,
                "pageSize": page_size,
                "pageNumber": page_number,
                "includeAcknowledged": include_acknowledged,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListAllEventsResponse,
                    parse_obj_as(
                        type_=ListAllEventsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self,
        *,
        topic: EventTopic,
        payload: typing.Dict[str, typing.Optional[typing.Any]],
        domain: Domain,
        context: Context,
        deleted_at: typing.Optional[dt.datetime] = OMIT,
        attributes: typing.Optional[EventAttributes] = OMIT,
        callback_url: typing.Optional[str] = OMIT,
        data_url: typing.Optional[str] = OMIT,
        target: typing.Optional[str] = OMIT,
        origin: typing.Optional[Origin] = OMIT,
        namespaces: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EventResponse:
        """
        Parameters
        ----------
        topic : EventTopic

        payload : typing.Dict[str, typing.Optional[typing.Any]]

        domain : Domain
            The domain of the event

        context : Context
            The context of the event

        deleted_at : typing.Optional[dt.datetime]
            Date the event was deleted

        attributes : typing.Optional[EventAttributes]
            The attributes of the event

        callback_url : typing.Optional[str]
            The callback url to acknowledge the event

        data_url : typing.Optional[str]
            The url to retrieve the data associated with the event

        target : typing.Optional[str]

        origin : typing.Optional[Origin]

        namespaces : typing.Optional[typing.Sequence[str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EventResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile
        from flatfile.events import Context

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.events.create(
                topic="workbook:updated",
                payload={"recordsAdded": 100},
                domain="workbook",
                context=Context(
                    account_id="us_acc_YOUR_ID",
                    actor_id="us_key_SOME_KEY",
                    environment_id="us_env_YOUR_ID",
                    space_id="us_sp_YOUR_ID",
                    workbook_id="us_wb_YOUR_ID",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "events",
            method="POST",
            json={
                "topic": topic,
                "payload": payload,
                "deletedAt": deleted_at,
                "domain": domain,
                "context": convert_and_respect_annotation_metadata(
                    object_=context, annotation=Context, direction="write"
                ),
                "attributes": convert_and_respect_annotation_metadata(
                    object_=attributes, annotation=EventAttributes, direction="write"
                ),
                "callbackUrl": callback_url,
                "dataUrl": data_url,
                "target": target,
                "origin": convert_and_respect_annotation_metadata(object_=origin, annotation=Origin, direction="write"),
                "namespaces": namespaces,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    EventResponse,
                    parse_obj_as(
                        type_=EventResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(self, event_id: EventId, *, request_options: typing.Optional[RequestOptions] = None) -> EventResponse:
        """
        Parameters
        ----------
        event_id : EventId
            The event id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EventResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.events.get(
                event_id="us_evt_YOUR_ID",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"events/{jsonable_encoder(event_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    EventResponse,
                    parse_obj_as(
                        type_=EventResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def ack(self, event_id: EventId, *, request_options: typing.Optional[RequestOptions] = None) -> Success:
        """
        Parameters
        ----------
        event_id : EventId
            The event id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Success

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.events.ack(
                event_id="eventId",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"events/{jsonable_encoder(event_id)}/ack",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Success,
                    parse_obj_as(
                        type_=Success,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_event_token(
        self,
        *,
        scope: typing.Optional[str] = None,
        space_id: typing.Optional[SpaceId] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EventTokenResponse:
        """
        Get a token which can be used to subscribe to events for this space

        Parameters
        ----------
        scope : typing.Optional[str]
            The resource ID of the event stream (space or environment id)

        space_id : typing.Optional[SpaceId]
            The space ID of the event stream

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EventTokenResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.events.get_event_token()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "subscription",
            method="GET",
            params={
                "scope": scope,
                "spaceId": space_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    EventTokenResponse,
                    parse_obj_as(
                        type_=EventTokenResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
