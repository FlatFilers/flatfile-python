# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..commons.types.space_id import SpaceId
from ..core.request_options import RequestOptions
from .types.list_guests_response import ListGuestsResponse
from ..core.pydantic_utilities import parse_obj_as
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from .types.guest_config import GuestConfig
from .types.create_guest_response import CreateGuestResponse
from ..core.serialization import convert_and_respect_annotation_metadata
from ..commons.types.guest_id import GuestId
from .types.guest_response import GuestResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..commons.types.success import Success
from ..commons.types.environment_id import EnvironmentId
from .types.guest_space import GuestSpace
from .types.guest_token_response import GuestTokenResponse
from ..roles.types.list_actor_roles_response import ListActorRolesResponse
from ..commons.errors.bad_request_error import BadRequestError
from ..commons.types.errors import Errors
from ..commons.errors.not_found_error import NotFoundError
from ..commons.errors.forbidden_error import ForbiddenError
from ..commons.types.role_id import RoleId
from ..roles.types.resource_id_union import ResourceIdUnion
from ..roles.types.assign_role_response import AssignRoleResponse
from ..commons.types.actor_role_id import ActorRoleId
from .types.invite import Invite
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class GuestsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        space_id: SpaceId,
        email: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListGuestsResponse:
        """
        Returns all guests

        Parameters
        ----------
        space_id : SpaceId
            ID of space to return

        email : typing.Optional[str]
            Email of guest to return

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListGuestsResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.guests.list(
            space_id="us_sp_YOUR_ID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "guests",
            method="GET",
            params={
                "spaceId": space_id,
                "email": email,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListGuestsResponse,
                    parse_obj_as(
                        type_=ListGuestsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self, *, request: typing.Sequence[GuestConfig], request_options: typing.Optional[RequestOptions] = None
    ) -> CreateGuestResponse:
        """
        Guests are only there to upload, edit, and download files and perform their tasks in a specific Space.

        Parameters
        ----------
        request : typing.Sequence[GuestConfig]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateGuestResponse

        Examples
        --------
        import datetime

        from flatfile import Flatfile
        from flatfile.guests import GuestConfig, GuestSpace, GuestWorkbook

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.guests.create(
            request=[
                GuestConfig(
                    environment_id="us_env_YOUR_ID",
                    email="email@example.com",
                    name="Your Name",
                    spaces=[
                        GuestSpace(
                            id="us_sp_YOUR_ID",
                            workbooks=[
                                GuestWorkbook(
                                    id="us_wb_YOUR_ID",
                                )
                            ],
                            last_accessed=datetime.datetime.fromisoformat(
                                "2023-10-30 16:59:45.735000+00:00",
                            ),
                        )
                    ],
                )
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "guests",
            method="POST",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=typing.Sequence[GuestConfig], direction="write"
            ),
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateGuestResponse,
                    parse_obj_as(
                        type_=CreateGuestResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(self, guest_id: GuestId, *, request_options: typing.Optional[RequestOptions] = None) -> GuestResponse:
        """
        Returns a single guest

        Parameters
        ----------
        guest_id : GuestId
            ID of guest to return

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GuestResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.guests.get(
            guest_id="us_g_YOUR_ID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"guests/{jsonable_encoder(guest_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GuestResponse,
                    parse_obj_as(
                        type_=GuestResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(self, guest_id: GuestId, *, request_options: typing.Optional[RequestOptions] = None) -> Success:
        """
        Deletes a single guest

        Parameters
        ----------
        guest_id : GuestId
            ID of guest to return

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Success

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.guests.delete(
            guest_id="us_g_YOUR_ID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"guests/{jsonable_encoder(guest_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Success,
                    parse_obj_as(
                        type_=Success,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        guest_id: GuestId,
        *,
        environment_id: typing.Optional[EnvironmentId] = OMIT,
        email: typing.Optional[str] = OMIT,
        name: typing.Optional[str] = OMIT,
        spaces: typing.Optional[typing.Sequence[GuestSpace]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GuestResponse:
        """
        Updates a single guest, for example to change name or email

        Parameters
        ----------
        guest_id : GuestId
            ID of guest to return

        environment_id : typing.Optional[EnvironmentId]

        email : typing.Optional[str]

        name : typing.Optional[str]

        spaces : typing.Optional[typing.Sequence[GuestSpace]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GuestResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.guests.update(
            guest_id="us_g_YOUR_ID",
            email="updated@example.com",
            name="Your Name Updated",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"guests/{jsonable_encoder(guest_id)}",
            method="PATCH",
            json={
                "environmentId": environment_id,
                "email": email,
                "name": name,
                "spaces": convert_and_respect_annotation_metadata(
                    object_=spaces, annotation=typing.Sequence[GuestSpace], direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GuestResponse,
                    parse_obj_as(
                        type_=GuestResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_guest_token(
        self,
        guest_id: GuestId,
        *,
        space_id: typing.Optional[SpaceId] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GuestTokenResponse:
        """
        Returns a single guest token

        Parameters
        ----------
        guest_id : GuestId
            ID of guest to return

        space_id : typing.Optional[SpaceId]
            ID of space to return

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GuestTokenResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.guests.get_guest_token(
            guest_id="us_g_YOUR_ID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"guests/{jsonable_encoder(guest_id)}/token",
            method="GET",
            params={
                "spaceId": space_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GuestTokenResponse,
                    parse_obj_as(
                        type_=GuestTokenResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_guest_roles(
        self, guest_id: GuestId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ListActorRolesResponse:
        """
        Lists roles assigned to a guest.

        Parameters
        ----------
        guest_id : GuestId
            The guest id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListActorRolesResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.guests.list_guest_roles(
            guest_id="guestId",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"guests/{jsonable_encoder(guest_id)}/roles",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListActorRolesResponse,
                    parse_obj_as(
                        type_=ListActorRolesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def assign_guest_role(
        self,
        guest_id: GuestId,
        *,
        role_id: RoleId,
        resource_id: ResourceIdUnion,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AssignRoleResponse:
        """
        Assigns a role to a guest.

        Parameters
        ----------
        guest_id : GuestId
            The guest id

        role_id : RoleId

        resource_id : ResourceIdUnion

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AssignRoleResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.guests.assign_guest_role(
            guest_id="guestId",
            role_id="roleId",
            resource_id="resourceId",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"guests/{jsonable_encoder(guest_id)}/roles",
            method="POST",
            json={
                "roleId": role_id,
                "resourceId": convert_and_respect_annotation_metadata(
                    object_=resource_id, annotation=ResourceIdUnion, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    AssignRoleResponse,
                    parse_obj_as(
                        type_=AssignRoleResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_guest_role(
        self, guest_id: GuestId, actor_role_id: ActorRoleId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Success:
        """
        Removes a role from a guest.

        Parameters
        ----------
        guest_id : GuestId
            The guest id

        actor_role_id : ActorRoleId
            The actor role id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Success

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.guests.delete_guest_role(
            guest_id="guestId",
            actor_role_id="actorRoleId",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"guests/{jsonable_encoder(guest_id)}/roles/{jsonable_encoder(actor_role_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Success,
                    parse_obj_as(
                        type_=Success,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def invite(
        self, *, request: typing.Sequence[Invite], request_options: typing.Optional[RequestOptions] = None
    ) -> Success:
        """
        Guests can be created as a named guest on the Space or there’s a global link that will let anonymous guests into the space.

        Parameters
        ----------
        request : typing.Sequence[Invite]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Success

        Examples
        --------
        from flatfile import Flatfile
        from flatfile.guests import Invite

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.guests.invite(
            request=[
                Invite(
                    guest_id="us_g_YOUR_ID",
                    space_id="us_sp_YOUR_ID",
                    from_name="Your Name",
                    message="Hello, I would like to invite you to my space.",
                )
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "invitations",
            method="POST",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=typing.Sequence[Invite], direction="write"
            ),
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Success,
                    parse_obj_as(
                        type_=Success,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncGuestsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        space_id: SpaceId,
        email: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListGuestsResponse:
        """
        Returns all guests

        Parameters
        ----------
        space_id : SpaceId
            ID of space to return

        email : typing.Optional[str]
            Email of guest to return

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListGuestsResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.guests.list(
                space_id="us_sp_YOUR_ID",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "guests",
            method="GET",
            params={
                "spaceId": space_id,
                "email": email,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListGuestsResponse,
                    parse_obj_as(
                        type_=ListGuestsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self, *, request: typing.Sequence[GuestConfig], request_options: typing.Optional[RequestOptions] = None
    ) -> CreateGuestResponse:
        """
        Guests are only there to upload, edit, and download files and perform their tasks in a specific Space.

        Parameters
        ----------
        request : typing.Sequence[GuestConfig]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateGuestResponse

        Examples
        --------
        import asyncio
        import datetime

        from flatfile import AsyncFlatfile
        from flatfile.guests import GuestConfig, GuestSpace, GuestWorkbook

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.guests.create(
                request=[
                    GuestConfig(
                        environment_id="us_env_YOUR_ID",
                        email="email@example.com",
                        name="Your Name",
                        spaces=[
                            GuestSpace(
                                id="us_sp_YOUR_ID",
                                workbooks=[
                                    GuestWorkbook(
                                        id="us_wb_YOUR_ID",
                                    )
                                ],
                                last_accessed=datetime.datetime.fromisoformat(
                                    "2023-10-30 16:59:45.735000+00:00",
                                ),
                            )
                        ],
                    )
                ],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "guests",
            method="POST",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=typing.Sequence[GuestConfig], direction="write"
            ),
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CreateGuestResponse,
                    parse_obj_as(
                        type_=CreateGuestResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(self, guest_id: GuestId, *, request_options: typing.Optional[RequestOptions] = None) -> GuestResponse:
        """
        Returns a single guest

        Parameters
        ----------
        guest_id : GuestId
            ID of guest to return

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GuestResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.guests.get(
                guest_id="us_g_YOUR_ID",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"guests/{jsonable_encoder(guest_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GuestResponse,
                    parse_obj_as(
                        type_=GuestResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(self, guest_id: GuestId, *, request_options: typing.Optional[RequestOptions] = None) -> Success:
        """
        Deletes a single guest

        Parameters
        ----------
        guest_id : GuestId
            ID of guest to return

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Success

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.guests.delete(
                guest_id="us_g_YOUR_ID",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"guests/{jsonable_encoder(guest_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Success,
                    parse_obj_as(
                        type_=Success,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        guest_id: GuestId,
        *,
        environment_id: typing.Optional[EnvironmentId] = OMIT,
        email: typing.Optional[str] = OMIT,
        name: typing.Optional[str] = OMIT,
        spaces: typing.Optional[typing.Sequence[GuestSpace]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GuestResponse:
        """
        Updates a single guest, for example to change name or email

        Parameters
        ----------
        guest_id : GuestId
            ID of guest to return

        environment_id : typing.Optional[EnvironmentId]

        email : typing.Optional[str]

        name : typing.Optional[str]

        spaces : typing.Optional[typing.Sequence[GuestSpace]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GuestResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.guests.update(
                guest_id="us_g_YOUR_ID",
                email="updated@example.com",
                name="Your Name Updated",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"guests/{jsonable_encoder(guest_id)}",
            method="PATCH",
            json={
                "environmentId": environment_id,
                "email": email,
                "name": name,
                "spaces": convert_and_respect_annotation_metadata(
                    object_=spaces, annotation=typing.Sequence[GuestSpace], direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GuestResponse,
                    parse_obj_as(
                        type_=GuestResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_guest_token(
        self,
        guest_id: GuestId,
        *,
        space_id: typing.Optional[SpaceId] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GuestTokenResponse:
        """
        Returns a single guest token

        Parameters
        ----------
        guest_id : GuestId
            ID of guest to return

        space_id : typing.Optional[SpaceId]
            ID of space to return

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GuestTokenResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.guests.get_guest_token(
                guest_id="us_g_YOUR_ID",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"guests/{jsonable_encoder(guest_id)}/token",
            method="GET",
            params={
                "spaceId": space_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GuestTokenResponse,
                    parse_obj_as(
                        type_=GuestTokenResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_guest_roles(
        self, guest_id: GuestId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ListActorRolesResponse:
        """
        Lists roles assigned to a guest.

        Parameters
        ----------
        guest_id : GuestId
            The guest id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListActorRolesResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.guests.list_guest_roles(
                guest_id="guestId",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"guests/{jsonable_encoder(guest_id)}/roles",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListActorRolesResponse,
                    parse_obj_as(
                        type_=ListActorRolesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def assign_guest_role(
        self,
        guest_id: GuestId,
        *,
        role_id: RoleId,
        resource_id: ResourceIdUnion,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AssignRoleResponse:
        """
        Assigns a role to a guest.

        Parameters
        ----------
        guest_id : GuestId
            The guest id

        role_id : RoleId

        resource_id : ResourceIdUnion

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AssignRoleResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.guests.assign_guest_role(
                guest_id="guestId",
                role_id="roleId",
                resource_id="resourceId",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"guests/{jsonable_encoder(guest_id)}/roles",
            method="POST",
            json={
                "roleId": role_id,
                "resourceId": convert_and_respect_annotation_metadata(
                    object_=resource_id, annotation=ResourceIdUnion, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    AssignRoleResponse,
                    parse_obj_as(
                        type_=AssignRoleResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_guest_role(
        self, guest_id: GuestId, actor_role_id: ActorRoleId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Success:
        """
        Removes a role from a guest.

        Parameters
        ----------
        guest_id : GuestId
            The guest id

        actor_role_id : ActorRoleId
            The actor role id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Success

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.guests.delete_guest_role(
                guest_id="guestId",
                actor_role_id="actorRoleId",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"guests/{jsonable_encoder(guest_id)}/roles/{jsonable_encoder(actor_role_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Success,
                    parse_obj_as(
                        type_=Success,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def invite(
        self, *, request: typing.Sequence[Invite], request_options: typing.Optional[RequestOptions] = None
    ) -> Success:
        """
        Guests can be created as a named guest on the Space or there’s a global link that will let anonymous guests into the space.

        Parameters
        ----------
        request : typing.Sequence[Invite]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Success

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile
        from flatfile.guests import Invite

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.guests.invite(
                request=[
                    Invite(
                        guest_id="us_g_YOUR_ID",
                        space_id="us_sp_YOUR_ID",
                        from_name="Your Name",
                        message="Hello, I would like to invite you to my space.",
                    )
                ],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "invitations",
            method="POST",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=typing.Sequence[Invite], direction="write"
            ),
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Success,
                    parse_obj_as(
                        type_=Success,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
