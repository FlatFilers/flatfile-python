# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing_extensions
from ...commons.types.guest_id import GuestId
from ...core.serialization import FieldMetadata
from ...commons.types.space_id import SpaceId
import typing
import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class Invite(UniversalBaseModel):
    """
    Examples
    --------
    from flatfile.guests import Invite

    Invite(
        guest_id="us_g_YOUR_ID",
        space_id="us_sp_YOUR_ID",
        from_name="Your Name",
        message="Hello, I would like to invite you to my space.",
    )
    """

    guest_id: typing_extensions.Annotated[GuestId, FieldMetadata(alias="guestId")]
    space_id: typing_extensions.Annotated[SpaceId, FieldMetadata(alias="spaceId")]
    from_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="fromName")] = pydantic.Field(
        default=None
    )
    """
    The name of the person or company sending the invitation
    """

    message: typing.Optional[str] = pydantic.Field(default=None)
    """
    Message to send with the invite
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
