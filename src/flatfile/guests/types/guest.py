# This file was auto-generated by Fern from our API Definition.

from .guest_config import GuestConfig
from ...commons.types.guest_id import GuestId
import typing_extensions
import datetime as dt
from ...core.serialization import FieldMetadata
import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import typing


class Guest(GuestConfig):
    """
    Examples
    --------
    import datetime

    from flatfile.guests import Guest, GuestSpace, GuestWorkbook

    Guest(
        id="us_g_YOUR_ID",
        environment_id="us_env_YOUR_ID",
        email="email@example.com",
        name="Your Name",
        spaces=[
            GuestSpace(
                id="us_sp_YOUR_ID",
                workbooks=[
                    GuestWorkbook(
                        id="us_wb_YOUR_ID",
                    )
                ],
                last_accessed=datetime.datetime.fromisoformat(
                    "2023-10-30 16:59:45.735000+00:00",
                ),
            )
        ],
        created_at=datetime.datetime.fromisoformat(
            "2023-10-30 16:59:45.735000+00:00",
        ),
        updated_at=datetime.datetime.fromisoformat(
            "2023-10-30 16:59:45.735000+00:00",
        ),
    )
    """

    id: GuestId
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")] = pydantic.Field()
    """
    Date the guest object was created
    """

    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")] = pydantic.Field()
    """
    Date the guest object was last updated
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
