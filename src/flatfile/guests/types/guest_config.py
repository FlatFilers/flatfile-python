# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing_extensions
from ...commons.types.environment_id import EnvironmentId
from ...core.serialization import FieldMetadata
import typing
from .guest_space import GuestSpace
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class GuestConfig(UniversalBaseModel):
    """
    Configurations for the guests

    Examples
    --------
    import datetime

    from flatfile.guests import GuestConfig, GuestSpace, GuestWorkbook

    GuestConfig(
        environment_id="us_env_YOUR_ID",
        email="email@example.com",
        name="Your Name",
        spaces=[
            GuestSpace(
                id="us_sp_YOUR_ID",
                workbooks=[
                    GuestWorkbook(
                        id="us_wb_YOUR_ID",
                    )
                ],
                last_accessed=datetime.datetime.fromisoformat(
                    "2023-10-30 16:59:45.735000+00:00",
                ),
            )
        ],
    )
    """

    environment_id: typing_extensions.Annotated[EnvironmentId, FieldMetadata(alias="environmentId")]
    email: str
    name: str
    spaces: typing.List[GuestSpace]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
