# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
from .secret_name import SecretName
import pydantic
from .secret_value import SecretValue
import typing_extensions
import typing
from ...commons.types.environment_id import EnvironmentId
from ...core.serialization import FieldMetadata
from ...commons.types.space_id import SpaceId
from ...commons.types.actor_id_union import ActorIdUnion
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class WriteSecret(UniversalBaseModel):
    """
    The properties required to write to a secret. Value is the only mutable property. Name, environmentId, spaceId (optional) are used for finding the secret.

    Examples
    --------
    from flatfile.secrets import WriteSecret

    WriteSecret(
        name="My Secret",
        value="Sup3r$ecret\\/alue!",
        environment_id="us_env_YOUR_ID",
        space_id="us_sp_YOUR_ID",
        actor_id="us_usr_YOUR_ID",
    )
    """

    name: SecretName = pydantic.Field()
    """
    The reference name for a secret.
    """

    value: SecretValue = pydantic.Field()
    """
    The secret value. This is hidden in the UI.
    """

    environment_id: typing_extensions.Annotated[
        typing.Optional[EnvironmentId], FieldMetadata(alias="environmentId")
    ] = pydantic.Field(default=None)
    """
    The Environment of the secret.
    """

    space_id: typing_extensions.Annotated[typing.Optional[SpaceId], FieldMetadata(alias="spaceId")] = pydantic.Field(
        default=None
    )
    """
    The Space of the secret.
    """

    actor_id: typing_extensions.Annotated[typing.Optional[ActorIdUnion], FieldMetadata(alias="actorId")] = (
        pydantic.Field(default=None)
    )
    """
    The Actor of the secret.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
