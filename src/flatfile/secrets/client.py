# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..commons.types.environment_id import EnvironmentId
from ..commons.types.space_id import SpaceId
from ..commons.types.actor_id_union import ActorIdUnion
from ..core.request_options import RequestOptions
from .types.secrets_response import SecretsResponse
from ..core.pydantic_utilities import parse_obj_as
from ..commons.errors.bad_request_error import BadRequestError
from ..commons.types.errors import Errors
from ..commons.errors.not_found_error import NotFoundError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from .types.secret_name import SecretName
from .types.secret_value import SecretValue
from ..core.serialization import convert_and_respect_annotation_metadata
from ..commons.types.secret_id import SecretId
from ..core.jsonable_encoder import jsonable_encoder
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class SecretsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        environment_id: typing.Optional[EnvironmentId] = None,
        space_id: typing.Optional[SpaceId] = None,
        actor_id: typing.Optional[ActorIdUnion] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SecretsResponse:
        """
        Fetch all secrets for a given environmentId and optionally apply space overrides

        Parameters
        ----------
        environment_id : typing.Optional[EnvironmentId]
            The Environment of the secret.

        space_id : typing.Optional[SpaceId]
            The Space of the secret.

        actor_id : typing.Optional[ActorIdUnion]
            The Actor of the secret.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SecretsResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.secrets.list(
            environment_id="us_env_YOUR_ID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "secrets",
            method="GET",
            params={
                "environmentId": environment_id,
                "spaceId": space_id,
                "actorId": actor_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SecretsResponse,
                    parse_obj_as(
                        type_=SecretsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def upsert(
        self,
        *,
        name: SecretName,
        value: SecretValue,
        environment_id: typing.Optional[EnvironmentId] = OMIT,
        space_id: typing.Optional[SpaceId] = OMIT,
        actor_id: typing.Optional[ActorIdUnion] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SecretsResponse:
        """
        Insert or Update a Secret by name for environment or space

        Parameters
        ----------
        name : SecretName
            The reference name for a secret.

        value : SecretValue
            The secret value. This is hidden in the UI.

        environment_id : typing.Optional[EnvironmentId]
            The Environment of the secret.

        space_id : typing.Optional[SpaceId]
            The Space of the secret.

        actor_id : typing.Optional[ActorIdUnion]
            The Actor of the secret.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SecretsResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.secrets.upsert(
            name="My Secret",
            value="Sup3r$ecret\\/alue!",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            actor_id="us_usr_YOUR_ID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "secrets",
            method="POST",
            json={
                "name": name,
                "value": value,
                "environmentId": environment_id,
                "spaceId": space_id,
                "actorId": convert_and_respect_annotation_metadata(
                    object_=actor_id, annotation=ActorIdUnion, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SecretsResponse,
                    parse_obj_as(
                        type_=SecretsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(
        self, secret_id: SecretId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SecretsResponse:
        """
        Deletes a specific Secret from the Environment or Space as is the case

        Parameters
        ----------
        secret_id : SecretId
            The ID of the secret.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SecretsResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.secrets.delete(
            secret_id="us_sec_YOUR_ID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"secrets/{jsonable_encoder(secret_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SecretsResponse,
                    parse_obj_as(
                        type_=SecretsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncSecretsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        environment_id: typing.Optional[EnvironmentId] = None,
        space_id: typing.Optional[SpaceId] = None,
        actor_id: typing.Optional[ActorIdUnion] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SecretsResponse:
        """
        Fetch all secrets for a given environmentId and optionally apply space overrides

        Parameters
        ----------
        environment_id : typing.Optional[EnvironmentId]
            The Environment of the secret.

        space_id : typing.Optional[SpaceId]
            The Space of the secret.

        actor_id : typing.Optional[ActorIdUnion]
            The Actor of the secret.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SecretsResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.secrets.list(
                environment_id="us_env_YOUR_ID",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "secrets",
            method="GET",
            params={
                "environmentId": environment_id,
                "spaceId": space_id,
                "actorId": actor_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SecretsResponse,
                    parse_obj_as(
                        type_=SecretsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def upsert(
        self,
        *,
        name: SecretName,
        value: SecretValue,
        environment_id: typing.Optional[EnvironmentId] = OMIT,
        space_id: typing.Optional[SpaceId] = OMIT,
        actor_id: typing.Optional[ActorIdUnion] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SecretsResponse:
        """
        Insert or Update a Secret by name for environment or space

        Parameters
        ----------
        name : SecretName
            The reference name for a secret.

        value : SecretValue
            The secret value. This is hidden in the UI.

        environment_id : typing.Optional[EnvironmentId]
            The Environment of the secret.

        space_id : typing.Optional[SpaceId]
            The Space of the secret.

        actor_id : typing.Optional[ActorIdUnion]
            The Actor of the secret.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SecretsResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.secrets.upsert(
                name="My Secret",
                value="Sup3r$ecret\\/alue!",
                environment_id="us_env_YOUR_ID",
                space_id="us_sp_YOUR_ID",
                actor_id="us_usr_YOUR_ID",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "secrets",
            method="POST",
            json={
                "name": name,
                "value": value,
                "environmentId": environment_id,
                "spaceId": space_id,
                "actorId": convert_and_respect_annotation_metadata(
                    object_=actor_id, annotation=ActorIdUnion, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SecretsResponse,
                    parse_obj_as(
                        type_=SecretsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(
        self, secret_id: SecretId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SecretsResponse:
        """
        Deletes a specific Secret from the Environment or Space as is the case

        Parameters
        ----------
        secret_id : SecretId
            The ID of the secret.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SecretsResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.secrets.delete(
                secret_id="us_sec_YOUR_ID",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"secrets/{jsonable_encoder(secret_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SecretsResponse,
                    parse_obj_as(
                        type_=SecretsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
