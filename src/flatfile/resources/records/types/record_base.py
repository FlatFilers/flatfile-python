# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ...commons.types.commit_id import CommitId
from ...commons.types.record_id import RecordId
from ...commons.types.version_id import VersionId
from .record_config import RecordConfig
from .validation_message import ValidationMessage

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class RecordBase(pydantic.BaseModel):
    """
    from flatfile import RecordBase

    RecordBase(
        id="us_rc_YOUR_ID",
        version_id="us_vr_YOUR_ID",
        commit_id="us_vr_YOUR_ID",
        valid=True,
        metadata={},
    )
    """

    id: RecordId
    version_id: typing.Optional[VersionId] = pydantic.Field(
        alias="versionId", default=None, description="Deprecated, use `commitId` instead."
    )
    commit_id: typing.Optional[CommitId] = pydantic.Field(alias="commitId", default=None)
    valid: typing.Optional[bool] = pydantic.Field(
        default=None,
        description="Auto-generated value based on whether the record contains a field with an error message. Cannot be set via the API.",
    )
    messages: typing.Optional[typing.List[ValidationMessage]] = pydantic.Field(
        default=None,
        description="This record level `messages` property is deprecated and no longer stored or used. Use the `messages` property on the individual cell values instead. This property will be removed in a future release.",
    )
    metadata: typing.Optional[typing.Dict[str, typing.Any]] = None
    config: typing.Optional[RecordConfig] = None

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
