# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ....core.datetime_utils import serialize_datetime
from ...commons.types.record_id import RecordId
from ...commons.types.version_id import VersionId
from .record_data import RecordData
from .validation_message import ValidationMessage


class Record(pydantic.BaseModel):
    """
    A single row of data in a Sheet
    """

    version_id: typing.Optional[VersionId] = pydantic.Field(alias="versionId")
    id: RecordId
    values: RecordData
    valid: typing.Optional[bool]
    messages: typing.Optional[typing.List[ValidationMessage]]
    metadata: typing.Optional[typing.Dict[str, typing.Any]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
