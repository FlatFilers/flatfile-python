# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .constraint import Constraint
from .field_appearance import FieldAppearance

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class BaseProperty(pydantic.BaseModel):
    key: str
    label: typing.Optional[str] = pydantic.Field(default=None, description="User friendly field name")
    description: typing.Optional[str] = pydantic.Field(
        default=None, description="A short description of the field. Markdown syntax is supported."
    )
    constraints: typing.Optional[typing.List[Constraint]] = None
    readonly: typing.Optional[bool] = None
    appearance: typing.Optional[FieldAppearance] = None
    metadata: typing.Optional[typing.Any] = pydantic.Field(
        default=None, description="Useful for any contextual metadata regarding the schema. Store any valid json here."
    )
    treatments: typing.Optional[typing.List[str]] = pydantic.Field(
        default=None, description="A unique presentation for a field in the UI."
    )
    alternative_names: typing.Optional[typing.List[str]] = pydantic.Field(alias="alternativeNames", default=None)

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
