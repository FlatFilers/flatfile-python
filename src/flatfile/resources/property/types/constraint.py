# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import typing_extensions

from .unique_constraint import UniqueConstraint

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Constraint_Required(pydantic.BaseModel):
    type: typing_extensions.Literal["required"]

    class Config:
        frozen = True
        smart_union = True


class Constraint_Unique(UniqueConstraint):
    type: typing_extensions.Literal["unique"]

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True


class Constraint_Computed(pydantic.BaseModel):
    type: typing_extensions.Literal["computed"]

    class Config:
        frozen = True
        smart_union = True


Constraint = typing.Union[Constraint_Required, Constraint_Unique, Constraint_Computed]
