# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

from .external_constraint import ExternalConstraint
from .unique_constraint import UniqueConstraint

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Constraint_Required(pydantic.BaseModel):
    type: typing.Literal["required"]

    class Config:
        frozen = True
        smart_union = True


class Constraint_Unique(UniqueConstraint):
    type: typing.Literal["unique"]

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True


class Constraint_Computed(pydantic.BaseModel):
    type: typing.Literal["computed"]

    class Config:
        frozen = True
        smart_union = True


class Constraint_External(ExternalConstraint):
    type: typing.Literal["external"]

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True


Constraint = typing.Union[Constraint_Required, Constraint_Unique, Constraint_Computed, Constraint_External]
