# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class StoredConstraint(pydantic.BaseModel):
    validator: str = pydantic.Field(description="Must match the constraint validator name.")
    version: typing.Optional[int] = pydantic.Field(
        default=None, description="The version of the stored constraint to use. (Defaults to version 1.)"
    )
    description: typing.Optional[str] = pydantic.Field(
        default=None, description="A full description of what this constraint configuration does"
    )
    label: typing.Optional[str] = pydantic.Field(
        default=None,
        description="A short description of what this constraint constraint should do, example - values between 1 and 100",
    )
    config: typing.Optional[typing.Any] = None

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
