# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ...commons.types.sheet_id import SheetId
from ...commons.types.snapshot_id import SnapshotId
from ...commons.types.user_id import UserId
from .snapshot_summary import SnapshotSummary

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Snapshot(pydantic.BaseModel):
    id: SnapshotId
    sheet_id: SheetId = pydantic.Field(alias="sheetId")
    label: typing.Optional[str]
    summary: typing.Optional[SnapshotSummary]
    created_at: dt.datetime = pydantic.Field(alias="createdAt")
    created_by: UserId = pydantic.Field(alias="createdBy")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
