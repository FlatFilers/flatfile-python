# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_dict import remove_none_from_dict
from ..commons.errors.bad_request_error import BadRequestError
from ..commons.errors.not_found_error import NotFoundError
from ..commons.types.errors import Errors
from ..commons.types.sheet_id import SheetId
from ..commons.types.snapshot_id import SnapshotId
from ..commons.types.success import Success
from ..records.types.diff_records_response import DiffRecordsResponse
from .types.change_type import ChangeType
from .types.restore_options import RestoreOptions
from .types.snapshot_response import SnapshotResponse
from .types.snapshots_response import SnapshotsResponse

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class SnapshotsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create_snapshot(self, *, sheet_id: SheetId, label: typing.Optional[str] = OMIT) -> SnapshotResponse:
        """
        Creates a snapshot of a sheet

        Parameters:
            - sheet_id: SheetId. ID of sheet

            - label: typing.Optional[str]. Label for the snapshot
        ---
        from flatfile.client import Flatfile

        client = Flatfile(
            x_disable_hooks="YOUR_X_DISABLE_HOOKS",
            token="YOUR_TOKEN",
        )
        client.snapshots.create_snapshot(
            sheet_id="us_sh_YOUR_ID",
            label="My snapshot",
        )
        """
        _request: typing.Dict[str, typing.Any] = {"sheetId": sheet_id}
        if label is not OMIT:
            _request["label"] = label
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "snapshots"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(SnapshotResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(Errors, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(Errors, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_snapshots(self, *, sheet_id: SheetId) -> SnapshotsResponse:
        """
        List all snapshots of a sheet

        Parameters:
            - sheet_id: SheetId. ID of sheet
        ---
        from flatfile.client import Flatfile

        client = Flatfile(
            x_disable_hooks="YOUR_X_DISABLE_HOOKS",
            token="YOUR_TOKEN",
        )
        client.snapshots.list_snapshots(
            sheet_id="us_sh_YOUR_ID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "snapshots"),
            params=remove_none_from_dict({"sheetId": sheet_id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(SnapshotsResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(Errors, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(Errors, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_snapshot(self, snapshot_id: SnapshotId, *, include_summary: bool) -> SnapshotResponse:
        """
        Gets a snapshot of a sheet

        Parameters:
            - snapshot_id: SnapshotId. ID of snapshot

            - include_summary: bool. Whether to include a summary in the snapshot response
        ---
        from flatfile.client import Flatfile

        client = Flatfile(
            x_disable_hooks="YOUR_X_DISABLE_HOOKS",
            token="YOUR_TOKEN",
        )
        client.snapshots.get_snapshot(
            snapshot_id="us_ss_YOUR_ID",
            include_summary=True,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"snapshots/{snapshot_id}"),
            params=remove_none_from_dict({"includeSummary": include_summary}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(SnapshotResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(Errors, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(Errors, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_snapshot(self, snapshot_id: SnapshotId) -> Success:
        """
        Deletes a snapshot of a sheet

        Parameters:
            - snapshot_id: SnapshotId. ID of snapshot
        ---
        from flatfile.client import Flatfile

        client = Flatfile(
            x_disable_hooks="YOUR_X_DISABLE_HOOKS",
            token="YOUR_TOKEN",
        )
        client.snapshots.delete_snapshot(
            snapshot_id="us_ss_YOUR_ID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"snapshots/{snapshot_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Success, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(Errors, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(Errors, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def restore_snapshot(
        self, snapshot_id: SnapshotId, *, request: typing.Optional[RestoreOptions] = None
    ) -> SnapshotResponse:
        """
        Restores a snapshot of a sheet

        Parameters:
            - snapshot_id: SnapshotId. ID of snapshot

            - request: typing.Optional[RestoreOptions].
        ---
        from flatfile import RestoreOptions
        from flatfile.client import Flatfile

        client = Flatfile(
            x_disable_hooks="YOUR_X_DISABLE_HOOKS",
            token="YOUR_TOKEN",
        )
        client.snapshots.restore_snapshot(
            snapshot_id="us_ss_YOUR_ID",
            request=RestoreOptions(
                created=True,
                updated=True,
                deleted=True,
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"snapshots/{snapshot_id}/restore"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(SnapshotResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(Errors, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(Errors, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_snapshot_records(
        self,
        snapshot_id: SnapshotId,
        *,
        page_size: typing.Optional[int] = None,
        page_number: typing.Optional[int] = None,
        change_type: typing.Optional[ChangeType] = None,
    ) -> DiffRecordsResponse:
        """
        Gets records from a snapshot of a sheet

        Parameters:
            - snapshot_id: SnapshotId. ID of snapshot

            - page_size: typing.Optional[int]. Number of records to return in a page

            - page_number: typing.Optional[int]. Based on pageSize, which page of records to return

            - change_type: typing.Optional[ChangeType]. Filter records by change type
        ---
        from flatfile import ChangeType
        from flatfile.client import Flatfile

        client = Flatfile(
            x_disable_hooks="YOUR_X_DISABLE_HOOKS",
            token="YOUR_TOKEN",
        )
        client.snapshots.get_snapshot_records(
            snapshot_id="us_ss_YOUR_ID",
            page_size=10,
            page_number=1,
            change_type=ChangeType.CREATED_SINCE,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"snapshots/{snapshot_id}/records"),
            params=remove_none_from_dict({"pageSize": page_size, "pageNumber": page_number, "changeType": change_type}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DiffRecordsResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(Errors, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(Errors, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncSnapshotsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create_snapshot(self, *, sheet_id: SheetId, label: typing.Optional[str] = OMIT) -> SnapshotResponse:
        """
        Creates a snapshot of a sheet

        Parameters:
            - sheet_id: SheetId. ID of sheet

            - label: typing.Optional[str]. Label for the snapshot
        ---
        from flatfile.client import AsyncFlatfile

        client = AsyncFlatfile(
            x_disable_hooks="YOUR_X_DISABLE_HOOKS",
            token="YOUR_TOKEN",
        )
        await client.snapshots.create_snapshot(
            sheet_id="us_sh_YOUR_ID",
            label="My snapshot",
        )
        """
        _request: typing.Dict[str, typing.Any] = {"sheetId": sheet_id}
        if label is not OMIT:
            _request["label"] = label
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "snapshots"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(SnapshotResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(Errors, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(Errors, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_snapshots(self, *, sheet_id: SheetId) -> SnapshotsResponse:
        """
        List all snapshots of a sheet

        Parameters:
            - sheet_id: SheetId. ID of sheet
        ---
        from flatfile.client import AsyncFlatfile

        client = AsyncFlatfile(
            x_disable_hooks="YOUR_X_DISABLE_HOOKS",
            token="YOUR_TOKEN",
        )
        await client.snapshots.list_snapshots(
            sheet_id="us_sh_YOUR_ID",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "snapshots"),
            params=remove_none_from_dict({"sheetId": sheet_id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(SnapshotsResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(Errors, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(Errors, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_snapshot(self, snapshot_id: SnapshotId, *, include_summary: bool) -> SnapshotResponse:
        """
        Gets a snapshot of a sheet

        Parameters:
            - snapshot_id: SnapshotId. ID of snapshot

            - include_summary: bool. Whether to include a summary in the snapshot response
        ---
        from flatfile.client import AsyncFlatfile

        client = AsyncFlatfile(
            x_disable_hooks="YOUR_X_DISABLE_HOOKS",
            token="YOUR_TOKEN",
        )
        await client.snapshots.get_snapshot(
            snapshot_id="us_ss_YOUR_ID",
            include_summary=True,
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"snapshots/{snapshot_id}"),
            params=remove_none_from_dict({"includeSummary": include_summary}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(SnapshotResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(Errors, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(Errors, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_snapshot(self, snapshot_id: SnapshotId) -> Success:
        """
        Deletes a snapshot of a sheet

        Parameters:
            - snapshot_id: SnapshotId. ID of snapshot
        ---
        from flatfile.client import AsyncFlatfile

        client = AsyncFlatfile(
            x_disable_hooks="YOUR_X_DISABLE_HOOKS",
            token="YOUR_TOKEN",
        )
        await client.snapshots.delete_snapshot(
            snapshot_id="us_ss_YOUR_ID",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"snapshots/{snapshot_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Success, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(Errors, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(Errors, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def restore_snapshot(
        self, snapshot_id: SnapshotId, *, request: typing.Optional[RestoreOptions] = None
    ) -> SnapshotResponse:
        """
        Restores a snapshot of a sheet

        Parameters:
            - snapshot_id: SnapshotId. ID of snapshot

            - request: typing.Optional[RestoreOptions].
        ---
        from flatfile import RestoreOptions
        from flatfile.client import AsyncFlatfile

        client = AsyncFlatfile(
            x_disable_hooks="YOUR_X_DISABLE_HOOKS",
            token="YOUR_TOKEN",
        )
        await client.snapshots.restore_snapshot(
            snapshot_id="us_ss_YOUR_ID",
            request=RestoreOptions(
                created=True,
                updated=True,
                deleted=True,
            ),
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"snapshots/{snapshot_id}/restore"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(SnapshotResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(Errors, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(Errors, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_snapshot_records(
        self,
        snapshot_id: SnapshotId,
        *,
        page_size: typing.Optional[int] = None,
        page_number: typing.Optional[int] = None,
        change_type: typing.Optional[ChangeType] = None,
    ) -> DiffRecordsResponse:
        """
        Gets records from a snapshot of a sheet

        Parameters:
            - snapshot_id: SnapshotId. ID of snapshot

            - page_size: typing.Optional[int]. Number of records to return in a page

            - page_number: typing.Optional[int]. Based on pageSize, which page of records to return

            - change_type: typing.Optional[ChangeType]. Filter records by change type
        ---
        from flatfile import ChangeType
        from flatfile.client import AsyncFlatfile

        client = AsyncFlatfile(
            x_disable_hooks="YOUR_X_DISABLE_HOOKS",
            token="YOUR_TOKEN",
        )
        await client.snapshots.get_snapshot_records(
            snapshot_id="us_ss_YOUR_ID",
            page_size=10,
            page_number=1,
            change_type=ChangeType.CREATED_SINCE,
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"snapshots/{snapshot_id}/records"),
            params=remove_none_from_dict({"pageSize": page_size, "pageNumber": page_number, "changeType": change_type}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DiffRecordsResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(Errors, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(Errors, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
