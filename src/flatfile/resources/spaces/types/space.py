# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ...commons.types.space_id import SpaceId
from ...commons.types.user_id import UserId
from ...environments.types.guest_authentication_enum import GuestAuthenticationEnum
from .internal_space_config_base import InternalSpaceConfigBase
from .space_size import SpaceSize

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Space(InternalSpaceConfigBase):
    """
    A place to store your workbooks
    """

    id: SpaceId
    workbooks_count: typing.Optional[int] = pydantic.Field(
        alias="workbooksCount", description="Amount of workbooks in the space"
    )
    files_count: typing.Optional[int] = pydantic.Field(alias="filesCount", description="Amount of files in the space")
    created_by_user_id: typing.Optional[UserId] = pydantic.Field(alias="createdByUserId")
    created_by_user_name: typing.Optional[str] = pydantic.Field(
        alias="createdByUserName", description="User name who created space"
    )
    created_at: dt.datetime = pydantic.Field(alias="createdAt", description="Date when space was created")
    updated_at: dt.datetime = pydantic.Field(alias="updatedAt", description="Date when space was updated")
    guest_link: typing.Optional[str] = pydantic.Field(alias="guestLink", description="Guest link to the space")
    name: str = pydantic.Field(description="The name of the space")
    display_order: typing.Optional[int] = pydantic.Field(alias="displayOrder", description="The display order")
    access_token: typing.Optional[str] = pydantic.Field(alias="accessToken")
    is_collaborative: typing.Optional[bool] = pydantic.Field(alias="isCollaborative")
    size: typing.Optional[SpaceSize]
    upgraded_at: typing.Optional[dt.datetime] = pydantic.Field(alias="upgradedAt")
    guest_authentication: typing.List[GuestAuthenticationEnum] = pydantic.Field(alias="guestAuthentication")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
