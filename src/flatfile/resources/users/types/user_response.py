# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .user import User

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class UserResponse(pydantic.BaseModel):
    """
    import datetime

    from flatfile import User, UserResponse

    UserResponse(
        data=User(
            id="us_usr_YOUR_ID",
            email="john.smith@example.com",
            name="john.smith",
            account_id="us_acc_YOUR_ID",
            idp="FRONTEGG",
            idp_ref="ab1cf38e-e617-4547-b37d-376a7ac9e554",
            metadata={},
            created_at=datetime.datetime.fromisoformat(
                "2023-10-30 16:59:45.735000+00:00",
            ),
            updated_at=datetime.datetime.fromisoformat(
                "2023-10-30 16:59:45.735000+00:00",
            ),
            last_seen_at=datetime.datetime.fromisoformat(
                "2023-10-30 16:59:45.735000+00:00",
            ),
            dashboard=2,
        ),
    )
    """

    data: User

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
