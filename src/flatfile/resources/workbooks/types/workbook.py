# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ...commons.types.action import Action
from ...commons.types.environment_id import EnvironmentId
from ...commons.types.space_id import SpaceId
from ...commons.types.workbook_id import WorkbookId
from ...sheets.types.sheet import Sheet
from .workbook_config_settings import WorkbookConfigSettings

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Workbook(pydantic.BaseModel):
    """
    A collection of one or more sheets
    ---
    import datetime

    from flatfile import (
        Action,
        ActionMode,
        Property_String,
        RecordCounts,
        Sheet,
        SheetConfig,
        Workbook,
        WorkbookConfigSettings,
    )

    Workbook(
        id="us_wb_YOUR_ID",
        name="My First Workbook",
        space_id="us_sp_YOUR_ID",
        environment_id="us_env_YOUR_ID",
        sheets=[
            Sheet(
                id="us_sh_YOUR_ID",
                workbook_id="us_wb_YOUR_ID",
                name="Contacts",
                config=SheetConfig(
                    name="Contacts",
                    slug="contacts",
                    fields=[
                        Property_String(
                            type="string",
                            key="firstName",
                            label="First Name",
                        ),
                        Property_String(
                            type="string",
                            key="lastName",
                            label="Last Name",
                        ),
                        Property_String(
                            type="string",
                            key="email",
                            label="Email",
                        ),
                    ],
                    mapping_confidence_threshold=0.5,
                ),
                count_records=RecordCounts(
                    valid=1000,
                    error=0,
                    total=1000,
                ),
                locked_by="Example0",
                updated_at=datetime.datetime.fromisoformat(
                    "2021-08-31 18:00:00+00:00",
                ),
                created_at=datetime.datetime.fromisoformat(
                    "2021-08-31 18:00:00+00:00",
                ),
            )
        ],
        labels=["simple-demo"],
        actions=[
            Action(
                operation="submitAction",
                mode=ActionMode.FOREGROUND,
                label="Submit",
                description="Submit data to webhook.site",
                primary=True,
            )
        ],
        settings=WorkbookConfigSettings(
            track_changes=True,
        ),
        updated_at=datetime.datetime.fromisoformat(
            "2021-01-01 00:00:00+00:00",
        ),
        created_at=datetime.datetime.fromisoformat(
            "2021-01-01 00:00:00+00:00",
        ),
    )
    """

    id: WorkbookId = pydantic.Field(description="ID of the Workbook.")
    name: typing.Optional[str] = pydantic.Field(description="Name of the Workbook.")
    space_id: SpaceId = pydantic.Field(alias="spaceId", description="Associated Space ID of the Workbook.")
    environment_id: EnvironmentId = pydantic.Field(
        alias="environmentId", description="Associated Environment ID of the Workbook."
    )
    sheets: typing.Optional[typing.List[Sheet]] = pydantic.Field(
        description="A list of Sheets associated with the Workbook."
    )
    labels: typing.Optional[typing.List[str]] = pydantic.Field(description="A list of labels for the Workbook.")
    actions: typing.Optional[typing.List[Action]] = pydantic.Field(
        description="A list of Actions associated with the Workbook."
    )
    settings: typing.Optional[WorkbookConfigSettings] = pydantic.Field(description="The Workbook settings.")
    metadata: typing.Optional[typing.Any] = pydantic.Field(description="Metadata for the workbook")
    namespace: typing.Optional[str]
    updated_at: dt.datetime = pydantic.Field(alias="updatedAt", description="Date the workbook was last updated")
    created_at: dt.datetime = pydantic.Field(alias="createdAt", description="Date the workbook was created")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
