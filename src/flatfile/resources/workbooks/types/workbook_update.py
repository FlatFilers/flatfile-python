# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ...commons.types.action import Action
from ...commons.types.environment_id import EnvironmentId
from ...commons.types.space_id import SpaceId
from ...sheets.types.sheet_config_or_update import SheetConfigOrUpdate

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class WorkbookUpdate(pydantic.BaseModel):
    """
    The updates to be made to an existing workbook
    """

    name: typing.Optional[str]
    labels: typing.Optional[typing.List[str]]
    space_id: typing.Optional[SpaceId] = pydantic.Field(alias="spaceId")
    environment_id: typing.Optional[EnvironmentId] = pydantic.Field(alias="environmentId")
    namespace: typing.Optional[str]
    sheets: typing.Optional[typing.List[SheetConfigOrUpdate]]
    actions: typing.Optional[typing.List[Action]]
    metadata: typing.Optional[typing.Any] = pydantic.Field(description="Metadata for the workbook")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
