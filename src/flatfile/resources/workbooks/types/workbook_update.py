# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ...commons.types.action import Action
from ...commons.types.environment_id import EnvironmentId
from ...commons.types.space_id import SpaceId
from ...sheets.types.sheet_config_or_update import SheetConfigOrUpdate

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class WorkbookUpdate(pydantic.BaseModel):
    """
    The updates to be made to an existing workbook
    ---
    from flatfile import Action, ActionMode, WorkbookUpdate

    WorkbookUpdate(
        name="My Updated Workbook",
        labels=["my-new-label"],
        actions=[
            Action(
                operation="submitAction",
                mode=ActionMode.FOREGROUND,
                label="Submit Changes",
                description="Submit data to webhook.site",
                primary=True,
            )
        ],
    )
    """

    name: typing.Optional[str] = pydantic.Field(description="The name of the Workbook.")
    labels: typing.Optional[typing.List[str]] = pydantic.Field(
        description="An optional list of labels for the Workbook."
    )
    space_id: typing.Optional[SpaceId] = pydantic.Field(
        alias="spaceId", description="The Space Id associated with the Workbook."
    )
    environment_id: typing.Optional[EnvironmentId] = pydantic.Field(
        alias="environmentId", description="The Environment Id associated with the Workbook."
    )
    namespace: typing.Optional[str] = pydantic.Field(description="The namespace of the Workbook.")
    sheets: typing.Optional[typing.List[SheetConfigOrUpdate]] = pydantic.Field(
        description="Describes shape of data as well as behavior"
    )
    actions: typing.Optional[typing.List[Action]]
    metadata: typing.Optional[typing.Any] = pydantic.Field(description="Metadata for the workbook")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
