# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ...commons.types.account_id import AccountId
from ...commons.types.prompt_id import PromptId

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Prompt(pydantic.BaseModel):
    """
    import datetime

    from flatfile import Prompt

    Prompt(
        id="us_pr_YOUR_ID",
        created_by_id="us_usr_YOUR_ID",
        account_id="us_acc_YOUR_ID",
        prompt="Combine first name and last name into a new column called Full Name",
        created_at=datetime.datetime.fromisoformat(
            "2021-01-01 00:00:00+00:00",
        ),
        updated_at=datetime.datetime.fromisoformat(
            "2021-01-01 00:00:00+00:00",
        ),
    )
    """

    id: PromptId
    created_by_id: str = pydantic.Field(alias="createdById", description="ID of the user/guest who created the prompt")
    account_id: AccountId = pydantic.Field(alias="accountId")
    prompt: str = pydantic.Field(description="Text for prompts for AI Assist")
    created_at: dt.datetime = pydantic.Field(alias="createdAt")
    updated_at: dt.datetime = pydantic.Field(alias="updatedAt")
    deleted_at: typing.Optional[dt.datetime] = pydantic.Field(alias="deletedAt", default=None)

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
