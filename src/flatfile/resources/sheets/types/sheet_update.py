# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ...commons.types.sheet_id import SheetId
from ...commons.types.workbook_id import WorkbookId
from ...records.types.record_counts import RecordCounts
from .sheet_config import SheetConfig

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class SheetUpdate(pydantic.BaseModel):
    """
    Changes to make to an existing sheet
    """

    id: typing.Optional[SheetId]
    workbook_id: typing.Optional[WorkbookId] = pydantic.Field(alias="workbookId")
    config: typing.Optional[SheetConfig]
    count_records: typing.Optional[RecordCounts] = pydantic.Field(alias="countRecords")
    namespace: typing.Optional[str]
    updated_at: typing.Optional[dt.datetime] = pydantic.Field(
        alias="updatedAt", description="Date the sheet was last updated"
    )
    created_at: typing.Optional[dt.datetime] = pydantic.Field(
        alias="createdAt", description="Date the sheet was created"
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
