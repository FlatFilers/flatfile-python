# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ....core.datetime_utils import serialize_datetime
from ...commons.types.sheet_id import SheetId
from ...commons.types.workbook_id import WorkbookId
from ...records.types.record_counts import RecordCounts
from .sheet_config import SheetConfig


class Sheet(pydantic.BaseModel):
    """
    A place to store tabular data
    """

    id: SheetId
    workbook_id: WorkbookId = pydantic.Field(alias="workbookId")
    name: str
    config: SheetConfig
    count_records: typing.Optional[RecordCounts] = pydantic.Field(alias="countRecords")
    namespace: typing.Optional[str]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
