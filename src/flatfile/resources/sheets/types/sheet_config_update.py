# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ...commons.types.action import Action
from ...property.types.property import Property
from .sheet_access import SheetAccess

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class SheetConfigUpdate(pydantic.BaseModel):
    """
    Changes to make to an existing sheet config
    """

    name: typing.Optional[str] = pydantic.Field(
        description="The name of your Sheet as it will appear to your end users."
    )
    description: typing.Optional[str] = pydantic.Field(
        description="A sentence or two describing the purpose of your Sheet."
    )
    slug: typing.Optional[str] = pydantic.Field(description="A unique identifier for your Sheet.")
    readonly: typing.Optional[bool] = pydantic.Field(
        description="A boolean specifying whether or not this sheet is read only. Read only sheets are not editable by end users."
    )
    allow_additional_fields: typing.Optional[bool] = pydantic.Field(
        alias="allowAdditionalFields", description="Allow end users to add fields during mapping."
    )
    mapping_confidence_threshold: typing.Optional[float] = pydantic.Field(
        alias="mappingConfidenceThreshold", description="The minimum confidence required to automatically map a field"
    )
    access: typing.Optional[typing.List[SheetAccess]] = pydantic.Field(
        description="Control Sheet-level access for all users."
    )
    fields: typing.Optional[typing.List[Property]] = pydantic.Field(
        description="Where you define your Sheetâ€™s data schema."
    )
    actions: typing.Optional[typing.List[Action]] = pydantic.Field(
        description="An array of actions that end users can perform on this Sheet."
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
