# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ...commons.types.action import Action
from ...commons.types.file_id import FileId
from ...commons.types.sheet_id import SheetId
from ...commons.types.space_id import SpaceId
from ...commons.types.workbook_id import WorkbookId
from .mode import Mode
from .model_file_status_enum import ModelFileStatusEnum

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class File(pydantic.BaseModel):
    """
    Any uploaded file of any type
    """

    id: FileId
    name: str = pydantic.Field(description="Original filename")
    ext: str = pydantic.Field(description="Extension of the file")
    mimetype: str = pydantic.Field(description="MIME Type of the file")
    encoding: str = pydantic.Field(description="Text encoding of the file")
    status: ModelFileStatusEnum = pydantic.Field(description="Status of the file")
    mode: typing.Optional[Mode] = pydantic.Field(description="The storage mode of file")
    size: int = pydantic.Field(description="Size of file in bytes")
    bytes_received: int = pydantic.Field(
        alias="bytesReceived",
        description="Number of bytes that have been uploaded so far (useful for progress tracking)",
    )
    created_at: dt.datetime = pydantic.Field(alias="createdAt", description="Date the file was created")
    updated_at: dt.datetime = pydantic.Field(alias="updatedAt", description="Date the file was last updated")
    space_id: SpaceId = pydantic.Field(alias="spaceId")
    workbook_id: typing.Optional[WorkbookId] = pydantic.Field(alias="workbookId")
    sheet_id: typing.Optional[SheetId] = pydantic.Field(alias="sheetId")
    actions: typing.Optional[typing.List[Action]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
