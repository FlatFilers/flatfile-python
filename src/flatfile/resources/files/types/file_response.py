# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .file import File

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class FileResponse(pydantic.BaseModel):
    """
    import datetime

    from flatfile import File, FileResponse, Mode, ModelFileStatusEnum

    FileResponse(
        data=File(
            id="us_fl_YOUR_ID",
            name="Test File",
            ext="png",
            mimetype="image/png",
            encoding="7bit",
            status=ModelFileStatusEnum.PARTIAL,
            mode=Mode.IMPORT,
            size=81953,
            bytes_received=81593,
            created_at=datetime.datetime.fromisoformat(
                "2023-11-15 19:31:33.015000+00:00",
            ),
            updated_at=datetime.datetime.fromisoformat(
                "2023-11-15 19:31:33.015000+00:00",
            ),
            space_id="us_sp_YOUR_ID",
        ),
    )
    """

    data: File

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
