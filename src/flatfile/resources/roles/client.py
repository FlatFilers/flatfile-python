# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ..commons.errors.bad_request_error import BadRequestError
from ..commons.errors.not_found_error import NotFoundError
from ..commons.types.errors import Errors
from .types.actor_id_union import ActorIdUnion
from .types.assign_role_response import AssignRoleResponse
from .types.resource_id_union import ResourceIdUnion

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RolesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def assign(self, role_id: str, *, actor_id: ActorIdUnion, resource_id: ResourceIdUnion) -> AssignRoleResponse:
        """
        Assign an existing role to the specified actor in the specified resource context

        Parameters:
            - role_id: str. ID of the role to be assigned

            - actor_id: ActorIdUnion. The user, agent, or guest to assign the role to

            - resource_id: ResourceIdUnion. The account, environment, or space context for the role assignment
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"roles/{role_id}"),
            json=jsonable_encoder({"actorId": actor_id, "resourceId": resource_id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AssignRoleResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(Errors, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(Errors, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncRolesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def assign(self, role_id: str, *, actor_id: ActorIdUnion, resource_id: ResourceIdUnion) -> AssignRoleResponse:
        """
        Assign an existing role to the specified actor in the specified resource context

        Parameters:
            - role_id: str. ID of the role to be assigned

            - actor_id: ActorIdUnion. The user, agent, or guest to assign the role to

            - resource_id: ResourceIdUnion. The account, environment, or space context for the role assignment
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"roles/{role_id}"),
            json=jsonable_encoder({"actorId": actor_id, "resourceId": resource_id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AssignRoleResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(Errors, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(Errors, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
