# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ...commons.types.document_id import DocumentId
from ...commons.types.environment_id import EnvironmentId
from ...commons.types.space_id import SpaceId
from .document_config import DocumentConfig

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Document(DocumentConfig):
    """
    A document (markdown components) belong to a space
    ---
    import datetime

    from flatfile import Action, ActionMode, Document

    Document(
        id="us_dc_YOUR_ID",
        space_id="us_sp_YOUR_ID",
        environment_id="us_env_YOUR_ID",
        title="My Document 1",
        body="My information",
        treatments=[],
        actions=[
            Action(
                operation="submitAction",
                mode=ActionMode.FOREGROUND,
                label="Submit",
                description="Submit data to webhook.site",
                primary=True,
            )
        ],
        created_at=datetime.datetime.fromisoformat(
            "2022-09-18 00:19:57.007000+00:00",
        ),
        updated_at=datetime.datetime.fromisoformat(
            "2022-09-18 00:19:57.007000+00:00",
        ),
    )
    """

    id: DocumentId
    space_id: typing.Optional[SpaceId] = pydantic.Field(alias="spaceId")
    environment_id: typing.Optional[EnvironmentId] = pydantic.Field(alias="environmentId")
    created_at: dt.datetime = pydantic.Field(alias="createdAt", description="Date the document was created")
    updated_at: dt.datetime = pydantic.Field(alias="updatedAt", description="Date the document was last updated")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
