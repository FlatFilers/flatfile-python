# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ...commons.types.data_retention_policy_id import DataRetentionPolicyId
from ...commons.types.environment_id import EnvironmentId
from .data_retention_policy_config import DataRetentionPolicyConfig

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class DataRetentionPolicy(DataRetentionPolicyConfig):
    """
    A data retention policy belonging to an environment
    ---
    import datetime

    from flatfile import DataRetentionPolicy, DataRetentionPolicyEnum

    DataRetentionPolicy(
        id="us_drp_YOUR_ID",
        environment_id="us_env_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2023-11-15 19:31:33.015000+00:00",
        ),
        updated_at=datetime.datetime.fromisoformat(
            "2023-11-15 19:31:33.015000+00:00",
        ),
        type=DataRetentionPolicyEnum.LAST_ACTIVITY,
        period=5,
    )
    """

    id: DataRetentionPolicyId
    environment_id: EnvironmentId = pydantic.Field(alias="environmentId")
    created_at: dt.datetime = pydantic.Field(alias="createdAt", description="Date the policy was created")
    updated_at: dt.datetime = pydantic.Field(alias="updatedAt", description="Date the policy was last updated")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
