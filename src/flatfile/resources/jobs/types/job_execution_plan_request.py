# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ...commons.types.file_id import FileId
from ...commons.types.job_id import JobId
from .job_execution_plan import JobExecutionPlan

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class JobExecutionPlanRequest(JobExecutionPlan):
    """
    from flatfile import (
        DestinationField,
        Edge,
        JobExecutionPlanRequest,
        Property_String,
        SourceField,
    )

    JobExecutionPlanRequest(
        field_mapping=[
            Edge(
                source_field=Property_String(
                    type="string",
                    key="firstName",
                ),
                destination_field=Property_String(
                    type="string",
                    key="firstName",
                    label="First Name",
                ),
            ),
            Edge(
                source_field=Property_String(
                    type="string",
                    key="lastName",
                ),
                destination_field=Property_String(
                    type="string",
                    key="lastName",
                    label="Last Name",
                ),
            ),
        ],
        unmapped_source_fields=[
            SourceField(
                source_field=Property_String(
                    type="string",
                    key="email",
                ),
            )
        ],
        unmapped_destination_fields=[
            DestinationField(
                destination_field=Property_String(
                    type="string",
                    key="email",
                    label="Email",
                ),
            )
        ],
        file_id="us_fl_YOUR_ID",
        job_id="us_jb_YOUR_ID",
    )
    """

    file_id: FileId = pydantic.Field(alias="fileId")
    job_id: JobId = pydantic.Field(alias="jobId")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
