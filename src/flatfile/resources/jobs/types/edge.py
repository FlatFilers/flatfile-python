# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ...property.types.property import Property
from .enum_details import EnumDetails
from .metadata import Metadata

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Edge(pydantic.BaseModel):
    source_field: Property = pydantic.Field(alias="sourceField")
    destination_field: Property = pydantic.Field(alias="destinationField")
    preview: typing.Optional[typing.List[str]]
    enum_details: typing.Optional[EnumDetails] = pydantic.Field(
        alias="enumDetails",
        description="Only available if one or more of the destination fields is of type enum. Provides category mapping.",
    )
    metadata: typing.Optional[Metadata]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
