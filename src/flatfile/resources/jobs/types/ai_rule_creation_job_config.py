# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ...commons.types.sheet_id import SheetId

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class AiRuleCreationJobConfig(pydantic.BaseModel):
    """
    Configuration for AI-powered rule creation jobs that generate or replace field constraints
    """

    label: typing.Optional[str] = pydantic.Field(default=None, description="Display name for the rule to be created")
    prompt: str = pydantic.Field(description="The natural language description of the rule to be created")
    sheet_id: SheetId = pydantic.Field(
        alias="sheetId", description="The ID of the sheet containing the field to create/update the rule for"
    )
    field_key: str = pydantic.Field(alias="fieldKey", description="The key of the field to create/update the rule for")
    index: typing.Optional[int] = pydantic.Field(
        default=None,
        description="To edit an existing rule, provide the index of the constraint in the constraints array for the field and that constraint will be replaced.",
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
