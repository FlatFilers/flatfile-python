# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ...commons.types.data_clip_id import DataClipId
from ...commons.types.sheet_id import SheetId
from ...data_clips.types.resolve_to import ResolveTo

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class UpdateDataClipResolutionsJobConfig(pydantic.BaseModel):
    """
    Configuration for a data clip resolution job
    """

    clip_id: DataClipId = pydantic.Field(alias="clipId", description="The ID of the data clip to resolve")
    clipped_sheet_id: SheetId = pydantic.Field(
        alias="clippedSheetId", description="The ID of the sheet that contains the data clip"
    )
    resolve_to: ResolveTo = pydantic.Field(alias="resolveTo")
    column_field: str = pydantic.Field(
        alias="columnField", description="Optional. If provided, only this column will be resolved."
    )
    column_value: str = pydantic.Field(
        alias="columnValue",
        description="Optional. If provided, this value in the column will be replaced with the resolution target.",
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
