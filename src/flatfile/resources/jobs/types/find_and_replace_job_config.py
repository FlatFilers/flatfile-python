# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ...commons.types.filter import Filter
from ...commons.types.filter_field import FilterField
from ...commons.types.record_id import RecordId
from ...commons.types.search_field import SearchField
from ...commons.types.search_value import SearchValue
from ...records.types.cell_value_union import CellValueUnion

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class FindAndReplaceJobConfig(pydantic.BaseModel):
    filter: typing.Optional[Filter]
    filter_field: typing.Optional[FilterField] = pydantic.Field(alias="filterField")
    search_value: typing.Optional[SearchValue] = pydantic.Field(alias="searchValue")
    search_field: typing.Optional[SearchField] = pydantic.Field(alias="searchField")
    q: typing.Optional[str]
    ids: typing.Optional[typing.List[RecordId]] = pydantic.Field(
        description=(
            "The Record Ids param (ids) is a list of record ids that can be passed to several record endpoints allowing the user to identify specific records to INCLUDE in the query, or specific records to EXCLUDE, depending on whether or not filters are being applied. When passing a query param that filters the record dataset, such as 'searchValue', or a 'filter' of 'valid' | 'error' | 'all', the 'ids' param will EXCLUDE those records from the filtered results. For basic queries that do not filter the dataset, passing record ids in the 'ids' param will limit the dataset to INCLUDE just those specific records\n"
        )
    )
    find: typing.Optional[CellValueUnion] = pydantic.Field(
        description='A value to find for a given field in a sheet. Wrap the value in "" for exact match'
    )
    replace: typing.Optional[CellValueUnion] = pydantic.Field(description="The value to replace found values with")
    field_key: str = pydantic.Field(alias="fieldKey", description="A unique key used to identify a field in a sheet")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
