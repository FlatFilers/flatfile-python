# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .job_status import JobStatus
from .job_update_config import JobUpdateConfig

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class JobUpdate(pydantic.BaseModel):
    """
    A single unit of work that will be executed
    """

    config: typing.Optional[JobUpdateConfig]
    status: typing.Optional[JobStatus] = pydantic.Field(description="the status of the job")
    progress: typing.Optional[float] = pydantic.Field(description="the progress of the job")
    outcome_acknowledged_at: typing.Optional[dt.datetime] = pydantic.Field(
        alias="outcomeAcknowledgedAt", description="the time that the job's outcome has been acknowledged by a user"
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
