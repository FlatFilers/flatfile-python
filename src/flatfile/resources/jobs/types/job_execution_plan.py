# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .destination_field import DestinationField
from .edge import Edge
from .source_field import SourceField

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class JobExecutionPlan(pydantic.BaseModel):
    """
    The execution plan for a job, for example, for a map job, the execution plan is the mapping of the source sheet to the destination sheet.
    """

    field_mapping: typing.List[Edge] = pydantic.Field(alias="fieldMapping")
    unmapped_source_fields: typing.List[SourceField] = pydantic.Field(alias="unmappedSourceFields")
    unmapped_destination_fields: typing.List[DestinationField] = pydantic.Field(alias="unmappedDestinationFields")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
