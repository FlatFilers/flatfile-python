# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ....core.datetime_utils import serialize_datetime
from ...commons.types.sheet_id import SheetId


class MutateJobConfig(pydantic.BaseModel):
    sheet_id: SheetId = pydantic.Field(alias="sheetId")
    mutate_record: str = pydantic.Field(
        alias="mutateRecord",
        description="A JavaScript function that will be run on each record in the sheet, it should return a mutated record.",
    )
    mutation_id: typing.Optional[str] = pydantic.Field(
        alias="mutationId",
        description="If the mutation was generated through some sort of id-ed process, this links this job and that process.",
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
