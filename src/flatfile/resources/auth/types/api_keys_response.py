# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .api_key import ApiKey

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class ApiKeysResponse(pydantic.BaseModel):
    """
    import datetime

    from flatfile import ApiKey, ApiKeyOperation, ApiKeysResponse, ApiKeyType

    ApiKeysResponse(
        data=[
            ApiKey(
                id="us_key_YOUR_ID",
                raw_key="pk_YOUR_RAW_API_KEY",
                type=ApiKeyType.PUBLISHABLE,
                environment_id="us_env_YOUR_ID",
                account_id="us_acc_YOUR_ID",
                operations=[
                    ApiKeyOperation(
                        path="/v1/spaces",
                        method="POST",
                    )
                ],
                created_at=datetime.datetime.fromisoformat(
                    "2017-07-21 17:32:28+00:00",
                ),
            )
        ],
    )
    """

    data: typing.List[ApiKey]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
