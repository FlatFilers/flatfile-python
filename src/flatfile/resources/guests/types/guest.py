# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ...commons.types.guest_id import GuestId
from .guest_config import GuestConfig

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Guest(GuestConfig):
    """
    import datetime

    from flatfile import Guest, GuestSpace, GuestWorkbook

    Guest(
        id="us_g_YOUR_ID",
        environment_id="us_env_YOUR_ID",
        email="email@example.com",
        name="Your Name",
        spaces=[
            GuestSpace(
                id="us_sp_YOUR_ID",
                workbooks=[
                    GuestWorkbook(
                        id="us_wb_YOUR_ID",
                    )
                ],
                last_accessed=datetime.datetime.fromisoformat(
                    "2023-10-30 16:59:45.735000+00:00",
                ),
            )
        ],
        created_at=datetime.datetime.fromisoformat(
            "2023-10-30 16:59:45.735000+00:00",
        ),
        updated_at=datetime.datetime.fromisoformat(
            "2023-10-30 16:59:45.735000+00:00",
        ),
    )
    """

    id: GuestId
    created_at: dt.datetime = pydantic.Field(alias="createdAt", description="Date the guest object was created")
    updated_at: dt.datetime = pydantic.Field(alias="updatedAt", description="Date the guest object was last updated")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
