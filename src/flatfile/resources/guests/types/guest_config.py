# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ...commons.types.environment_id import EnvironmentId
from .guest_space import GuestSpace

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class GuestConfig(pydantic.BaseModel):
    """
    Configurations for the guests
    ---
    import datetime

    from flatfile import GuestConfig, GuestSpace, GuestWorkbook

    GuestConfig(
        environment_id="us_env_YOUR_ID",
        email="email@example.com",
        name="Your Name",
        spaces=[
            GuestSpace(
                id="us_sp_YOUR_ID",
                workbooks=[
                    GuestWorkbook(
                        id="us_wb_YOUR_ID",
                    )
                ],
                last_accessed=datetime.datetime.fromisoformat(
                    "2023-10-30 16:59:45.735000+00:00",
                ),
            )
        ],
    )
    """

    environment_id: EnvironmentId = pydantic.Field(alias="environmentId")
    email: str
    name: str
    spaces: typing.List[GuestSpace]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
