# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ....core.datetime_utils import serialize_datetime
from ...commons.types.event_id import EventId
from .context import Context
from .domain import Domain
from .event_attributes import EventAttributes
from .event_topic import EventTopic
from .origin import Origin


class BaseEvent(pydantic.BaseModel):
    id: EventId
    domain: Domain = pydantic.Field(description="The domain of the event")
    topic: EventTopic
    context: Context = pydantic.Field(description="The context of the event")
    attributes: typing.Optional[EventAttributes] = pydantic.Field(description="The attributes of the event")
    callback_url: typing.Optional[str] = pydantic.Field(
        alias="callbackUrl", description="The callback url to acknowledge the event"
    )
    data_url: typing.Optional[str] = pydantic.Field(
        alias="dataUrl", description="The url to retrieve the data associated with the event"
    )
    created_at: dt.datetime = pydantic.Field(alias="createdAt", description="Date the event was created")
    deleted_at: typing.Optional[dt.datetime] = pydantic.Field(
        alias="deletedAt", description="Date the event was deleted"
    )
    acknowledged_at: typing.Optional[dt.datetime] = pydantic.Field(
        alias="acknowledgedAt", description="Date the event was acknowledged"
    )
    acknowledged_by: typing.Optional[str] = pydantic.Field(
        alias="acknowledgedBy", description="The actor (user or system) who acknowledged the event"
    )
    target: typing.Optional[str]
    origin: typing.Optional[Origin]
    namespaces: typing.Optional[typing.List[str]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
