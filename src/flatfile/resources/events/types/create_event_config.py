# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .base_event import BaseEvent
from .event_topic import EventTopic

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class CreateEventConfig(BaseEvent):
    """
    Properties used to create a new event
    ---
    from flatfile import Context, CreateEventConfig, Domain, EventTopic

    CreateEventConfig(
        topic=EventTopic.WORKBOOK_UPDATED,
        payload={"recordsAdded": 100},
        domain=Domain.WORKBOOK,
        context=Context(
            account_id="us_acc_YOUR_ID",
            actor_id="us_key_SOME_KEY",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
            workbook_id="us_wb_YOUR_ID",
        ),
    )
    """

    topic: EventTopic
    payload: typing.Dict[str, typing.Any]
    deleted_at: typing.Optional[dt.datetime] = pydantic.Field(
        alias="deletedAt", description="Date the event was deleted"
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
