# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ...commons.types.environment_id import EnvironmentId
from ...commons.types.space_id import SpaceId
from .secret_name import SecretName
from .secret_value import SecretValue

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class WriteSecret(pydantic.BaseModel):
    """
    The properties required to write to a secret. Value is the only mutable property. Name, environmentId, spaceId (optional) are used for finding the secret.
    ---
    from flatfile import WriteSecret

    WriteSecret(
        name="My Secret",
        value="Sup3r$ecret\/alue!",
        environment_id="us_env_YOUR_ID",
        space_id="us_sp_YOUR_ID",
    )
    """

    name: SecretName = pydantic.Field(description="The reference name for a secret.")
    value: SecretValue = pydantic.Field(description="The secret value. This is hidden in the UI.")
    environment_id: EnvironmentId = pydantic.Field(alias="environmentId", description="The Environment of the secret.")
    space_id: typing.Optional[SpaceId] = pydantic.Field(alias="spaceId", description="The Space of the secret.")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
