# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class InputEnumPropertyOption(pydantic.BaseModel):
    label: typing.Optional[str] = pydantic.Field(
        description="A visual label for this option, defaults to value if not provided"
    )
    description: typing.Optional[str] = pydantic.Field(description="A short description for this option")
    color: typing.Optional[str] = pydantic.Field(description="An optional color to assign this option")
    icon: typing.Optional[str] = pydantic.Field(description="A reference pointer to a previously registered icon")
    meta: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        description="An arbitrary JSON object to be associated with this option and made available to hooks"
    )
    value: typing.Any = pydantic.Field(
        description="The value or ID of this option. This value will be sent in egress.  The type is a string | integer | boolean."
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
