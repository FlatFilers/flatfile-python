# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .input_config import InputConfig
from .input_constraint import InputConstraint

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class InputField(pydantic.BaseModel):
    key: str = pydantic.Field(description="Unique key for a Field.")
    label: str = pydantic.Field(description="Visible name of a Field.")
    description: typing.Optional[str] = pydantic.Field(description="Brief description below the name of the Field.")
    type: str = pydantic.Field(description="Field Types inform the user interface how to sort and display data.")
    config: typing.Optional[InputConfig] = pydantic.Field(description="Additional configuration for enum Fields.")
    constraints: typing.Optional[typing.List[InputConstraint]] = pydantic.Field(
        description="Indicate additional validations that will be applied to the Field."
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
