# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .action_constraint import ActionConstraint
from .action_mode import ActionMode
from .action_schedule import ActionSchedule
from .input_form import InputForm

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Action(pydantic.BaseModel):
    """
    from flatfile import Action, ActionMode

    Action(
        operation="submitAction",
        mode=ActionMode.FOREGROUND,
        label="Submit",
        description="Submit data to webhook.site",
        primary=True,
    )
    """

    slug: typing.Optional[str] = pydantic.Field(description=("**This is deprecated. Use `operation` instead.**\n"))
    operation: typing.Optional[str] = pydantic.Field(description="This will become the job operation that is triggered")
    mode: typing.Optional[ActionMode] = pydantic.Field(
        description="Foreground and toolbarBlocking action mode will prevent interacting with the resource until complete"
    )
    label: str = pydantic.Field(description="The text on the button itself.")
    tooltip: typing.Optional[str] = pydantic.Field(description="A tooltip that appears when hovering the action button")
    type: typing.Optional[str] = pydantic.Field(description=("**This is deprecated.**\n"))
    description: typing.Optional[str] = pydantic.Field(
        description="The text that appears in the dialog after the action is clicked."
    )
    schedule: typing.Optional[ActionSchedule] = pydantic.Field(
        description="Determines if the action should happen on a regular cadence."
    )
    primary: typing.Optional[bool] = pydantic.Field(
        description="A primary action will be more visibly present, whether in Sheet or Workbook."
    )
    confirm: typing.Optional[bool] = pydantic.Field(description="Whether to show a modal to confirm the action")
    icon: typing.Optional[str] = pydantic.Field(
        description="Icon will work on primary actions. It will only accept an already existing Flatfile design system icon."
    )
    require_all_valid: typing.Optional[bool] = pydantic.Field(
        alias="requireAllValid", description=("**This is deprecated. Use `constraints` instead.**\n")
    )
    require_selection: typing.Optional[bool] = pydantic.Field(
        alias="requireSelection", description=("**This is deprecated. Use `constraints` instead.**\n")
    )
    input_form: typing.Optional[InputForm] = pydantic.Field(
        alias="inputForm", description="Adds an input form for this action after it is clicked."
    )
    constraints: typing.Optional[typing.List[ActionConstraint]] = pydantic.Field(
        description="A limitation or restriction on the action."
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
