# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ...commons.types.account_id import AccountId
from ...commons.types.app_id import AppId

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Account(pydantic.BaseModel):
    """
    An account
    ---
    import datetime

    from flatfile import Account

    Account(
        id="us_acc_YOUR_ID",
        name="MyAccountName",
        metadata={},
        created_at=datetime.datetime.fromisoformat(
            "2023-10-30 16:59:45.735000+00:00",
        ),
        updated_at=datetime.datetime.fromisoformat(
            "2023-10-30 16:59:45.735000+00:00",
        ),
    )
    """

    id: AccountId
    name: str
    subdomain: typing.Optional[str] = None
    vanity_domain_dashboard: typing.Optional[str] = pydantic.Field(alias="vanityDomainDashboard", default=None)
    vanity_domain_spaces: typing.Optional[str] = pydantic.Field(alias="vanityDomainSpaces", default=None)
    embedded_domain_whitelist: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="embeddedDomainWhitelist", default=None
    )
    custom_from_email: typing.Optional[str] = pydantic.Field(alias="customFromEmail", default=None)
    stripe_customer_id: typing.Optional[str] = pydantic.Field(alias="stripeCustomerId", default=None)
    metadata: typing.Dict[str, typing.Any]
    created_at: dt.datetime = pydantic.Field(alias="createdAt")
    updated_at: dt.datetime = pydantic.Field(alias="updatedAt")
    default_app_id: typing.Optional[AppId] = pydantic.Field(alias="defaultAppId", default=None)
    dashboard: typing.Optional[int] = None

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
