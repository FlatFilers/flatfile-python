# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ...commons.types.family_id import FamilyId
from ...sheets.types.sheet_config import SheetConfig

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class ProgramConfig(pydantic.BaseModel):
    source: SheetConfig = pydantic.Field(description="Source schema")
    destination: SheetConfig = pydantic.Field(description="Destination schema")
    family_id: typing.Optional[FamilyId] = pydantic.Field(
        alias="familyId", default=None, description="ID of the family to add the program to"
    )
    namespace: typing.Optional[str] = pydantic.Field(default=None, description="Namespace of the program")
    save: typing.Optional[bool] = pydantic.Field(
        default=None,
        description="Whether to save the program for editing later. Defaults to false. If true, the response will contain an ID and access token.",
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
