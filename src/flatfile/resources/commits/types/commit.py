# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ...commons.types.sheet_id import SheetId
from ...commons.types.version_id import VersionId

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Commit(pydantic.BaseModel):
    """
    A commit version
    """

    id: VersionId
    sheet_id: SheetId = pydantic.Field(alias="sheetId")
    created_by: str = pydantic.Field(alias="createdBy", description="The actor (user or system) who created the commit")
    completed_by: typing.Optional[str] = pydantic.Field(
        alias="completedBy", description="The actor (user or system) who completed the commit"
    )
    created_at: dt.datetime = pydantic.Field(alias="createdAt", description="The time the commit was created")
    completed_at: typing.Optional[dt.datetime] = pydantic.Field(
        alias="completedAt", description="The time the commit was acknowledged"
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
