# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing
import typing_extensions
import datetime as dt
from ...core.serialization import FieldMetadata
from ...commons.types.user_id import UserId
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class MappingRuleConfig(UniversalBaseModel):
    """
    Examples
    --------
    from flatfile.mapping import MappingRuleConfig

    MappingRuleConfig(
        name="Assign mapping rule",
        type="assign",
        config={},
        metadata={},
    )
    """

    name: str = pydantic.Field()
    """
    Name of the mapping rule
    """

    type: str
    config: typing.Optional[typing.Optional[typing.Any]] = None
    accepted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="acceptedAt")] = (
        pydantic.Field(default=None)
    )
    """
    Time the mapping rule was last updated
    """

    accepted_by: typing_extensions.Annotated[typing.Optional[UserId], FieldMetadata(alias="acceptedBy")] = (
        pydantic.Field(default=None)
    )
    """
    User ID of the contributor of the mapping rule
    """

    metadata: typing.Optional[typing.Optional[typing.Any]] = pydantic.Field(default=None)
    """
    Metadata of the mapping rule
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
