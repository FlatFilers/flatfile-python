# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
from ...sheets.types.sheet_config import SheetConfig
import pydantic
import typing_extensions
import typing
from ...commons.types.family_id import FamilyId
from ...core.serialization import FieldMetadata
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class ProgramConfig(UniversalBaseModel):
    source: SheetConfig = pydantic.Field()
    """
    Source schema
    """

    destination: SheetConfig = pydantic.Field()
    """
    Destination schema
    """

    family_id: typing_extensions.Annotated[typing.Optional[FamilyId], FieldMetadata(alias="familyId")] = pydantic.Field(
        default=None
    )
    """
    ID of the family to add the program to
    """

    namespace: typing.Optional[str] = pydantic.Field(default=None)
    """
    Namespace of the program
    """

    save: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether to save the program for editing later. Defaults to false. If true, the response will contain an ID and access token.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
