# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing_extensions
from ...core.serialization import FieldMetadata
import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import typing


class ProgramSummary(UniversalBaseModel):
    total_rule_count: typing_extensions.Annotated[int, FieldMetadata(alias="totalRuleCount")] = pydantic.Field()
    """
    Total number of mapping rules
    """

    added_rule_count: typing_extensions.Annotated[int, FieldMetadata(alias="addedRuleCount")] = pydantic.Field()
    """
    Number of mapping rules added
    """

    deleted_rule_count: typing_extensions.Annotated[int, FieldMetadata(alias="deletedRuleCount")] = pydantic.Field()
    """
    Number of mapping rules deleted
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
