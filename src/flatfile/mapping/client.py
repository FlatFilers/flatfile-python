# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..sheets.types.sheet_config import SheetConfig
from ..commons.types.family_id import FamilyId
from ..core.request_options import RequestOptions
from .types.program_response import ProgramResponse
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.pydantic_utilities import parse_obj_as
from ..commons.errors.bad_request_error import BadRequestError
from ..commons.types.errors import Errors
from ..commons.errors.not_found_error import NotFoundError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..commons.types.environment_id import EnvironmentId
from ..commons.types.success import Success
from ..commons.types.user_id import UserId
import datetime as dt
from .types.programs_response import ProgramsResponse
from ..core.datetime_utils import serialize_datetime
from ..commons.types.program_id import ProgramId
from ..core.jsonable_encoder import jsonable_encoder
from .types.create_mapping_rules_request import CreateMappingRulesRequest
from .types.mapping_rules_response import MappingRulesResponse
from ..commons.types.mapping_id import MappingId
from .types.mapping_rule_response import MappingRuleResponse
from .types.update_mapping_rules_request import UpdateMappingRulesRequest
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class MappingClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create_mapping_program(
        self,
        *,
        source: SheetConfig,
        destination: SheetConfig,
        family_id: typing.Optional[FamilyId] = OMIT,
        namespace: typing.Optional[str] = OMIT,
        save: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ProgramResponse:
        """
        Creates a list of mapping rules based on two provided schemas

        Parameters
        ----------
        source : SheetConfig
            Source schema

        destination : SheetConfig
            Destination schema

        family_id : typing.Optional[FamilyId]
            ID of the family to add the program to

        namespace : typing.Optional[str]
            Namespace of the program

        save : typing.Optional[bool]
            Whether to save the program for editing later. Defaults to false. If true, the response will contain an ID and access token.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProgramResponse

        Examples
        --------
        from flatfile import Flatfile
        from flatfile.property import Property_String
        from flatfile.sheets import SheetConfig

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.mapping.create_mapping_program(
            source=SheetConfig(
                name="name",
                fields=[Property_String(), Property_String()],
            ),
            destination=SheetConfig(
                name="name",
                fields=[Property_String(), Property_String()],
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "mapping",
            method="POST",
            json={
                "source": convert_and_respect_annotation_metadata(
                    object_=source, annotation=SheetConfig, direction="write"
                ),
                "destination": convert_and_respect_annotation_metadata(
                    object_=destination, annotation=SheetConfig, direction="write"
                ),
                "familyId": family_id,
                "namespace": namespace,
                "save": save,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ProgramResponse,
                    parse_obj_as(
                        type_=ProgramResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_all_history_for_user(
        self,
        *,
        environment_id: typing.Optional[EnvironmentId] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Success:
        """
        Deletes all history for the authenticated user

        Parameters
        ----------
        environment_id : typing.Optional[EnvironmentId]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Success

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.mapping.delete_all_history_for_user()
        """
        _response = self._client_wrapper.httpx_client.request(
            "mapping",
            method="DELETE",
            json={
                "environmentId": environment_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Success,
                    parse_obj_as(
                        type_=Success,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_mapping_programs(
        self,
        *,
        page_size: typing.Optional[int] = None,
        page_number: typing.Optional[int] = None,
        created_by: typing.Optional[UserId] = None,
        created_after: typing.Optional[dt.datetime] = None,
        created_before: typing.Optional[dt.datetime] = None,
        environment_id: typing.Optional[EnvironmentId] = None,
        family_id: typing.Optional[FamilyId] = None,
        namespace: typing.Optional[str] = None,
        source_keys: typing.Optional[str] = None,
        destination_keys: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ProgramsResponse:
        """
        List all mapping programs

        Parameters
        ----------
        page_size : typing.Optional[int]
            Number of programs to return in a page (default 10)

        page_number : typing.Optional[int]
            Based on pageSize, which page of records to return

        created_by : typing.Optional[UserId]
            Filter by creator

        created_after : typing.Optional[dt.datetime]
            Filter by creation time

        created_before : typing.Optional[dt.datetime]
            Filter by creation time

        environment_id : typing.Optional[EnvironmentId]
            The ID of the environment

        family_id : typing.Optional[FamilyId]
            Filter by family

        namespace : typing.Optional[str]
            Filter by namespace

        source_keys : typing.Optional[str]
            Filter by source keys

        destination_keys : typing.Optional[str]
            Filter by destination keys

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProgramsResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.mapping.list_mapping_programs()
        """
        _response = self._client_wrapper.httpx_client.request(
            "mapping",
            method="GET",
            params={
                "pageSize": page_size,
                "pageNumber": page_number,
                "createdBy": created_by,
                "createdAfter": serialize_datetime(created_after) if created_after is not None else None,
                "createdBefore": serialize_datetime(created_before) if created_before is not None else None,
                "environmentId": environment_id,
                "familyId": family_id,
                "namespace": namespace,
                "sourceKeys": source_keys,
                "destinationKeys": destination_keys,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ProgramsResponse,
                    parse_obj_as(
                        type_=ProgramsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_mapping_program(
        self, program_id: ProgramId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ProgramResponse:
        """
        Get a mapping program

        Parameters
        ----------
        program_id : ProgramId
            ID of the program

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProgramResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.mapping.get_mapping_program(
            program_id="programId",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"mapping/{jsonable_encoder(program_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ProgramResponse,
                    parse_obj_as(
                        type_=ProgramResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_mapping_program(
        self,
        program_id: ProgramId,
        *,
        source: SheetConfig,
        destination: SheetConfig,
        family_id: typing.Optional[FamilyId] = OMIT,
        namespace: typing.Optional[str] = OMIT,
        save: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ProgramResponse:
        """
        Updates a mapping program

        Parameters
        ----------
        program_id : ProgramId
            ID of the program

        source : SheetConfig
            Source schema

        destination : SheetConfig
            Destination schema

        family_id : typing.Optional[FamilyId]
            ID of the family to add the program to

        namespace : typing.Optional[str]
            Namespace of the program

        save : typing.Optional[bool]
            Whether to save the program for editing later. Defaults to false. If true, the response will contain an ID and access token.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProgramResponse

        Examples
        --------
        from flatfile import Flatfile
        from flatfile.property import Property_String
        from flatfile.sheets import SheetConfig

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.mapping.update_mapping_program(
            program_id="programId",
            source=SheetConfig(
                name="name",
                fields=[Property_String(), Property_String()],
            ),
            destination=SheetConfig(
                name="name",
                fields=[Property_String(), Property_String()],
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"mapping/{jsonable_encoder(program_id)}",
            method="PATCH",
            json={
                "source": convert_and_respect_annotation_metadata(
                    object_=source, annotation=SheetConfig, direction="write"
                ),
                "destination": convert_and_respect_annotation_metadata(
                    object_=destination, annotation=SheetConfig, direction="write"
                ),
                "familyId": family_id,
                "namespace": namespace,
                "save": save,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ProgramResponse,
                    parse_obj_as(
                        type_=ProgramResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_mapping_program(
        self, program_id: ProgramId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Success:
        """
        Deletes a mapping program

        Parameters
        ----------
        program_id : ProgramId
            ID of the program

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Success

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.mapping.delete_mapping_program(
            program_id="programId",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"mapping/{jsonable_encoder(program_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Success,
                    parse_obj_as(
                        type_=Success,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_rules(
        self,
        program_id: ProgramId,
        *,
        request: CreateMappingRulesRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> MappingRulesResponse:
        """
        Add mapping rules to a program

        Parameters
        ----------
        program_id : ProgramId
            ID of the program

        request : CreateMappingRulesRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MappingRulesResponse

        Examples
        --------
        from flatfile import Flatfile
        from flatfile.mapping import MappingRuleConfig

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.mapping.create_rules(
            program_id="programId",
            request=[
                MappingRuleConfig(
                    name="name",
                    type="type",
                ),
                MappingRuleConfig(
                    name="name",
                    type="type",
                ),
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"mapping/{jsonable_encoder(program_id)}/rules",
            method="POST",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=CreateMappingRulesRequest, direction="write"
            ),
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    MappingRulesResponse,
                    parse_obj_as(
                        type_=MappingRulesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_multiple_rules(
        self,
        program_id: ProgramId,
        *,
        rule_ids: typing.Sequence[MappingId],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Success:
        """
        Deletes multiple mapping rules from a program

        Parameters
        ----------
        program_id : ProgramId
            ID of the program

        rule_ids : typing.Sequence[MappingId]
            Array of rule IDs to be deleted

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Success

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.mapping.delete_multiple_rules(
            program_id="programId",
            rule_ids=["ruleIds", "ruleIds"],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"mapping/{jsonable_encoder(program_id)}/rules",
            method="DELETE",
            json={
                "ruleIds": rule_ids,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Success,
                    parse_obj_as(
                        type_=Success,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_rules(
        self, program_id: ProgramId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> MappingRulesResponse:
        """
        List all mapping rules in a program

        Parameters
        ----------
        program_id : ProgramId
            ID of the program

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MappingRulesResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.mapping.list_rules(
            program_id="us_mp_YOUR_ID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"mapping/{jsonable_encoder(program_id)}/rules",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    MappingRulesResponse,
                    parse_obj_as(
                        type_=MappingRulesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_rule(
        self, program_id: ProgramId, mapping_id: MappingId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> MappingRuleResponse:
        """
        Get a mapping rule from a program

        Parameters
        ----------
        program_id : ProgramId
            ID of the program

        mapping_id : MappingId
            ID of mapping rule

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MappingRuleResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.mapping.get_rule(
            program_id="us_mp_YOUR_ID",
            mapping_id="us_mr_YOUR_ID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"mapping/{jsonable_encoder(program_id)}/rules/{jsonable_encoder(mapping_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    MappingRuleResponse,
                    parse_obj_as(
                        type_=MappingRuleResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_rule(
        self,
        program_id: ProgramId,
        mapping_id: MappingId,
        *,
        name: str,
        type: str,
        config: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        accepted_at: typing.Optional[dt.datetime] = OMIT,
        accepted_by: typing.Optional[UserId] = OMIT,
        metadata: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> MappingRuleResponse:
        """
        Updates a mapping rule in a program

        Parameters
        ----------
        program_id : ProgramId
            ID of the program

        mapping_id : MappingId
            ID of mapping rule

        name : str
            Name of the mapping rule

        type : str

        config : typing.Optional[typing.Optional[typing.Any]]

        accepted_at : typing.Optional[dt.datetime]
            Time the mapping rule was last updated

        accepted_by : typing.Optional[UserId]
            User ID of the contributor of the mapping rule

        metadata : typing.Optional[typing.Optional[typing.Any]]
            Metadata of the mapping rule

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MappingRuleResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.mapping.update_rule(
            program_id="us_mp_YOUR_ID",
            mapping_id="us_mr_YOUR_ID",
            name="Assign mapping rule",
            type="assign",
            config={},
            metadata={},
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"mapping/{jsonable_encoder(program_id)}/rules/{jsonable_encoder(mapping_id)}",
            method="PATCH",
            json={
                "name": name,
                "type": type,
                "config": config,
                "acceptedAt": accepted_at,
                "acceptedBy": accepted_by,
                "metadata": metadata,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    MappingRuleResponse,
                    parse_obj_as(
                        type_=MappingRuleResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_rules(
        self,
        program_id: ProgramId,
        *,
        request: UpdateMappingRulesRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> MappingRulesResponse:
        """
        Updates a list of mapping rules in a program

        Parameters
        ----------
        program_id : ProgramId
            ID of the program

        request : UpdateMappingRulesRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MappingRulesResponse

        Examples
        --------
        import datetime

        from flatfile import Flatfile
        from flatfile.mapping import MappingRule

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.mapping.update_rules(
            program_id="programId",
            request=[
                MappingRule(
                    id="id",
                    created_at=datetime.datetime.fromisoformat(
                        "2024-01-15 09:30:00+00:00",
                    ),
                    updated_at=datetime.datetime.fromisoformat(
                        "2024-01-15 09:30:00+00:00",
                    ),
                ),
                MappingRule(
                    id="id",
                    created_at=datetime.datetime.fromisoformat(
                        "2024-01-15 09:30:00+00:00",
                    ),
                    updated_at=datetime.datetime.fromisoformat(
                        "2024-01-15 09:30:00+00:00",
                    ),
                ),
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"mapping/{jsonable_encoder(program_id)}/rules",
            method="PATCH",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=UpdateMappingRulesRequest, direction="write"
            ),
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    MappingRulesResponse,
                    parse_obj_as(
                        type_=MappingRulesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_rule(
        self, program_id: ProgramId, mapping_id: MappingId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Success:
        """
        Deletes a mapping rule from a program

        Parameters
        ----------
        program_id : ProgramId
            ID of the program

        mapping_id : MappingId
            ID of mapping rule

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Success

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.mapping.delete_rule(
            program_id="us_mp_YOUR_ID",
            mapping_id="us_mr_YOUR_ID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"mapping/{jsonable_encoder(program_id)}/rules/{jsonable_encoder(mapping_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Success,
                    parse_obj_as(
                        type_=Success,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncMappingClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create_mapping_program(
        self,
        *,
        source: SheetConfig,
        destination: SheetConfig,
        family_id: typing.Optional[FamilyId] = OMIT,
        namespace: typing.Optional[str] = OMIT,
        save: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ProgramResponse:
        """
        Creates a list of mapping rules based on two provided schemas

        Parameters
        ----------
        source : SheetConfig
            Source schema

        destination : SheetConfig
            Destination schema

        family_id : typing.Optional[FamilyId]
            ID of the family to add the program to

        namespace : typing.Optional[str]
            Namespace of the program

        save : typing.Optional[bool]
            Whether to save the program for editing later. Defaults to false. If true, the response will contain an ID and access token.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProgramResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile
        from flatfile.property import Property_String
        from flatfile.sheets import SheetConfig

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.mapping.create_mapping_program(
                source=SheetConfig(
                    name="name",
                    fields=[Property_String(), Property_String()],
                ),
                destination=SheetConfig(
                    name="name",
                    fields=[Property_String(), Property_String()],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "mapping",
            method="POST",
            json={
                "source": convert_and_respect_annotation_metadata(
                    object_=source, annotation=SheetConfig, direction="write"
                ),
                "destination": convert_and_respect_annotation_metadata(
                    object_=destination, annotation=SheetConfig, direction="write"
                ),
                "familyId": family_id,
                "namespace": namespace,
                "save": save,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ProgramResponse,
                    parse_obj_as(
                        type_=ProgramResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_all_history_for_user(
        self,
        *,
        environment_id: typing.Optional[EnvironmentId] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Success:
        """
        Deletes all history for the authenticated user

        Parameters
        ----------
        environment_id : typing.Optional[EnvironmentId]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Success

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.mapping.delete_all_history_for_user()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "mapping",
            method="DELETE",
            json={
                "environmentId": environment_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Success,
                    parse_obj_as(
                        type_=Success,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_mapping_programs(
        self,
        *,
        page_size: typing.Optional[int] = None,
        page_number: typing.Optional[int] = None,
        created_by: typing.Optional[UserId] = None,
        created_after: typing.Optional[dt.datetime] = None,
        created_before: typing.Optional[dt.datetime] = None,
        environment_id: typing.Optional[EnvironmentId] = None,
        family_id: typing.Optional[FamilyId] = None,
        namespace: typing.Optional[str] = None,
        source_keys: typing.Optional[str] = None,
        destination_keys: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ProgramsResponse:
        """
        List all mapping programs

        Parameters
        ----------
        page_size : typing.Optional[int]
            Number of programs to return in a page (default 10)

        page_number : typing.Optional[int]
            Based on pageSize, which page of records to return

        created_by : typing.Optional[UserId]
            Filter by creator

        created_after : typing.Optional[dt.datetime]
            Filter by creation time

        created_before : typing.Optional[dt.datetime]
            Filter by creation time

        environment_id : typing.Optional[EnvironmentId]
            The ID of the environment

        family_id : typing.Optional[FamilyId]
            Filter by family

        namespace : typing.Optional[str]
            Filter by namespace

        source_keys : typing.Optional[str]
            Filter by source keys

        destination_keys : typing.Optional[str]
            Filter by destination keys

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProgramsResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.mapping.list_mapping_programs()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "mapping",
            method="GET",
            params={
                "pageSize": page_size,
                "pageNumber": page_number,
                "createdBy": created_by,
                "createdAfter": serialize_datetime(created_after) if created_after is not None else None,
                "createdBefore": serialize_datetime(created_before) if created_before is not None else None,
                "environmentId": environment_id,
                "familyId": family_id,
                "namespace": namespace,
                "sourceKeys": source_keys,
                "destinationKeys": destination_keys,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ProgramsResponse,
                    parse_obj_as(
                        type_=ProgramsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_mapping_program(
        self, program_id: ProgramId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ProgramResponse:
        """
        Get a mapping program

        Parameters
        ----------
        program_id : ProgramId
            ID of the program

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProgramResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.mapping.get_mapping_program(
                program_id="programId",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"mapping/{jsonable_encoder(program_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ProgramResponse,
                    parse_obj_as(
                        type_=ProgramResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_mapping_program(
        self,
        program_id: ProgramId,
        *,
        source: SheetConfig,
        destination: SheetConfig,
        family_id: typing.Optional[FamilyId] = OMIT,
        namespace: typing.Optional[str] = OMIT,
        save: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ProgramResponse:
        """
        Updates a mapping program

        Parameters
        ----------
        program_id : ProgramId
            ID of the program

        source : SheetConfig
            Source schema

        destination : SheetConfig
            Destination schema

        family_id : typing.Optional[FamilyId]
            ID of the family to add the program to

        namespace : typing.Optional[str]
            Namespace of the program

        save : typing.Optional[bool]
            Whether to save the program for editing later. Defaults to false. If true, the response will contain an ID and access token.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProgramResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile
        from flatfile.property import Property_String
        from flatfile.sheets import SheetConfig

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.mapping.update_mapping_program(
                program_id="programId",
                source=SheetConfig(
                    name="name",
                    fields=[Property_String(), Property_String()],
                ),
                destination=SheetConfig(
                    name="name",
                    fields=[Property_String(), Property_String()],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"mapping/{jsonable_encoder(program_id)}",
            method="PATCH",
            json={
                "source": convert_and_respect_annotation_metadata(
                    object_=source, annotation=SheetConfig, direction="write"
                ),
                "destination": convert_and_respect_annotation_metadata(
                    object_=destination, annotation=SheetConfig, direction="write"
                ),
                "familyId": family_id,
                "namespace": namespace,
                "save": save,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ProgramResponse,
                    parse_obj_as(
                        type_=ProgramResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_mapping_program(
        self, program_id: ProgramId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Success:
        """
        Deletes a mapping program

        Parameters
        ----------
        program_id : ProgramId
            ID of the program

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Success

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.mapping.delete_mapping_program(
                program_id="programId",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"mapping/{jsonable_encoder(program_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Success,
                    parse_obj_as(
                        type_=Success,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_rules(
        self,
        program_id: ProgramId,
        *,
        request: CreateMappingRulesRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> MappingRulesResponse:
        """
        Add mapping rules to a program

        Parameters
        ----------
        program_id : ProgramId
            ID of the program

        request : CreateMappingRulesRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MappingRulesResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile
        from flatfile.mapping import MappingRuleConfig

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.mapping.create_rules(
                program_id="programId",
                request=[
                    MappingRuleConfig(
                        name="name",
                        type="type",
                    ),
                    MappingRuleConfig(
                        name="name",
                        type="type",
                    ),
                ],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"mapping/{jsonable_encoder(program_id)}/rules",
            method="POST",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=CreateMappingRulesRequest, direction="write"
            ),
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    MappingRulesResponse,
                    parse_obj_as(
                        type_=MappingRulesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_multiple_rules(
        self,
        program_id: ProgramId,
        *,
        rule_ids: typing.Sequence[MappingId],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Success:
        """
        Deletes multiple mapping rules from a program

        Parameters
        ----------
        program_id : ProgramId
            ID of the program

        rule_ids : typing.Sequence[MappingId]
            Array of rule IDs to be deleted

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Success

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.mapping.delete_multiple_rules(
                program_id="programId",
                rule_ids=["ruleIds", "ruleIds"],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"mapping/{jsonable_encoder(program_id)}/rules",
            method="DELETE",
            json={
                "ruleIds": rule_ids,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Success,
                    parse_obj_as(
                        type_=Success,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_rules(
        self, program_id: ProgramId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> MappingRulesResponse:
        """
        List all mapping rules in a program

        Parameters
        ----------
        program_id : ProgramId
            ID of the program

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MappingRulesResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.mapping.list_rules(
                program_id="us_mp_YOUR_ID",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"mapping/{jsonable_encoder(program_id)}/rules",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    MappingRulesResponse,
                    parse_obj_as(
                        type_=MappingRulesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_rule(
        self, program_id: ProgramId, mapping_id: MappingId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> MappingRuleResponse:
        """
        Get a mapping rule from a program

        Parameters
        ----------
        program_id : ProgramId
            ID of the program

        mapping_id : MappingId
            ID of mapping rule

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MappingRuleResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.mapping.get_rule(
                program_id="us_mp_YOUR_ID",
                mapping_id="us_mr_YOUR_ID",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"mapping/{jsonable_encoder(program_id)}/rules/{jsonable_encoder(mapping_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    MappingRuleResponse,
                    parse_obj_as(
                        type_=MappingRuleResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_rule(
        self,
        program_id: ProgramId,
        mapping_id: MappingId,
        *,
        name: str,
        type: str,
        config: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        accepted_at: typing.Optional[dt.datetime] = OMIT,
        accepted_by: typing.Optional[UserId] = OMIT,
        metadata: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> MappingRuleResponse:
        """
        Updates a mapping rule in a program

        Parameters
        ----------
        program_id : ProgramId
            ID of the program

        mapping_id : MappingId
            ID of mapping rule

        name : str
            Name of the mapping rule

        type : str

        config : typing.Optional[typing.Optional[typing.Any]]

        accepted_at : typing.Optional[dt.datetime]
            Time the mapping rule was last updated

        accepted_by : typing.Optional[UserId]
            User ID of the contributor of the mapping rule

        metadata : typing.Optional[typing.Optional[typing.Any]]
            Metadata of the mapping rule

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MappingRuleResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.mapping.update_rule(
                program_id="us_mp_YOUR_ID",
                mapping_id="us_mr_YOUR_ID",
                name="Assign mapping rule",
                type="assign",
                config={},
                metadata={},
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"mapping/{jsonable_encoder(program_id)}/rules/{jsonable_encoder(mapping_id)}",
            method="PATCH",
            json={
                "name": name,
                "type": type,
                "config": config,
                "acceptedAt": accepted_at,
                "acceptedBy": accepted_by,
                "metadata": metadata,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    MappingRuleResponse,
                    parse_obj_as(
                        type_=MappingRuleResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_rules(
        self,
        program_id: ProgramId,
        *,
        request: UpdateMappingRulesRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> MappingRulesResponse:
        """
        Updates a list of mapping rules in a program

        Parameters
        ----------
        program_id : ProgramId
            ID of the program

        request : UpdateMappingRulesRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MappingRulesResponse

        Examples
        --------
        import asyncio
        import datetime

        from flatfile import AsyncFlatfile
        from flatfile.mapping import MappingRule

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.mapping.update_rules(
                program_id="programId",
                request=[
                    MappingRule(
                        id="id",
                        created_at=datetime.datetime.fromisoformat(
                            "2024-01-15 09:30:00+00:00",
                        ),
                        updated_at=datetime.datetime.fromisoformat(
                            "2024-01-15 09:30:00+00:00",
                        ),
                    ),
                    MappingRule(
                        id="id",
                        created_at=datetime.datetime.fromisoformat(
                            "2024-01-15 09:30:00+00:00",
                        ),
                        updated_at=datetime.datetime.fromisoformat(
                            "2024-01-15 09:30:00+00:00",
                        ),
                    ),
                ],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"mapping/{jsonable_encoder(program_id)}/rules",
            method="PATCH",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=UpdateMappingRulesRequest, direction="write"
            ),
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    MappingRulesResponse,
                    parse_obj_as(
                        type_=MappingRulesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_rule(
        self, program_id: ProgramId, mapping_id: MappingId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Success:
        """
        Deletes a mapping rule from a program

        Parameters
        ----------
        program_id : ProgramId
            ID of the program

        mapping_id : MappingId
            ID of mapping rule

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Success

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.mapping.delete_rule(
                program_id="us_mp_YOUR_ID",
                mapping_id="us_mr_YOUR_ID",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"mapping/{jsonable_encoder(program_id)}/rules/{jsonable_encoder(mapping_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Success,
                    parse_obj_as(
                        type_=Success,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
