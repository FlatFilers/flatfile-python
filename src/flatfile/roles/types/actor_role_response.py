# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
from ...commons.types.actor_role_id import ActorRoleId
import typing_extensions
from ...commons.types.role_id import RoleId
from ...core.serialization import FieldMetadata
from ...commons.types.actor_id_union import ActorIdUnion
from .resource_id_union import ResourceIdUnion
import datetime as dt
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import typing
import pydantic


class ActorRoleResponse(UniversalBaseModel):
    """
    Examples
    --------
    import datetime

    from flatfile.roles import ActorRoleResponse

    ActorRoleResponse(
        id="us_acr_YOUR_ID",
        role_id="us_rol_YOUR_ID",
        actor_id="us_usr_YOUR_ID",
        resource_id="us_acc_YOUR_ID",
        created_at=datetime.datetime.fromisoformat(
            "2021-01-01 00:00:00+00:00",
        ),
        updated_at=datetime.datetime.fromisoformat(
            "2021-01-01 00:00:00+00:00",
        ),
    )
    """

    id: ActorRoleId
    role_id: typing_extensions.Annotated[RoleId, FieldMetadata(alias="roleId")]
    actor_id: typing_extensions.Annotated[ActorIdUnion, FieldMetadata(alias="actorId")]
    resource_id: typing_extensions.Annotated[ResourceIdUnion, FieldMetadata(alias="resourceId")]
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
