# This file was auto-generated by Fern from our API Definition.

from ..core.client_wrapper import SyncClientWrapper
import typing
from ..commons.types.environment_id import EnvironmentId
from ..commons.types.agent_id import AgentId
from ..commons.types.page_size import PageSize
from ..commons.types.page_number import PageNumber
from ..core.request_options import RequestOptions
from .types.list_agent_exports_response import ListAgentExportsResponse
from ..core.pydantic_utilities import parse_obj_as
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..commons.types.agent_export_id import AgentExportId
from .types.get_agent_export_response import GetAgentExportResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..commons.types.success import Success
from ..core.client_wrapper import AsyncClientWrapper


class AgentExportsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        environment_id: typing.Optional[EnvironmentId] = None,
        agent_id: typing.Optional[AgentId] = None,
        page_size: typing.Optional[PageSize] = None,
        page_number: typing.Optional[PageNumber] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListAgentExportsResponse:
        """
        Parameters
        ----------
        environment_id : typing.Optional[EnvironmentId]

        agent_id : typing.Optional[AgentId]

        page_size : typing.Optional[PageSize]

        page_number : typing.Optional[PageNumber]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListAgentExportsResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.agent_exports.list()
        """
        _response = self._client_wrapper.httpx_client.request(
            "agent-exports",
            method="GET",
            params={
                "environmentId": environment_id,
                "agentId": agent_id,
                "pageSize": page_size,
                "pageNumber": page_number,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListAgentExportsResponse,
                    parse_obj_as(
                        type_=ListAgentExportsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self, agent_export_id: AgentExportId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetAgentExportResponse:
        """
        Parameters
        ----------
        agent_export_id : AgentExportId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAgentExportResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.agent_exports.get(
            agent_export_id="us_agx_YOUR_ID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"agent-exports/{jsonable_encoder(agent_export_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetAgentExportResponse,
                    parse_obj_as(
                        type_=GetAgentExportResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def download(
        self, agent_export_id: AgentExportId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Iterator[bytes]:
        """
        Parameters
        ----------
        agent_export_id : AgentExportId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration. You can pass in configuration such as `chunk_size`, and more to customize the request and response.

        Yields
        ------
        typing.Iterator[bytes]
        """
        with self._client_wrapper.httpx_client.stream(
            f"agent-exports/{jsonable_encoder(agent_export_id)}/download",
            method="GET",
            request_options=request_options,
        ) as _response:
            try:
                if 200 <= _response.status_code < 300:
                    _chunk_size = request_options.get("chunk_size", None) if request_options is not None else None
                    for _chunk in _response.iter_bytes(chunk_size=_chunk_size):
                        yield _chunk
                    return
                _response.read()
                _response_json = _response.json()
            except JSONDecodeError:
                raise ApiError(status_code=_response.status_code, body=_response.text)
            raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(
        self, agent_export_id: AgentExportId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Success:
        """
        Parameters
        ----------
        agent_export_id : AgentExportId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Success

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.agent_exports.delete(
            agent_export_id="us_agx_YOUR_ID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"agent-exports/{jsonable_encoder(agent_export_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Success,
                    parse_obj_as(
                        type_=Success,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncAgentExportsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        environment_id: typing.Optional[EnvironmentId] = None,
        agent_id: typing.Optional[AgentId] = None,
        page_size: typing.Optional[PageSize] = None,
        page_number: typing.Optional[PageNumber] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListAgentExportsResponse:
        """
        Parameters
        ----------
        environment_id : typing.Optional[EnvironmentId]

        agent_id : typing.Optional[AgentId]

        page_size : typing.Optional[PageSize]

        page_number : typing.Optional[PageNumber]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListAgentExportsResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.agent_exports.list()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "agent-exports",
            method="GET",
            params={
                "environmentId": environment_id,
                "agentId": agent_id,
                "pageSize": page_size,
                "pageNumber": page_number,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListAgentExportsResponse,
                    parse_obj_as(
                        type_=ListAgentExportsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self, agent_export_id: AgentExportId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetAgentExportResponse:
        """
        Parameters
        ----------
        agent_export_id : AgentExportId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAgentExportResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.agent_exports.get(
                agent_export_id="us_agx_YOUR_ID",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"agent-exports/{jsonable_encoder(agent_export_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    GetAgentExportResponse,
                    parse_obj_as(
                        type_=GetAgentExportResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def download(
        self, agent_export_id: AgentExportId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.AsyncIterator[bytes]:
        """
        Parameters
        ----------
        agent_export_id : AgentExportId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration. You can pass in configuration such as `chunk_size`, and more to customize the request and response.

        Yields
        ------
        typing.AsyncIterator[bytes]
        """
        async with self._client_wrapper.httpx_client.stream(
            f"agent-exports/{jsonable_encoder(agent_export_id)}/download",
            method="GET",
            request_options=request_options,
        ) as _response:
            try:
                if 200 <= _response.status_code < 300:
                    _chunk_size = request_options.get("chunk_size", None) if request_options is not None else None
                    async for _chunk in _response.aiter_bytes(chunk_size=_chunk_size):
                        yield _chunk
                    return
                await _response.aread()
                _response_json = _response.json()
            except JSONDecodeError:
                raise ApiError(status_code=_response.status_code, body=_response.text)
            raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(
        self, agent_export_id: AgentExportId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Success:
        """
        Parameters
        ----------
        agent_export_id : AgentExportId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Success

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.agent_exports.delete(
                agent_export_id="us_agx_YOUR_ID",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"agent-exports/{jsonable_encoder(agent_export_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Success,
                    parse_obj_as(
                        type_=Success,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
