# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..commons.types.sheet_id import SheetId
from ..commons.types.version_id import VersionId
from ..core.request_options import RequestOptions
from .types.version_response import VersionResponse
from ..core.pydantic_utilities import parse_obj_as
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class VersionsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create_id(
        self,
        *,
        sheet_id: typing.Optional[SheetId] = OMIT,
        parent_version_id: typing.Optional[VersionId] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> VersionResponse:
        """
        Parameters
        ----------
        sheet_id : typing.Optional[SheetId]
            The ID of the Sheet.

        parent_version_id : typing.Optional[VersionId]
            Deprecated, creating or updating a group of records together will automatically generate a commitId to group those record changes together.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        VersionResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.versions.create_id(
            sheet_id="us_sh_YOUR_ID",
            parent_version_id="us_vr_YOUR_ID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "versions",
            method="POST",
            json={
                "sheetId": sheet_id,
                "parentVersionId": parent_version_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    VersionResponse,
                    parse_obj_as(
                        type_=VersionResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncVersionsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create_id(
        self,
        *,
        sheet_id: typing.Optional[SheetId] = OMIT,
        parent_version_id: typing.Optional[VersionId] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> VersionResponse:
        """
        Parameters
        ----------
        sheet_id : typing.Optional[SheetId]
            The ID of the Sheet.

        parent_version_id : typing.Optional[VersionId]
            Deprecated, creating or updating a group of records together will automatically generate a commitId to group those record changes together.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        VersionResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.versions.create_id(
                sheet_id="us_sh_YOUR_ID",
                parent_version_id="us_vr_YOUR_ID",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "versions",
            method="POST",
            json={
                "sheetId": sheet_id,
                "parentVersionId": parent_version_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    VersionResponse,
                    parse_obj_as(
                        type_=VersionResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
