# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
from ...commons.types.file_id import FileId
import pydantic
from .model_file_status_enum import ModelFileStatusEnum
import typing
from .mode import Mode
import typing_extensions
from ...core.serialization import FieldMetadata
import datetime as dt
from ...commons.types.space_id import SpaceId
from ...commons.types.workbook_id import WorkbookId
from ...commons.types.sheet_id import SheetId
from ...commons.types.action import Action
from .file_origin import FileOrigin
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class File(UniversalBaseModel):
    """
    Any uploaded file of any type

    Examples
    --------
    import datetime

    from flatfile.files import File

    File(
        id="us_fl_YOUR_ID",
        name="Test File",
        ext="png",
        mimetype="image/png",
        encoding="7bit",
        status="partial",
        mode="import",
        size=81953,
        bytes_received=81593,
        created_at=datetime.datetime.fromisoformat(
            "2023-11-15 19:31:33.015000+00:00",
        ),
        updated_at=datetime.datetime.fromisoformat(
            "2023-11-15 19:31:33.015000+00:00",
        ),
        space_id="us_sp_YOUR_ID",
    )
    """

    id: FileId
    name: str = pydantic.Field()
    """
    Original filename
    """

    ext: str = pydantic.Field()
    """
    Extension of the file
    """

    mimetype: str = pydantic.Field()
    """
    MIME Type of the file
    """

    encoding: str = pydantic.Field()
    """
    Text encoding of the file
    """

    status: ModelFileStatusEnum = pydantic.Field()
    """
    Status of the file
    """

    mode: typing.Optional[Mode] = pydantic.Field(default=None)
    """
    The storage mode of file
    """

    size: int = pydantic.Field()
    """
    Size of file in bytes
    """

    bytes_received: typing_extensions.Annotated[int, FieldMetadata(alias="bytesReceived")] = pydantic.Field()
    """
    Number of bytes that have been uploaded so far (useful for progress tracking)
    """

    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")] = pydantic.Field()
    """
    Date the file was created
    """

    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")] = pydantic.Field()
    """
    Date the file was last updated
    """

    expired_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="expiredAt")] = (
        pydantic.Field(default=None)
    )
    """
    Date the file was expired
    """

    space_id: typing_extensions.Annotated[SpaceId, FieldMetadata(alias="spaceId")]
    workbook_id: typing_extensions.Annotated[typing.Optional[WorkbookId], FieldMetadata(alias="workbookId")] = None
    sheet_id: typing_extensions.Annotated[typing.Optional[SheetId], FieldMetadata(alias="sheetId")] = None
    actions: typing.Optional[typing.List[Action]] = None
    origin: typing.Optional[FileOrigin] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
