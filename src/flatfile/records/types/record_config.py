# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
from .cell_config import CellConfig
import typing_extensions
from ...core.serialization import FieldMetadata
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class RecordConfig(UniversalBaseModel):
    """
    Configuration of a record or specific fields in the record

    Examples
    --------
    from flatfile.records import CellConfig, RecordConfig

    RecordConfig(
        readonly=True,
        fields={
            "foo": CellConfig(
                readonly=True,
            ),
            "bar": CellConfig(
                readonly=True,
            ),
        },
    )
    """

    readonly: typing.Optional[bool] = None
    fields: typing.Optional[typing.Dict[str, CellConfig]] = None
    marked_for_deletion: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="markedForDeletion")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
