# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ...core.serialization import FieldMetadata
from .field_record_counts import FieldRecordCounts
import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class RecordCounts(UniversalBaseModel):
    """
    Examples
    --------
    from flatfile.records import RecordCounts

    RecordCounts(
        valid=1000,
        error=0,
        total=1000,
    )
    """

    total: int
    valid: int
    error: int
    errors_by_field: typing_extensions.Annotated[
        typing.Optional[typing.Dict[str, int]], FieldMetadata(alias="errorsByField")
    ] = None
    by_field: typing_extensions.Annotated[
        typing.Optional[typing.Dict[str, FieldRecordCounts]], FieldMetadata(alias="byField")
    ] = pydantic.Field(default=None)
    """
    Counts for valid, error, and total records grouped by field key
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
