# This file was auto-generated by Fern from our API Definition.

from ...commons.types.success_data import SuccessData
from .records_with_links import RecordsWithLinks
import typing
from .record_counts import RecordCounts
import typing_extensions
from ...commons.types.version_id import VersionId
from ...core.serialization import FieldMetadata
import pydantic
from ...commons.types.commit_id import CommitId
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class GetRecordsResponseData(SuccessData):
    """
    A list of records with optional record counts

    Examples
    --------
    import datetime

    from flatfile.records import (
        CellValueWithLinks,
        GetRecordsResponseData,
        RecordConfig,
        RecordCounts,
        RecordWithLinks,
    )

    GetRecordsResponseData(
        records=[
            RecordWithLinks(
                id="us_rc_YOUR_ID",
                values={
                    "firstName": CellValueWithLinks(
                        value="John",
                        messages=[],
                        valid=True,
                        updated_at=datetime.datetime.fromisoformat(
                            "2023-11-20 16:59:40.286000+00:00",
                        ),
                    ),
                    "lastName": CellValueWithLinks(
                        value="Smith",
                        messages=[],
                        valid=True,
                        updated_at=datetime.datetime.fromisoformat(
                            "2023-11-20 16:59:40.286000+00:00",
                        ),
                    ),
                    "email": CellValueWithLinks(
                        value="john.smith@example.com",
                        messages=[],
                        valid=True,
                        updated_at=datetime.datetime.fromisoformat(
                            "2023-11-20 16:59:40.286000+00:00",
                        ),
                    ),
                },
                valid=True,
                metadata={},
                config=RecordConfig(),
            )
        ],
        counts=RecordCounts(
            valid=1000,
            error=0,
            total=1000,
        ),
        version_id="us_vr_YOUR_ID",
        commit_id="us_vr_YOUR_ID",
        success=True,
    )
    """

    records: RecordsWithLinks
    counts: typing.Optional[RecordCounts] = None
    version_id: typing_extensions.Annotated[typing.Optional[VersionId], FieldMetadata(alias="versionId")] = (
        pydantic.Field(default=None)
    )
    """
    Deprecated, use `commitId` instead.
    """

    commit_id: typing_extensions.Annotated[typing.Optional[CommitId], FieldMetadata(alias="commitId")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
