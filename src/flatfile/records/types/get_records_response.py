# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
from .get_records_response_data import GetRecordsResponseData
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import typing
import pydantic


class GetRecordsResponse(UniversalBaseModel):
    """
    Examples
    --------
    import datetime

    from flatfile.records import (
        CellValueWithLinks,
        GetRecordsResponse,
        GetRecordsResponseData,
        RecordConfig,
        RecordCounts,
        RecordWithLinks,
    )

    GetRecordsResponse(
        data=GetRecordsResponseData(
            records=[
                RecordWithLinks(
                    id="us_rc_YOUR_ID",
                    values={
                        "firstName": CellValueWithLinks(
                            value="John",
                            messages=[],
                            valid=True,
                            updated_at=datetime.datetime.fromisoformat(
                                "2023-11-20 16:59:40.286000+00:00",
                            ),
                        ),
                        "lastName": CellValueWithLinks(
                            value="Smith",
                            messages=[],
                            valid=True,
                            updated_at=datetime.datetime.fromisoformat(
                                "2023-11-20 16:59:40.286000+00:00",
                            ),
                        ),
                        "email": CellValueWithLinks(
                            value="john.smith@example.com",
                            messages=[],
                            valid=True,
                            updated_at=datetime.datetime.fromisoformat(
                                "2023-11-20 16:59:40.286000+00:00",
                            ),
                        ),
                    },
                    valid=True,
                    metadata={},
                    config=RecordConfig(),
                )
            ],
            counts=RecordCounts(
                valid=1000,
                error=0,
                total=1000,
            ),
            version_id="us_vr_YOUR_ID",
            commit_id="us_vr_YOUR_ID",
            success=True,
        ),
    )
    """

    data: GetRecordsResponseData

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
