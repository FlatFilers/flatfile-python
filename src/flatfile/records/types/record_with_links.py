# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
from ...commons.types.record_id import RecordId
from .record_data_with_links import RecordDataWithLinks
import typing
from .validation_message import ValidationMessage
from .record_config import RecordConfig
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class RecordWithLinks(UniversalBaseModel):
    """
    A single row of data in a Sheet, including links to related rows

    Examples
    --------
    import datetime

    from flatfile.records import CellValueWithLinks, RecordConfig, RecordWithLinks

    RecordWithLinks(
        id="us_rc_YOUR_ID",
        values={
            "firstName": CellValueWithLinks(
                value="John",
                messages=[],
                valid=True,
                updated_at=datetime.datetime.fromisoformat(
                    "2023-11-20 16:59:40.286000+00:00",
                ),
            ),
            "lastName": CellValueWithLinks(
                value="Smith",
                messages=[],
                valid=True,
                updated_at=datetime.datetime.fromisoformat(
                    "2023-11-20 16:59:40.286000+00:00",
                ),
            ),
            "email": CellValueWithLinks(
                value="john.smith@example.com",
                messages=[],
                valid=True,
                updated_at=datetime.datetime.fromisoformat(
                    "2023-11-20 16:59:40.286000+00:00",
                ),
            ),
        },
        valid=True,
        metadata={},
        config=RecordConfig(),
    )
    """

    id: RecordId
    values: RecordDataWithLinks
    valid: typing.Optional[bool] = None
    messages: typing.Optional[typing.List[ValidationMessage]] = None
    metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = None
    config: typing.Optional[RecordConfig] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
