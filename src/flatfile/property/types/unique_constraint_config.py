# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ...core.serialization import FieldMetadata
import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class UniqueConstraintConfig(UniversalBaseModel):
    case_sensitive: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="caseSensitive")] = (
        pydantic.Field(default=None)
    )
    """
    Ignore casing when determining uniqueness
    """

    ignore_empty: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="ignoreEmpty")] = (
        pydantic.Field(default=None)
    )
    """
    Do not flag empty values as duplicate
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
