# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ...core.serialization import FieldMetadata
import pydantic
from .enum_property_option import EnumPropertyOption
from .enum_property_sort_by import EnumPropertySortBy
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class EnumPropertyConfig(UniversalBaseModel):
    allow_custom: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="allowCustom")] = (
        pydantic.Field(default=None)
    )
    """
    Permit the user to create new options for this specific field.
    """

    options: typing.List[EnumPropertyOption]
    sort_by: typing_extensions.Annotated[typing.Optional[EnumPropertySortBy], FieldMetadata(alias="sortBy")] = (
        pydantic.Field(default=None)
    )
    """
    Sort the options by the value of this property. Defaults to `label`.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
