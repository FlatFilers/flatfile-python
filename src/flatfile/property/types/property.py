# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ...core.pydantic_utilities import UniversalBaseModel
import typing
from .string_config import StringConfig
from .constraint import Constraint
from .field_appearance import FieldAppearance
from ...commons.types.action import Action
import typing_extensions
from ...core.serialization import FieldMetadata
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from .number_config import NumberConfig
from .boolean_property_config import BooleanPropertyConfig
from .enum_property_config import EnumPropertyConfig
from .reference_property_config import ReferencePropertyConfig
from .reference_list_property_config import ReferenceListPropertyConfig


class Property_String(UniversalBaseModel):
    """
    Examples
    --------
    from flatfile.property import (
        Constraint_Unique,
        Property_String,
        StringConfig,
        UniqueConstraintConfig,
    )

    Property_String(
        key="code",
        label="Product Code",
        description="Unique identifier defining an individual product.",
        constraints=[
            Constraint_Unique(
                config=UniqueConstraintConfig(
                    case_sensitive=False,
                ),
            )
        ],
        config=StringConfig(
            size="tiny",
        ),
    )
    """

    type: typing.Literal["string"] = "string"
    config: typing.Optional[StringConfig] = None
    key: str
    label: typing.Optional[str] = None
    description: typing.Optional[str] = None
    constraints: typing.Optional[typing.List[Constraint]] = None
    readonly: typing.Optional[bool] = None
    appearance: typing.Optional[FieldAppearance] = None
    actions: typing.Optional[typing.List[Action]] = None
    metadata: typing.Optional[typing.Optional[typing.Any]] = None
    treatments: typing.Optional[typing.List[str]] = None
    alternative_names: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="alternativeNames")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Property_Number(UniversalBaseModel):
    """
    Examples
    --------
    from flatfile.property import (
        Constraint_Unique,
        Property_String,
        StringConfig,
        UniqueConstraintConfig,
    )

    Property_String(
        key="code",
        label="Product Code",
        description="Unique identifier defining an individual product.",
        constraints=[
            Constraint_Unique(
                config=UniqueConstraintConfig(
                    case_sensitive=False,
                ),
            )
        ],
        config=StringConfig(
            size="tiny",
        ),
    )
    """

    type: typing.Literal["number"] = "number"
    config: typing.Optional[NumberConfig] = None
    key: str
    label: typing.Optional[str] = None
    description: typing.Optional[str] = None
    constraints: typing.Optional[typing.List[Constraint]] = None
    readonly: typing.Optional[bool] = None
    appearance: typing.Optional[FieldAppearance] = None
    actions: typing.Optional[typing.List[Action]] = None
    metadata: typing.Optional[typing.Optional[typing.Any]] = None
    treatments: typing.Optional[typing.List[str]] = None
    alternative_names: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="alternativeNames")
    ] = None
    is_array: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="isArray")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Property_Boolean(UniversalBaseModel):
    """
    Examples
    --------
    from flatfile.property import (
        Constraint_Unique,
        Property_String,
        StringConfig,
        UniqueConstraintConfig,
    )

    Property_String(
        key="code",
        label="Product Code",
        description="Unique identifier defining an individual product.",
        constraints=[
            Constraint_Unique(
                config=UniqueConstraintConfig(
                    case_sensitive=False,
                ),
            )
        ],
        config=StringConfig(
            size="tiny",
        ),
    )
    """

    type: typing.Literal["boolean"] = "boolean"
    config: typing.Optional[BooleanPropertyConfig] = None
    key: str
    label: typing.Optional[str] = None
    description: typing.Optional[str] = None
    constraints: typing.Optional[typing.List[Constraint]] = None
    readonly: typing.Optional[bool] = None
    appearance: typing.Optional[FieldAppearance] = None
    actions: typing.Optional[typing.List[Action]] = None
    metadata: typing.Optional[typing.Optional[typing.Any]] = None
    treatments: typing.Optional[typing.List[str]] = None
    alternative_names: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="alternativeNames")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Property_Date(UniversalBaseModel):
    """
    Examples
    --------
    from flatfile.property import (
        Constraint_Unique,
        Property_String,
        StringConfig,
        UniqueConstraintConfig,
    )

    Property_String(
        key="code",
        label="Product Code",
        description="Unique identifier defining an individual product.",
        constraints=[
            Constraint_Unique(
                config=UniqueConstraintConfig(
                    case_sensitive=False,
                ),
            )
        ],
        config=StringConfig(
            size="tiny",
        ),
    )
    """

    type: typing.Literal["date"] = "date"
    key: str
    label: typing.Optional[str] = None
    description: typing.Optional[str] = None
    constraints: typing.Optional[typing.List[Constraint]] = None
    readonly: typing.Optional[bool] = None
    appearance: typing.Optional[FieldAppearance] = None
    actions: typing.Optional[typing.List[Action]] = None
    metadata: typing.Optional[typing.Optional[typing.Any]] = None
    treatments: typing.Optional[typing.List[str]] = None
    alternative_names: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="alternativeNames")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Property_Enum(UniversalBaseModel):
    """
    Examples
    --------
    from flatfile.property import (
        Constraint_Unique,
        Property_String,
        StringConfig,
        UniqueConstraintConfig,
    )

    Property_String(
        key="code",
        label="Product Code",
        description="Unique identifier defining an individual product.",
        constraints=[
            Constraint_Unique(
                config=UniqueConstraintConfig(
                    case_sensitive=False,
                ),
            )
        ],
        config=StringConfig(
            size="tiny",
        ),
    )
    """

    type: typing.Literal["enum"] = "enum"
    multi: typing.Optional[bool] = None
    config: EnumPropertyConfig
    key: str
    label: typing.Optional[str] = None
    description: typing.Optional[str] = None
    constraints: typing.Optional[typing.List[Constraint]] = None
    readonly: typing.Optional[bool] = None
    appearance: typing.Optional[FieldAppearance] = None
    actions: typing.Optional[typing.List[Action]] = None
    metadata: typing.Optional[typing.Optional[typing.Any]] = None
    treatments: typing.Optional[typing.List[str]] = None
    alternative_names: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="alternativeNames")
    ] = None
    is_array: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="isArray")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Property_Reference(UniversalBaseModel):
    """
    Examples
    --------
    from flatfile.property import (
        Constraint_Unique,
        Property_String,
        StringConfig,
        UniqueConstraintConfig,
    )

    Property_String(
        key="code",
        label="Product Code",
        description="Unique identifier defining an individual product.",
        constraints=[
            Constraint_Unique(
                config=UniqueConstraintConfig(
                    case_sensitive=False,
                ),
            )
        ],
        config=StringConfig(
            size="tiny",
        ),
    )
    """

    type: typing.Literal["reference"] = "reference"
    config: ReferencePropertyConfig
    key: str
    label: typing.Optional[str] = None
    description: typing.Optional[str] = None
    constraints: typing.Optional[typing.List[Constraint]] = None
    readonly: typing.Optional[bool] = None
    appearance: typing.Optional[FieldAppearance] = None
    actions: typing.Optional[typing.List[Action]] = None
    metadata: typing.Optional[typing.Optional[typing.Any]] = None
    treatments: typing.Optional[typing.List[str]] = None
    alternative_names: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="alternativeNames")
    ] = None
    is_array: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="isArray")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Property_ReferenceList(UniversalBaseModel):
    """
    Examples
    --------
    from flatfile.property import (
        Constraint_Unique,
        Property_String,
        StringConfig,
        UniqueConstraintConfig,
    )

    Property_String(
        key="code",
        label="Product Code",
        description="Unique identifier defining an individual product.",
        constraints=[
            Constraint_Unique(
                config=UniqueConstraintConfig(
                    case_sensitive=False,
                ),
            )
        ],
        config=StringConfig(
            size="tiny",
        ),
    )
    """

    type: typing.Literal["reference-list"] = "reference-list"
    config: ReferenceListPropertyConfig
    key: str
    label: typing.Optional[str] = None
    description: typing.Optional[str] = None
    constraints: typing.Optional[typing.List[Constraint]] = None
    readonly: typing.Optional[bool] = None
    appearance: typing.Optional[FieldAppearance] = None
    actions: typing.Optional[typing.List[Action]] = None
    metadata: typing.Optional[typing.Optional[typing.Any]] = None
    treatments: typing.Optional[typing.List[str]] = None
    alternative_names: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="alternativeNames")
    ] = None
    is_array: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="isArray")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Property_StringList(UniversalBaseModel):
    """
    Examples
    --------
    from flatfile.property import (
        Constraint_Unique,
        Property_String,
        StringConfig,
        UniqueConstraintConfig,
    )

    Property_String(
        key="code",
        label="Product Code",
        description="Unique identifier defining an individual product.",
        constraints=[
            Constraint_Unique(
                config=UniqueConstraintConfig(
                    case_sensitive=False,
                ),
            )
        ],
        config=StringConfig(
            size="tiny",
        ),
    )
    """

    type: typing.Literal["string-list"] = "string-list"
    key: str
    label: typing.Optional[str] = None
    description: typing.Optional[str] = None
    constraints: typing.Optional[typing.List[Constraint]] = None
    readonly: typing.Optional[bool] = None
    appearance: typing.Optional[FieldAppearance] = None
    actions: typing.Optional[typing.List[Action]] = None
    metadata: typing.Optional[typing.Optional[typing.Any]] = None
    treatments: typing.Optional[typing.List[str]] = None
    alternative_names: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="alternativeNames")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Property_EnumList(UniversalBaseModel):
    """
    Examples
    --------
    from flatfile.property import (
        Constraint_Unique,
        Property_String,
        StringConfig,
        UniqueConstraintConfig,
    )

    Property_String(
        key="code",
        label="Product Code",
        description="Unique identifier defining an individual product.",
        constraints=[
            Constraint_Unique(
                config=UniqueConstraintConfig(
                    case_sensitive=False,
                ),
            )
        ],
        config=StringConfig(
            size="tiny",
        ),
    )
    """

    type: typing.Literal["enum-list"] = "enum-list"
    config: EnumPropertyConfig
    key: str
    label: typing.Optional[str] = None
    description: typing.Optional[str] = None
    constraints: typing.Optional[typing.List[Constraint]] = None
    readonly: typing.Optional[bool] = None
    appearance: typing.Optional[FieldAppearance] = None
    actions: typing.Optional[typing.List[Action]] = None
    metadata: typing.Optional[typing.Optional[typing.Any]] = None
    treatments: typing.Optional[typing.List[str]] = None
    alternative_names: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="alternativeNames")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


"""
from flatfile.property import (
    Constraint_Unique,
    Property_String,
    StringConfig,
    UniqueConstraintConfig,
)

Property_String(
    key="code",
    label="Product Code",
    description="Unique identifier defining an individual product.",
    constraints=[
        Constraint_Unique(
            config=UniqueConstraintConfig(
                case_sensitive=False,
            ),
        )
    ],
    config=StringConfig(
        size="tiny",
    ),
)
"""
Property = typing.Union[
    Property_String,
    Property_Number,
    Property_Boolean,
    Property_Date,
    Property_Enum,
    Property_Reference,
    Property_ReferenceList,
    Property_StringList,
    Property_EnumList,
]
