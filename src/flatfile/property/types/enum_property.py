# This file was auto-generated by Fern from our API Definition.

from .base_property import BaseProperty
from .arrayable_property import ArrayableProperty
import typing
import pydantic
from .enum_property_config import EnumPropertyConfig
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class EnumProperty(BaseProperty, ArrayableProperty):
    """
    Defines an enumerated list of options for the user to select from. Matching tooling attempts to resolve incoming data assigment to a valid option. The maximum number of options for this list is `100`. For larger lists, users should use the reference or future `lookup` types.
    """

    multi: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Will allow multiple values and store / provide the values in an array if set. Not all field types support arrays.
    """

    config: EnumPropertyConfig

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
