# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
from .resolve_type import ResolveType
import typing_extensions
from .resolve_to import ResolveTo
from ...core.serialization import FieldMetadata
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class Resolve(UniversalBaseModel):
    """
    Conflict resolutions for a record
    """

    field: typing.Optional[str] = None
    type: typing.Optional[ResolveType] = None
    resolve_to: typing_extensions.Annotated[typing.Optional[ResolveTo], FieldMetadata(alias="resolveTo")] = None
    clip_value_reference: typing.Optional[str] = None
    main_value_reference: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
