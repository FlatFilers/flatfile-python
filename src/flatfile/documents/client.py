# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..commons.types.space_id import SpaceId
from ..core.request_options import RequestOptions
from .types.list_documents_response import ListDocumentsResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import parse_obj_as
from ..commons.errors.bad_request_error import BadRequestError
from ..commons.types.errors import Errors
from ..commons.errors.not_found_error import NotFoundError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..commons.types.action import Action
from .types.document_response import DocumentResponse
from ..core.serialization import convert_and_respect_annotation_metadata
from ..commons.types.document_id import DocumentId
from ..commons.types.success import Success
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class DocumentsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self, space_id: SpaceId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ListDocumentsResponse:
        """
        Returns all documents for a space

        Parameters
        ----------
        space_id : SpaceId
            ID of space to return

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListDocumentsResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.documents.list(
            space_id="us_sp_YOUR_ID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"spaces/{jsonable_encoder(space_id)}/documents",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListDocumentsResponse,
                    parse_obj_as(
                        type_=ListDocumentsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self,
        space_id: SpaceId,
        *,
        title: str,
        body: str,
        treatments: typing.Optional[typing.Sequence[str]] = OMIT,
        actions: typing.Optional[typing.Sequence[Action]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DocumentResponse:
        """
        Add a new document to the space

        Parameters
        ----------
        space_id : SpaceId
            ID of space to return

        title : str

        body : str

        treatments : typing.Optional[typing.Sequence[str]]
            Certain treatments will cause your Document to look or behave differently.

        actions : typing.Optional[typing.Sequence[Action]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DocumentResponse

        Examples
        --------
        from flatfile import Flatfile
        from flatfile.commons import Action

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.documents.create(
            space_id="us_sp_YOUR_ID",
            title="My Document 1",
            body="My information",
            actions=[
                Action(
                    operation="submitAction",
                    mode="foreground",
                    label="Submit",
                    description="Submit data to webhook.site",
                    primary=True,
                )
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"spaces/{jsonable_encoder(space_id)}/documents",
            method="POST",
            json={
                "title": title,
                "body": body,
                "treatments": treatments,
                "actions": convert_and_respect_annotation_metadata(
                    object_=actions, annotation=typing.Sequence[Action], direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DocumentResponse,
                    parse_obj_as(
                        type_=DocumentResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self, space_id: SpaceId, document_id: DocumentId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DocumentResponse:
        """
        Returns a single document

        Parameters
        ----------
        space_id : SpaceId
            ID of space to return

        document_id : DocumentId
            ID of document to return

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DocumentResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.documents.get(
            space_id="us_sp_YOUR_ID",
            document_id="us_dc_YOUR_ID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"spaces/{jsonable_encoder(space_id)}/documents/{jsonable_encoder(document_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DocumentResponse,
                    parse_obj_as(
                        type_=DocumentResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        space_id: SpaceId,
        document_id: DocumentId,
        *,
        title: str,
        body: str,
        treatments: typing.Optional[typing.Sequence[str]] = OMIT,
        actions: typing.Optional[typing.Sequence[Action]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DocumentResponse:
        """
        updates a single document, for only the body and title

        Parameters
        ----------
        space_id : SpaceId
            ID of space to return

        document_id : DocumentId
            ID of document to return

        title : str

        body : str

        treatments : typing.Optional[typing.Sequence[str]]
            Certain treatments will cause your Document to look or behave differently.

        actions : typing.Optional[typing.Sequence[Action]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DocumentResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.documents.update(
            space_id="us_sp_YOUR_ID",
            document_id="us_dc_YOUR_ID",
            title="Updated Title",
            body="Updated My information",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"spaces/{jsonable_encoder(space_id)}/documents/{jsonable_encoder(document_id)}",
            method="PATCH",
            json={
                "title": title,
                "body": body,
                "treatments": treatments,
                "actions": convert_and_respect_annotation_metadata(
                    object_=actions, annotation=typing.Sequence[Action], direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DocumentResponse,
                    parse_obj_as(
                        type_=DocumentResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(
        self, space_id: SpaceId, document_id: DocumentId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Success:
        """
        Deletes a single document

        Parameters
        ----------
        space_id : SpaceId
            ID of space to return

        document_id : DocumentId
            ID of document to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Success

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.documents.delete(
            space_id="spaceId",
            document_id="documentId",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"spaces/{jsonable_encoder(space_id)}/documents/{jsonable_encoder(document_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Success,
                    parse_obj_as(
                        type_=Success,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncDocumentsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self, space_id: SpaceId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ListDocumentsResponse:
        """
        Returns all documents for a space

        Parameters
        ----------
        space_id : SpaceId
            ID of space to return

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListDocumentsResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.documents.list(
                space_id="us_sp_YOUR_ID",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"spaces/{jsonable_encoder(space_id)}/documents",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListDocumentsResponse,
                    parse_obj_as(
                        type_=ListDocumentsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self,
        space_id: SpaceId,
        *,
        title: str,
        body: str,
        treatments: typing.Optional[typing.Sequence[str]] = OMIT,
        actions: typing.Optional[typing.Sequence[Action]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DocumentResponse:
        """
        Add a new document to the space

        Parameters
        ----------
        space_id : SpaceId
            ID of space to return

        title : str

        body : str

        treatments : typing.Optional[typing.Sequence[str]]
            Certain treatments will cause your Document to look or behave differently.

        actions : typing.Optional[typing.Sequence[Action]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DocumentResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile
        from flatfile.commons import Action

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.documents.create(
                space_id="us_sp_YOUR_ID",
                title="My Document 1",
                body="My information",
                actions=[
                    Action(
                        operation="submitAction",
                        mode="foreground",
                        label="Submit",
                        description="Submit data to webhook.site",
                        primary=True,
                    )
                ],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"spaces/{jsonable_encoder(space_id)}/documents",
            method="POST",
            json={
                "title": title,
                "body": body,
                "treatments": treatments,
                "actions": convert_and_respect_annotation_metadata(
                    object_=actions, annotation=typing.Sequence[Action], direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DocumentResponse,
                    parse_obj_as(
                        type_=DocumentResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self, space_id: SpaceId, document_id: DocumentId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DocumentResponse:
        """
        Returns a single document

        Parameters
        ----------
        space_id : SpaceId
            ID of space to return

        document_id : DocumentId
            ID of document to return

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DocumentResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.documents.get(
                space_id="us_sp_YOUR_ID",
                document_id="us_dc_YOUR_ID",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"spaces/{jsonable_encoder(space_id)}/documents/{jsonable_encoder(document_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DocumentResponse,
                    parse_obj_as(
                        type_=DocumentResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        space_id: SpaceId,
        document_id: DocumentId,
        *,
        title: str,
        body: str,
        treatments: typing.Optional[typing.Sequence[str]] = OMIT,
        actions: typing.Optional[typing.Sequence[Action]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DocumentResponse:
        """
        updates a single document, for only the body and title

        Parameters
        ----------
        space_id : SpaceId
            ID of space to return

        document_id : DocumentId
            ID of document to return

        title : str

        body : str

        treatments : typing.Optional[typing.Sequence[str]]
            Certain treatments will cause your Document to look or behave differently.

        actions : typing.Optional[typing.Sequence[Action]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DocumentResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.documents.update(
                space_id="us_sp_YOUR_ID",
                document_id="us_dc_YOUR_ID",
                title="Updated Title",
                body="Updated My information",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"spaces/{jsonable_encoder(space_id)}/documents/{jsonable_encoder(document_id)}",
            method="PATCH",
            json={
                "title": title,
                "body": body,
                "treatments": treatments,
                "actions": convert_and_respect_annotation_metadata(
                    object_=actions, annotation=typing.Sequence[Action], direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DocumentResponse,
                    parse_obj_as(
                        type_=DocumentResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(
        self, space_id: SpaceId, document_id: DocumentId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Success:
        """
        Deletes a single document

        Parameters
        ----------
        space_id : SpaceId
            ID of space to return

        document_id : DocumentId
            ID of document to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Success

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.documents.delete(
                space_id="spaceId",
                document_id="documentId",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"spaces/{jsonable_encoder(space_id)}/documents/{jsonable_encoder(document_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Success,
                    parse_obj_as(
                        type_=Success,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
