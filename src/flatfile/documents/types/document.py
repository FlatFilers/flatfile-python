# This file was auto-generated by Fern from our API Definition.

from .document_config import DocumentConfig
from ...commons.types.document_id import DocumentId
import typing_extensions
import typing
from ...commons.types.space_id import SpaceId
from ...core.serialization import FieldMetadata
from ...commons.types.environment_id import EnvironmentId
import datetime as dt
import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class Document(DocumentConfig):
    """
    A document (markdown components) belong to a space

    Examples
    --------
    import datetime

    from flatfile.commons import Action
    from flatfile.documents import Document

    Document(
        id="us_dc_YOUR_ID",
        space_id="us_sp_YOUR_ID",
        environment_id="us_env_YOUR_ID",
        title="My Document 1",
        body="My information",
        treatments=[],
        actions=[
            Action(
                operation="submitAction",
                mode="foreground",
                label="Submit",
                description="Submit data to webhook.site",
                primary=True,
            )
        ],
        created_at=datetime.datetime.fromisoformat(
            "2022-09-18 00:19:57.007000+00:00",
        ),
        updated_at=datetime.datetime.fromisoformat(
            "2022-09-18 00:19:57.007000+00:00",
        ),
    )
    """

    id: DocumentId
    space_id: typing_extensions.Annotated[typing.Optional[SpaceId], FieldMetadata(alias="spaceId")] = None
    environment_id: typing_extensions.Annotated[
        typing.Optional[EnvironmentId], FieldMetadata(alias="environmentId")
    ] = None
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")] = pydantic.Field()
    """
    Date the document was created
    """

    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")] = pydantic.Field()
    """
    Date the document was last updated
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
