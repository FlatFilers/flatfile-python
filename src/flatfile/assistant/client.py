# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .types.prompt_type_query_enum import PromptTypeQueryEnum
from ..core.request_options import RequestOptions
from .types.prompts_response import PromptsResponse
from ..core.pydantic_utilities import parse_obj_as
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..commons.types.prompt_id import PromptId
from .types.prompt_response import PromptResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..commons.types.environment_id import EnvironmentId
from ..commons.types.space_id import SpaceId
from .types.prompt_type_enum import PromptTypeEnum
from ..commons.types.success import Success
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class AssistantClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        prompt_type: typing.Optional[PromptTypeQueryEnum] = None,
        page_size: typing.Optional[int] = None,
        page_number: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PromptsResponse:
        """
        Returns prompts created by user

        Parameters
        ----------
        prompt_type : typing.Optional[PromptTypeQueryEnum]
            Type of prompt (default AI_ASSIST)

        page_size : typing.Optional[int]
            Number of prompts to return in a page (default 7)

        page_number : typing.Optional[int]
            Based on pageSize, which page of prompts to return

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PromptsResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.assistant.list()
        """
        _response = self._client_wrapper.httpx_client.request(
            "prompts",
            method="GET",
            params={
                "promptType": prompt_type,
                "pageSize": page_size,
                "pageNumber": page_number,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PromptsResponse,
                    parse_obj_as(
                        type_=PromptsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(self, prompt_id: PromptId, *, request_options: typing.Optional[RequestOptions] = None) -> PromptResponse:
        """
        Returns a prompt

        Parameters
        ----------
        prompt_id : PromptId
            ID of prompts

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PromptResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.assistant.get(
            prompt_id="us_pr_YOUR_ID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"prompts/{jsonable_encoder(prompt_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PromptResponse,
                    parse_obj_as(
                        type_=PromptResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self, prompt_id: PromptId, *, prompt: str, request_options: typing.Optional[RequestOptions] = None
    ) -> PromptResponse:
        """
        Updates a prompt

        Parameters
        ----------
        prompt_id : PromptId
            ID of prompts

        prompt : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PromptResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.assistant.update(
            prompt_id="us_pr_YOUR_ID",
            prompt="Combine first name and last name into a new column called Full Name",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"prompts/{jsonable_encoder(prompt_id)}",
            method="PATCH",
            json={
                "prompt": prompt,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PromptResponse,
                    parse_obj_as(
                        type_=PromptResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self,
        *,
        prompt: str,
        environment_id: EnvironmentId,
        space_id: SpaceId,
        prompt_type: typing.Optional[PromptTypeEnum] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PromptResponse:
        """
        Creates a prompt

        Parameters
        ----------
        prompt : str

        environment_id : EnvironmentId

        space_id : SpaceId

        prompt_type : typing.Optional[PromptTypeEnum]
            Type of prompt; Defaults to AI_ASSIST

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PromptResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.assistant.create(
            prompt="Combine first name and last name into a new column called Full Name",
            environment_id="us_env_YOUR_ID",
            space_id="us_sp_YOUR_ID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "prompts",
            method="POST",
            json={
                "promptType": prompt_type,
                "prompt": prompt,
                "environmentId": environment_id,
                "spaceId": space_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PromptResponse,
                    parse_obj_as(
                        type_=PromptResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(self, prompt_id: PromptId, *, request_options: typing.Optional[RequestOptions] = None) -> Success:
        """
        Deletes a prompts

        Parameters
        ----------
        prompt_id : PromptId
            ID of prompts

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Success

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.assistant.delete(
            prompt_id="us_pr_YOUR_ID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"prompts/{jsonable_encoder(prompt_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Success,
                    parse_obj_as(
                        type_=Success,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncAssistantClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        prompt_type: typing.Optional[PromptTypeQueryEnum] = None,
        page_size: typing.Optional[int] = None,
        page_number: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PromptsResponse:
        """
        Returns prompts created by user

        Parameters
        ----------
        prompt_type : typing.Optional[PromptTypeQueryEnum]
            Type of prompt (default AI_ASSIST)

        page_size : typing.Optional[int]
            Number of prompts to return in a page (default 7)

        page_number : typing.Optional[int]
            Based on pageSize, which page of prompts to return

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PromptsResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.assistant.list()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "prompts",
            method="GET",
            params={
                "promptType": prompt_type,
                "pageSize": page_size,
                "pageNumber": page_number,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PromptsResponse,
                    parse_obj_as(
                        type_=PromptsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self, prompt_id: PromptId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> PromptResponse:
        """
        Returns a prompt

        Parameters
        ----------
        prompt_id : PromptId
            ID of prompts

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PromptResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.assistant.get(
                prompt_id="us_pr_YOUR_ID",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"prompts/{jsonable_encoder(prompt_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PromptResponse,
                    parse_obj_as(
                        type_=PromptResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self, prompt_id: PromptId, *, prompt: str, request_options: typing.Optional[RequestOptions] = None
    ) -> PromptResponse:
        """
        Updates a prompt

        Parameters
        ----------
        prompt_id : PromptId
            ID of prompts

        prompt : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PromptResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.assistant.update(
                prompt_id="us_pr_YOUR_ID",
                prompt="Combine first name and last name into a new column called Full Name",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"prompts/{jsonable_encoder(prompt_id)}",
            method="PATCH",
            json={
                "prompt": prompt,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PromptResponse,
                    parse_obj_as(
                        type_=PromptResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self,
        *,
        prompt: str,
        environment_id: EnvironmentId,
        space_id: SpaceId,
        prompt_type: typing.Optional[PromptTypeEnum] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PromptResponse:
        """
        Creates a prompt

        Parameters
        ----------
        prompt : str

        environment_id : EnvironmentId

        space_id : SpaceId

        prompt_type : typing.Optional[PromptTypeEnum]
            Type of prompt; Defaults to AI_ASSIST

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PromptResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.assistant.create(
                prompt="Combine first name and last name into a new column called Full Name",
                environment_id="us_env_YOUR_ID",
                space_id="us_sp_YOUR_ID",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "prompts",
            method="POST",
            json={
                "promptType": prompt_type,
                "prompt": prompt,
                "environmentId": environment_id,
                "spaceId": space_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PromptResponse,
                    parse_obj_as(
                        type_=PromptResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(self, prompt_id: PromptId, *, request_options: typing.Optional[RequestOptions] = None) -> Success:
        """
        Deletes a prompts

        Parameters
        ----------
        prompt_id : PromptId
            ID of prompts

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Success

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.assistant.delete(
                prompt_id="us_pr_YOUR_ID",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"prompts/{jsonable_encoder(prompt_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Success,
                    parse_obj_as(
                        type_=Success,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
