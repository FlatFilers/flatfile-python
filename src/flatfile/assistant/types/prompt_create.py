# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from .prompt_type_enum import PromptTypeEnum
from ...core.serialization import FieldMetadata
import pydantic
from ...commons.types.environment_id import EnvironmentId
from ...commons.types.space_id import SpaceId
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class PromptCreate(UniversalBaseModel):
    """
    Create a prompts

    Examples
    --------
    from flatfile.assistant import PromptCreate

    PromptCreate(
        prompt="Combine first name and last name into a new column called Full Name",
        environment_id="us_env_YOUR_ID",
        space_id="us_sp_YOUR_ID",
    )
    """

    prompt_type: typing_extensions.Annotated[typing.Optional[PromptTypeEnum], FieldMetadata(alias="promptType")] = (
        pydantic.Field(default=None)
    )
    """
    Type of prompt; Defaults to AI_ASSIST
    """

    prompt: str
    environment_id: typing_extensions.Annotated[EnvironmentId, FieldMetadata(alias="environmentId")]
    space_id: typing_extensions.Annotated[SpaceId, FieldMetadata(alias="spaceId")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
