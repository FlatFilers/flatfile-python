# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
from ...commons.types.prompt_id import PromptId
import typing_extensions
from ...core.serialization import FieldMetadata
import pydantic
from ...commons.types.account_id import AccountId
import typing
from ...commons.types.environment_id import EnvironmentId
from ...commons.types.space_id import SpaceId
from .prompt_type_enum import PromptTypeEnum
import datetime as dt
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class Prompt(UniversalBaseModel):
    """
    Examples
    --------
    import datetime

    from flatfile.assistant import Prompt

    Prompt(
        id="us_pr_YOUR_ID",
        created_by_id="us_usr_YOUR_ID",
        account_id="us_acc_YOUR_ID",
        environment_id="us_env_YOUR_ID",
        space_id="us_sp_YOUR_ID",
        prompt_type="AI_ASSIST",
        prompt="Combine first name and last name into a new column called Full Name",
        created_at=datetime.datetime.fromisoformat(
            "2021-01-01 00:00:00+00:00",
        ),
        updated_at=datetime.datetime.fromisoformat(
            "2021-01-01 00:00:00+00:00",
        ),
    )
    """

    id: PromptId
    created_by_id: typing_extensions.Annotated[str, FieldMetadata(alias="createdById")] = pydantic.Field()
    """
    ID of the user/guest who created the prompt
    """

    account_id: typing_extensions.Annotated[AccountId, FieldMetadata(alias="accountId")]
    environment_id: typing_extensions.Annotated[
        typing.Optional[EnvironmentId], FieldMetadata(alias="environmentId")
    ] = None
    space_id: typing_extensions.Annotated[typing.Optional[SpaceId], FieldMetadata(alias="spaceId")] = None
    prompt_type: typing_extensions.Annotated[PromptTypeEnum, FieldMetadata(alias="promptType")] = pydantic.Field()
    """
    Type of prompt
    """

    prompt: str = pydantic.Field()
    """
    Text for prompts for AI Assist
    """

    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
