# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..commons.types.sheet_id import SheetId
from ..core.request_options import RequestOptions
from .types.snapshot_response import SnapshotResponse
from ..core.pydantic_utilities import parse_obj_as
from ..commons.errors.bad_request_error import BadRequestError
from ..commons.types.errors import Errors
from ..commons.errors.not_found_error import NotFoundError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from .types.snapshots_response import SnapshotsResponse
from ..commons.types.snapshot_id import SnapshotId
from ..core.jsonable_encoder import jsonable_encoder
from ..commons.types.success import Success
from .types.restore_options import RestoreOptions
from ..core.serialization import convert_and_respect_annotation_metadata
from .types.change_type import ChangeType
from ..records.types.diff_records_response import DiffRecordsResponse
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class SnapshotsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create_snapshot(
        self,
        *,
        sheet_id: SheetId,
        label: typing.Optional[str] = OMIT,
        thread_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SnapshotResponse:
        """
        Creates a snapshot of a sheet

        Parameters
        ----------
        sheet_id : SheetId
            ID of sheet

        label : typing.Optional[str]
            Label for the snapshot

        thread_id : typing.Optional[str]
            ThreadId for the snapshot

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SnapshotResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.snapshots.create_snapshot(
            sheet_id="us_sh_YOUR_ID",
            label="My snapshot",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "snapshots",
            method="POST",
            json={
                "sheetId": sheet_id,
                "label": label,
                "threadId": thread_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SnapshotResponse,
                    parse_obj_as(
                        type_=SnapshotResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_snapshots(
        self,
        *,
        sheet_id: SheetId,
        thread_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SnapshotsResponse:
        """
        List all snapshots of a sheet

        Parameters
        ----------
        sheet_id : SheetId
            ID of sheet

        thread_id : typing.Optional[str]
            ThreadId to filter snapshots by

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SnapshotsResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.snapshots.list_snapshots(
            sheet_id="us_sh_YOUR_ID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "snapshots",
            method="GET",
            params={
                "sheetId": sheet_id,
                "threadId": thread_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SnapshotsResponse,
                    parse_obj_as(
                        type_=SnapshotsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_snapshot(
        self, snapshot_id: SnapshotId, *, include_summary: bool, request_options: typing.Optional[RequestOptions] = None
    ) -> SnapshotResponse:
        """
        Gets a snapshot of a sheet

        Parameters
        ----------
        snapshot_id : SnapshotId
            ID of snapshot

        include_summary : bool
            Whether to include a summary in the snapshot response

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SnapshotResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.snapshots.get_snapshot(
            snapshot_id="us_ss_YOUR_ID",
            include_summary=True,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"snapshots/{jsonable_encoder(snapshot_id)}",
            method="GET",
            params={
                "includeSummary": include_summary,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SnapshotResponse,
                    parse_obj_as(
                        type_=SnapshotResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_snapshot(
        self, snapshot_id: SnapshotId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Success:
        """
        Deletes a snapshot of a sheet

        Parameters
        ----------
        snapshot_id : SnapshotId
            ID of snapshot

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Success

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.snapshots.delete_snapshot(
            snapshot_id="us_ss_YOUR_ID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"snapshots/{jsonable_encoder(snapshot_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Success,
                    parse_obj_as(
                        type_=Success,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def restore_snapshot(
        self,
        snapshot_id: SnapshotId,
        *,
        request: typing.Optional[RestoreOptions] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SnapshotResponse:
        """
        Restores a snapshot of a sheet

        Parameters
        ----------
        snapshot_id : SnapshotId
            ID of snapshot

        request : typing.Optional[RestoreOptions]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SnapshotResponse

        Examples
        --------
        from flatfile import Flatfile
        from flatfile.snapshots import RestoreOptions

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.snapshots.restore_snapshot(
            snapshot_id="us_ss_YOUR_ID",
            request=RestoreOptions(
                created=True,
                updated=True,
                deleted=True,
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"snapshots/{jsonable_encoder(snapshot_id)}/restore",
            method="POST",
            json=convert_and_respect_annotation_metadata(object_=request, annotation=RestoreOptions, direction="write"),
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SnapshotResponse,
                    parse_obj_as(
                        type_=SnapshotResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_snapshot_records(
        self,
        snapshot_id: SnapshotId,
        *,
        page_size: typing.Optional[int] = None,
        page_number: typing.Optional[int] = None,
        change_type: typing.Optional[ChangeType] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DiffRecordsResponse:
        """
        Gets records from a snapshot of a sheet

        Parameters
        ----------
        snapshot_id : SnapshotId
            ID of snapshot

        page_size : typing.Optional[int]
            Number of records to return in a page

        page_number : typing.Optional[int]
            Based on pageSize, which page of records to return

        change_type : typing.Optional[ChangeType]
            Filter records by change type

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DiffRecordsResponse

        Examples
        --------
        from flatfile import Flatfile

        client = Flatfile(
            token="YOUR_TOKEN",
        )
        client.snapshots.get_snapshot_records(
            snapshot_id="us_ss_YOUR_ID",
            page_size=10,
            page_number=1,
            change_type="createdSince",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"snapshots/{jsonable_encoder(snapshot_id)}/records",
            method="GET",
            params={
                "pageSize": page_size,
                "pageNumber": page_number,
                "changeType": change_type,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DiffRecordsResponse,
                    parse_obj_as(
                        type_=DiffRecordsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncSnapshotsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create_snapshot(
        self,
        *,
        sheet_id: SheetId,
        label: typing.Optional[str] = OMIT,
        thread_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SnapshotResponse:
        """
        Creates a snapshot of a sheet

        Parameters
        ----------
        sheet_id : SheetId
            ID of sheet

        label : typing.Optional[str]
            Label for the snapshot

        thread_id : typing.Optional[str]
            ThreadId for the snapshot

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SnapshotResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.snapshots.create_snapshot(
                sheet_id="us_sh_YOUR_ID",
                label="My snapshot",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "snapshots",
            method="POST",
            json={
                "sheetId": sheet_id,
                "label": label,
                "threadId": thread_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SnapshotResponse,
                    parse_obj_as(
                        type_=SnapshotResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_snapshots(
        self,
        *,
        sheet_id: SheetId,
        thread_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SnapshotsResponse:
        """
        List all snapshots of a sheet

        Parameters
        ----------
        sheet_id : SheetId
            ID of sheet

        thread_id : typing.Optional[str]
            ThreadId to filter snapshots by

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SnapshotsResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.snapshots.list_snapshots(
                sheet_id="us_sh_YOUR_ID",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "snapshots",
            method="GET",
            params={
                "sheetId": sheet_id,
                "threadId": thread_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SnapshotsResponse,
                    parse_obj_as(
                        type_=SnapshotsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_snapshot(
        self, snapshot_id: SnapshotId, *, include_summary: bool, request_options: typing.Optional[RequestOptions] = None
    ) -> SnapshotResponse:
        """
        Gets a snapshot of a sheet

        Parameters
        ----------
        snapshot_id : SnapshotId
            ID of snapshot

        include_summary : bool
            Whether to include a summary in the snapshot response

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SnapshotResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.snapshots.get_snapshot(
                snapshot_id="us_ss_YOUR_ID",
                include_summary=True,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"snapshots/{jsonable_encoder(snapshot_id)}",
            method="GET",
            params={
                "includeSummary": include_summary,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SnapshotResponse,
                    parse_obj_as(
                        type_=SnapshotResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_snapshot(
        self, snapshot_id: SnapshotId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Success:
        """
        Deletes a snapshot of a sheet

        Parameters
        ----------
        snapshot_id : SnapshotId
            ID of snapshot

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Success

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.snapshots.delete_snapshot(
                snapshot_id="us_ss_YOUR_ID",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"snapshots/{jsonable_encoder(snapshot_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Success,
                    parse_obj_as(
                        type_=Success,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def restore_snapshot(
        self,
        snapshot_id: SnapshotId,
        *,
        request: typing.Optional[RestoreOptions] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SnapshotResponse:
        """
        Restores a snapshot of a sheet

        Parameters
        ----------
        snapshot_id : SnapshotId
            ID of snapshot

        request : typing.Optional[RestoreOptions]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SnapshotResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile
        from flatfile.snapshots import RestoreOptions

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.snapshots.restore_snapshot(
                snapshot_id="us_ss_YOUR_ID",
                request=RestoreOptions(
                    created=True,
                    updated=True,
                    deleted=True,
                ),
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"snapshots/{jsonable_encoder(snapshot_id)}/restore",
            method="POST",
            json=convert_and_respect_annotation_metadata(object_=request, annotation=RestoreOptions, direction="write"),
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SnapshotResponse,
                    parse_obj_as(
                        type_=SnapshotResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_snapshot_records(
        self,
        snapshot_id: SnapshotId,
        *,
        page_size: typing.Optional[int] = None,
        page_number: typing.Optional[int] = None,
        change_type: typing.Optional[ChangeType] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DiffRecordsResponse:
        """
        Gets records from a snapshot of a sheet

        Parameters
        ----------
        snapshot_id : SnapshotId
            ID of snapshot

        page_size : typing.Optional[int]
            Number of records to return in a page

        page_number : typing.Optional[int]
            Based on pageSize, which page of records to return

        change_type : typing.Optional[ChangeType]
            Filter records by change type

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DiffRecordsResponse

        Examples
        --------
        import asyncio

        from flatfile import AsyncFlatfile

        client = AsyncFlatfile(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.snapshots.get_snapshot_records(
                snapshot_id="us_ss_YOUR_ID",
                page_size=10,
                page_number=1,
                change_type="createdSince",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"snapshots/{jsonable_encoder(snapshot_id)}/records",
            method="GET",
            params={
                "pageSize": page_size,
                "pageNumber": page_number,
                "changeType": change_type,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DiffRecordsResponse,
                    parse_obj_as(
                        type_=DiffRecordsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        Errors,
                        parse_obj_as(
                            type_=Errors,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
