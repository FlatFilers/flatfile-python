# This file was auto-generated by Fern from our API Definition.

from .internal_space_config_base import InternalSpaceConfigBase
from ...commons.types.space_id import SpaceId
import typing_extensions
import typing
from ...core.serialization import FieldMetadata
import pydantic
from ...commons.types.user_id import UserId
import datetime as dt
from .space_size import SpaceSize
from ...environments.types.guest_authentication_enum import GuestAuthenticationEnum
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class Space(InternalSpaceConfigBase):
    """
    A place to store your workbooks

    Examples
    --------
    import datetime

    from flatfile.spaces import Space

    Space(
        id="us_sp_YOUR_ID",
        name="My First Worbook",
        display_order=1,
        created_at=datetime.datetime.fromisoformat(
            "2021-01-01 00:00:00+00:00",
        ),
        updated_at=datetime.datetime.fromisoformat(
            "2021-01-01 00:00:00+00:00",
        ),
        last_activity_at=datetime.datetime.fromisoformat(
            "2021-01-01 00:00:00+00:00",
        ),
        created_by_user_id="us_usr_YOUR_ID",
        workbooks_count=1,
        files_count=1,
        is_collaborative=True,
        upgraded_at=datetime.datetime.fromisoformat(
            "2021-01-01 00:00:00+00:00",
        ),
        guest_authentication=["magic_link", "shared_link"],
        environment_id="us_env_YOUR_ID",
        primary_workbook_id="us_wb_YOUR_ID",
        labels=[],
    )
    """

    id: SpaceId
    workbooks_count: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="workbooksCount")] = (
        pydantic.Field(default=None)
    )
    """
    Amount of workbooks in the space
    """

    files_count: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="filesCount")] = pydantic.Field(
        default=None
    )
    """
    Amount of files in the space
    """

    created_by_user_id: typing_extensions.Annotated[typing.Optional[UserId], FieldMetadata(alias="createdByUserId")] = (
        None
    )
    created_by_user_name: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="createdByUserName")
    ] = pydantic.Field(default=None)
    """
    User name who created space
    """

    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")] = pydantic.Field()
    """
    Date when space was created
    """

    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")] = pydantic.Field()
    """
    Date when space was updated
    """

    expired_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="expiredAt")] = (
        pydantic.Field(default=None)
    )
    """
    Date when space was expired
    """

    last_activity_at: typing_extensions.Annotated[
        typing.Optional[dt.datetime], FieldMetadata(alias="lastActivityAt")
    ] = pydantic.Field(default=None)
    """
    This date marks the most recent activity within the space, tracking actions to the second. Activities include creating or updating records in a sheet, uploading files, or modifying a workbook's configuration.
    """

    guest_link: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="guestLink")] = pydantic.Field(
        default=None
    )
    """
    Guest link to the space
    """

    name: str = pydantic.Field()
    """
    The name of the space
    """

    display_order: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="displayOrder")] = (
        pydantic.Field(default=None)
    )
    """
    The display order
    """

    access_token: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="accessToken")] = (
        pydantic.Field(default=None)
    )
    """
    Access token for the space
    """

    is_collaborative: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="isCollaborative")] = (
        pydantic.Field(default=None)
    )
    """
    Flag for collaborative (project) spaces
    """

    size: typing.Optional[SpaceSize] = pydantic.Field(default=None)
    """
    Size information for the space
    """

    upgraded_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="upgradedAt")] = (
        pydantic.Field(default=None)
    )
    """
    Date when the space was upgraded
    """

    guest_authentication: typing_extensions.Annotated[
        typing.List[GuestAuthenticationEnum], FieldMetadata(alias="guestAuthentication")
    ] = pydantic.Field()
    """
    Type of guest authentication
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
