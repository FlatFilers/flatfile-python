# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ...commons.types.space_config_id import SpaceConfigId
from ...core.serialization import FieldMetadata
from ...commons.types.environment_id import EnvironmentId
from ...commons.types.workbook_id import WorkbookId
import pydantic
from .space_settings import SpaceSettings
from ...commons.types.action import Action
from .space_access import SpaceAccess
import datetime as dt
from ...commons.types.app_id import AppId
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class InternalSpaceConfigBase(UniversalBaseModel):
    space_config_id: typing_extensions.Annotated[
        typing.Optional[SpaceConfigId], FieldMetadata(alias="spaceConfigId")
    ] = None
    environment_id: typing_extensions.Annotated[
        typing.Optional[EnvironmentId], FieldMetadata(alias="environmentId")
    ] = None
    primary_workbook_id: typing_extensions.Annotated[
        typing.Optional[WorkbookId], FieldMetadata(alias="primaryWorkbookId")
    ] = pydantic.Field(default=None)
    """
    The ID of the primary workbook for the space. This should not be included in create space requests.
    """

    metadata: typing.Optional[typing.Optional[typing.Any]] = pydantic.Field(default=None)
    """
    Metadata for the space
    """

    settings: typing.Optional[SpaceSettings] = pydantic.Field(default=None)
    """
    The Space settings.
    """

    actions: typing.Optional[typing.List[Action]] = None
    access: typing.Optional[typing.List[SpaceAccess]] = None
    auto_configure: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="autoConfigure")] = None
    namespace: typing.Optional[str] = None
    labels: typing.Optional[typing.List[str]] = None
    translations_path: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="translationsPath")] = None
    language_override: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="languageOverride")] = None
    archived_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="archivedAt")] = (
        pydantic.Field(default=None)
    )
    """
    Date when space was archived
    """

    app_id: typing_extensions.Annotated[typing.Optional[AppId], FieldMetadata(alias="appId")] = pydantic.Field(
        default=None
    )
    """
    The ID of the App that space is associated with
    """

    is_app_template: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="isAppTemplate")] = (
        pydantic.Field(default=None)
    )
    """
    Whether the space is an app template. Only one space per app can be an app template.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
