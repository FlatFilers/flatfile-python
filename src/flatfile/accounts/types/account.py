# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
from ...commons.types.account_id import AccountId
import typing
import typing_extensions
from ...core.serialization import FieldMetadata
import datetime as dt
from ...commons.types.app_id import AppId
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class Account(UniversalBaseModel):
    """
    An account

    Examples
    --------
    import datetime

    from flatfile.accounts import Account

    Account(
        id="us_acc_YOUR_ID",
        name="MyAccountName",
        metadata={},
        created_at=datetime.datetime.fromisoformat(
            "2023-10-30 16:59:45.735000+00:00",
        ),
        updated_at=datetime.datetime.fromisoformat(
            "2023-10-30 16:59:45.735000+00:00",
        ),
    )
    """

    id: AccountId
    name: str
    subdomain: typing.Optional[str] = None
    vanity_domain_dashboard: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="vanityDomainDashboard")
    ] = None
    vanity_domain_spaces: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="vanityDomainSpaces")
    ] = None
    embedded_domain_whitelist: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="embeddedDomainWhitelist")
    ] = None
    custom_from_email: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="customFromEmail")] = None
    stripe_customer_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="stripeCustomerId")] = (
        None
    )
    metadata: typing.Dict[str, typing.Optional[typing.Any]]
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")]
    default_app_id: typing_extensions.Annotated[typing.Optional[AppId], FieldMetadata(alias="defaultAppId")] = None
    dashboard: typing.Optional[int] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
