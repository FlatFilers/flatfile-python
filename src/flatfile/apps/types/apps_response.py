# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
from .app import App
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class AppsResponse(UniversalBaseModel):
    """
    Examples
    --------
    import datetime

    from flatfile.apps import App, AppsResponse

    AppsResponse(
        data=[
            App(
                id="us_app_YOUR_ID",
                name="Nightly Data Loads",
                namespace="nightly-data",
                type="CUSTOM",
                entity="Sync",
                entity_plural="Syncs",
                icon='<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi bi-bar-chart-fill" viewBox="0 0 16 16">\n  <path d="M1 11a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v3a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1zm5-4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1zm5-5a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1z"/>\n</svg>',
                metadata={"foo": "bar"},
                environment_filters={
                    "type": ["PROD", "DEV"],
                    "exclude_ids": ["us_env_123456"],
                },
                created_at=datetime.datetime.fromisoformat(
                    "2023-10-30 16:59:45.735000+00:00",
                ),
                updated_at=datetime.datetime.fromisoformat(
                    "2023-10-30 16:59:45.735000+00:00",
                ),
            )
        ],
    )
    """

    data: typing.List[App]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
