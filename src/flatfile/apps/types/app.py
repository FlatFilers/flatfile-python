# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
from ...commons.types.app_id import AppId
from .app_type import AppType
import typing_extensions
from ...core.serialization import FieldMetadata
import typing
import datetime as dt
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class App(UniversalBaseModel):
    """
    An app

    Examples
    --------
    import datetime

    from flatfile.apps import App

    App(
        id="us_app_YOUR_ID",
        name="Nightly Data Loads",
        namespace="nightly-data",
        type="CUSTOM",
        entity="Sync",
        entity_plural="Syncs",
        icon='<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi bi-bar-chart-fill" viewBox="0 0 16 16">\n  <path d="M1 11a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v3a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1zm5-4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1zm5-5a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1z"/>\n</svg>',
        metadata={"foo": "bar"},
        environment_filters={
            "type": ["PROD", "DEV"],
            "exclude_ids": ["us_env_123456"],
        },
        created_at=datetime.datetime.fromisoformat(
            "2023-10-30 16:59:45.735000+00:00",
        ),
        updated_at=datetime.datetime.fromisoformat(
            "2023-10-30 16:59:45.735000+00:00",
        ),
    )
    """

    id: AppId
    name: str
    namespace: str
    type: AppType
    entity: str
    entity_plural: typing_extensions.Annotated[str, FieldMetadata(alias="entityPlural")]
    icon: typing.Optional[str] = None
    metadata: typing.Optional[typing.Any] = None
    environment_filters: typing_extensions.Annotated[
        typing.Optional[typing.Any], FieldMetadata(alias="environmentFilters")
    ] = None
    blueprint: typing.Optional[typing.Optional[typing.Any]] = None
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")]
    deleted_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="deletedAt")] = None
    activated_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="activatedAt")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
