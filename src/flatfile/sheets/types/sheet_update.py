# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
from ...commons.types.sheet_id import SheetId
import pydantic
import typing_extensions
from ...commons.types.workbook_id import WorkbookId
from ...core.serialization import FieldMetadata
from .sheet_config import SheetConfig
import datetime as dt
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class SheetUpdate(UniversalBaseModel):
    """
    Changes to make to an existing sheet
    """

    id: typing.Optional[SheetId] = pydantic.Field(default=None)
    """
    The ID of the Sheet.
    """

    workbook_id: typing_extensions.Annotated[typing.Optional[WorkbookId], FieldMetadata(alias="workbookId")] = (
        pydantic.Field(default=None)
    )
    """
    The ID of the Workbook.
    """

    config: typing.Optional[SheetConfig] = pydantic.Field(default=None)
    """
    Describes shape of data as well as behavior.
    """

    metadata: typing.Optional[typing.Optional[typing.Any]] = pydantic.Field(default=None)
    """
    Useful for any contextual metadata regarding the sheet. Store any valid json
    """

    namespace: typing.Optional[str] = pydantic.Field(default=None)
    """
    The scoped namespace of the Sheet.
    """

    updated_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="updatedAt")] = (
        pydantic.Field(default=None)
    )
    """
    Date the sheet was last updated
    """

    created_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="createdAt")] = (
        pydantic.Field(default=None)
    )
    """
    Date the sheet was created
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
