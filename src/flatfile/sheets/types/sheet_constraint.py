# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ...core.pydantic_utilities import UniversalBaseModel
import typing
import typing_extensions
from ...core.serialization import FieldMetadata
from .composite_unique_constraint_strategy import CompositeUniqueConstraintStrategy
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class SheetConstraint_Unique(UniversalBaseModel):
    type: typing.Literal["unique"] = "unique"
    name: str
    fields: typing.List[str]
    required_fields: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="requiredFields")
    ] = None
    strategy: CompositeUniqueConstraintStrategy

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class SheetConstraint_External(UniversalBaseModel):
    type: typing.Literal["external"] = "external"
    validator: str
    fields: typing.Optional[typing.List[str]] = None
    config: typing.Optional[typing.Optional[typing.Any]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


SheetConstraint = typing.Union[SheetConstraint_Unique, SheetConstraint_External]
