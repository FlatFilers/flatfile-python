# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
from ...commons.types.sheet_id import SheetId
import pydantic
import typing_extensions
from ...commons.types.workbook_id import WorkbookId
from ...core.serialization import FieldMetadata
from .sheet_config import SheetConfig
import typing
import datetime as dt
from ...records.types.record_counts import RecordCounts
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class Sheet(UniversalBaseModel):
    """
    A place to store tabular data

    Examples
    --------
    import datetime

    from flatfile.property import Property_String
    from flatfile.sheets import Sheet, SheetConfig

    Sheet(
        id="us_sh_YOUR_ID",
        workbook_id="us_wb_YOUR_ID",
        name="Contacts",
        slug="contacts",
        config=SheetConfig(
            name="Contacts",
            slug="contacts",
            fields=[
                Property_String(
                    key="firstName",
                    label="First Name",
                ),
                Property_String(
                    key="lastName",
                    label="Last Name",
                ),
                Property_String(
                    key="email",
                    label="Email",
                ),
            ],
            mapping_confidence_threshold=0.5,
        ),
        metadata={"rowHeaders": [4]},
        updated_at=datetime.datetime.fromisoformat(
            "2021-08-31 18:00:00+00:00",
        ),
        created_at=datetime.datetime.fromisoformat(
            "2021-08-31 18:00:00+00:00",
        ),
    )
    """

    id: SheetId = pydantic.Field()
    """
    The ID of the Sheet.
    """

    workbook_id: typing_extensions.Annotated[WorkbookId, FieldMetadata(alias="workbookId")] = pydantic.Field()
    """
    The ID of the Workbook.
    """

    name: str = pydantic.Field()
    """
    The name of the Sheet.
    """

    slug: str = pydantic.Field()
    """
    The slug of the Sheet.
    """

    config: SheetConfig = pydantic.Field()
    """
    Describes shape of data as well as behavior
    """

    metadata: typing.Optional[typing.Optional[typing.Any]] = pydantic.Field(default=None)
    """
    Useful for any contextual metadata regarding the sheet. Store any valid json
    """

    namespace: typing.Optional[str] = pydantic.Field(default=None)
    """
    The scoped namespace of the Sheet.
    """

    locked_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="lockedBy")] = pydantic.Field(
        default=None
    )
    """
    The actor who locked the Sheet.
    """

    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")] = pydantic.Field()
    """
    Date the sheet was last updated
    """

    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")] = pydantic.Field()
    """
    Date the sheet was created
    """

    locked_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="lockedAt")] = (
        pydantic.Field(default=None)
    )
    """
    The time the Sheet was locked.
    """

    record_counts: typing_extensions.Annotated[typing.Optional[RecordCounts], FieldMetadata(alias="recordCounts")] = (
        pydantic.Field(default=None)
    )
    """
    The precomputed counts of records in the Sheet (may not exist).
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
