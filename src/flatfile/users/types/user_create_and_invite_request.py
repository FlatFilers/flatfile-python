# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ...roles.types.assign_actor_role_request import AssignActorRoleRequest
from ...core.serialization import FieldMetadata
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class UserCreateAndInviteRequest(UniversalBaseModel):
    """
    Properties used to create a new user

    Examples
    --------
    from flatfile.roles import AssignActorRoleRequest
    from flatfile.users import UserCreateAndInviteRequest

    UserCreateAndInviteRequest(
        email="john.smith@example.com",
        name="John Smith",
        actor_roles=[
            AssignActorRoleRequest(
                role_id="us_rol_YOUR_ID",
                resource_id="us_acc_YOUR_ID",
            ),
            AssignActorRoleRequest(
                role_id="us_rol_YOUR_ID",
                resource_id="us_env_YOUR_ID",
            ),
        ],
    )
    """

    email: str
    name: str
    actor_roles: typing_extensions.Annotated[typing.List[AssignActorRoleRequest], FieldMetadata(alias="actorRoles")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
