# This file was auto-generated by Fern from our API Definition.

from .user_config import UserConfig
from ...commons.types.user_id import UserId
import typing_extensions
import typing
from ...core.serialization import FieldMetadata
import datetime as dt
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class User(UserConfig):
    """
    Configurations for the user

    Examples
    --------
    import datetime

    from flatfile.users import User

    User(
        id="us_usr_YOUR_ID",
        email="john.smith@example.com",
        name="john.smith",
        account_id="us_acc_YOUR_ID",
        idp="FRONTEGG",
        idp_ref="ab1cf38e-e617-4547-b37d-376a7ac9e554",
        metadata={},
        created_at=datetime.datetime.fromisoformat(
            "2023-10-30 16:59:45.735000+00:00",
        ),
        updated_at=datetime.datetime.fromisoformat(
            "2023-10-30 16:59:45.735000+00:00",
        ),
        last_seen_at=datetime.datetime.fromisoformat(
            "2023-10-30 16:59:45.735000+00:00",
        ),
        dashboard=2,
    )
    """

    id: UserId
    idp: str
    idp_ref: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="idpRef")] = None
    metadata: typing.Dict[str, typing.Optional[typing.Any]]
    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")]
    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")]
    last_seen_at: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="lastSeenAt")] = None
    dashboard: typing.Optional[int] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
