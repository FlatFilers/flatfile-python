# This file was auto-generated by Fern from our API Definition.

import typing
from .environment import FlatfileEnvironment
import httpx
from .core.client_wrapper import SyncClientWrapper
from .accounts.client import AccountsClient
from .actions.client import ActionsClient
from .agent_exports.client import AgentExportsClient
from .agents.client import AgentsClient
from .apps.client import AppsClient
from .assistant.client import AssistantClient
from .auth.client import AuthClient
from .commits.client import CommitsClient
from .data_retention_policies.client import DataRetentionPoliciesClient
from .documents.client import DocumentsClient
from .entitlements.client import EntitlementsClient
from .environments.client import EnvironmentsClient
from .events.client import EventsClient
from .files.client import FilesClient
from .guests.client import GuestsClient
from .jobs.client import JobsClient
from .mapping.client import MappingClient
from .records.client import RecordsClient
from .roles.client import RolesClient
from .secrets.client import SecretsClient
from .sheets.client import SheetsClient
from .snapshots.client import SnapshotsClient
from .spaces.client import SpacesClient
from .users.client import UsersClient
from .versions.client import VersionsClient
from .views.client import ViewsClient
from .workbooks.client import WorkbooksClient
from .core.client_wrapper import AsyncClientWrapper
from .accounts.client import AsyncAccountsClient
from .actions.client import AsyncActionsClient
from .agent_exports.client import AsyncAgentExportsClient
from .agents.client import AsyncAgentsClient
from .apps.client import AsyncAppsClient
from .assistant.client import AsyncAssistantClient
from .auth.client import AsyncAuthClient
from .commits.client import AsyncCommitsClient
from .data_retention_policies.client import AsyncDataRetentionPoliciesClient
from .documents.client import AsyncDocumentsClient
from .entitlements.client import AsyncEntitlementsClient
from .environments.client import AsyncEnvironmentsClient
from .events.client import AsyncEventsClient
from .files.client import AsyncFilesClient
from .guests.client import AsyncGuestsClient
from .jobs.client import AsyncJobsClient
from .mapping.client import AsyncMappingClient
from .records.client import AsyncRecordsClient
from .roles.client import AsyncRolesClient
from .secrets.client import AsyncSecretsClient
from .sheets.client import AsyncSheetsClient
from .snapshots.client import AsyncSnapshotsClient
from .spaces.client import AsyncSpacesClient
from .users.client import AsyncUsersClient
from .versions.client import AsyncVersionsClient
from .views.client import AsyncViewsClient
from .workbooks.client import AsyncWorkbooksClient


class Flatfile:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : FlatfileEnvironment
        The environment to use for requests from the client. from .environment import FlatfileEnvironment



        Defaults to FlatfileEnvironment.PRODUCTION



    token : typing.Union[str, typing.Callable[[], str]]
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from flatfile import Flatfile

    client = Flatfile(
        token="YOUR_TOKEN",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: FlatfileEnvironment = FlatfileEnvironment.PRODUCTION,
        token: typing.Union[str, typing.Callable[[], str]],
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            token=token,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self.accounts = AccountsClient(client_wrapper=self._client_wrapper)
        self.actions = ActionsClient(client_wrapper=self._client_wrapper)
        self.agent_exports = AgentExportsClient(client_wrapper=self._client_wrapper)
        self.agents = AgentsClient(client_wrapper=self._client_wrapper)
        self.apps = AppsClient(client_wrapper=self._client_wrapper)
        self.assistant = AssistantClient(client_wrapper=self._client_wrapper)
        self.auth = AuthClient(client_wrapper=self._client_wrapper)
        self.commits = CommitsClient(client_wrapper=self._client_wrapper)
        self.data_retention_policies = DataRetentionPoliciesClient(client_wrapper=self._client_wrapper)
        self.documents = DocumentsClient(client_wrapper=self._client_wrapper)
        self.entitlements = EntitlementsClient(client_wrapper=self._client_wrapper)
        self.environments = EnvironmentsClient(client_wrapper=self._client_wrapper)
        self.events = EventsClient(client_wrapper=self._client_wrapper)
        self.files = FilesClient(client_wrapper=self._client_wrapper)
        self.guests = GuestsClient(client_wrapper=self._client_wrapper)
        self.jobs = JobsClient(client_wrapper=self._client_wrapper)
        self.mapping = MappingClient(client_wrapper=self._client_wrapper)
        self.records = RecordsClient(client_wrapper=self._client_wrapper)
        self.roles = RolesClient(client_wrapper=self._client_wrapper)
        self.secrets = SecretsClient(client_wrapper=self._client_wrapper)
        self.sheets = SheetsClient(client_wrapper=self._client_wrapper)
        self.snapshots = SnapshotsClient(client_wrapper=self._client_wrapper)
        self.spaces = SpacesClient(client_wrapper=self._client_wrapper)
        self.users = UsersClient(client_wrapper=self._client_wrapper)
        self.versions = VersionsClient(client_wrapper=self._client_wrapper)
        self.views = ViewsClient(client_wrapper=self._client_wrapper)
        self.workbooks = WorkbooksClient(client_wrapper=self._client_wrapper)


class AsyncFlatfile:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : FlatfileEnvironment
        The environment to use for requests from the client. from .environment import FlatfileEnvironment



        Defaults to FlatfileEnvironment.PRODUCTION



    token : typing.Union[str, typing.Callable[[], str]]
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from flatfile import AsyncFlatfile

    client = AsyncFlatfile(
        token="YOUR_TOKEN",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: FlatfileEnvironment = FlatfileEnvironment.PRODUCTION,
        token: typing.Union[str, typing.Callable[[], str]],
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            token=token,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self.accounts = AsyncAccountsClient(client_wrapper=self._client_wrapper)
        self.actions = AsyncActionsClient(client_wrapper=self._client_wrapper)
        self.agent_exports = AsyncAgentExportsClient(client_wrapper=self._client_wrapper)
        self.agents = AsyncAgentsClient(client_wrapper=self._client_wrapper)
        self.apps = AsyncAppsClient(client_wrapper=self._client_wrapper)
        self.assistant = AsyncAssistantClient(client_wrapper=self._client_wrapper)
        self.auth = AsyncAuthClient(client_wrapper=self._client_wrapper)
        self.commits = AsyncCommitsClient(client_wrapper=self._client_wrapper)
        self.data_retention_policies = AsyncDataRetentionPoliciesClient(client_wrapper=self._client_wrapper)
        self.documents = AsyncDocumentsClient(client_wrapper=self._client_wrapper)
        self.entitlements = AsyncEntitlementsClient(client_wrapper=self._client_wrapper)
        self.environments = AsyncEnvironmentsClient(client_wrapper=self._client_wrapper)
        self.events = AsyncEventsClient(client_wrapper=self._client_wrapper)
        self.files = AsyncFilesClient(client_wrapper=self._client_wrapper)
        self.guests = AsyncGuestsClient(client_wrapper=self._client_wrapper)
        self.jobs = AsyncJobsClient(client_wrapper=self._client_wrapper)
        self.mapping = AsyncMappingClient(client_wrapper=self._client_wrapper)
        self.records = AsyncRecordsClient(client_wrapper=self._client_wrapper)
        self.roles = AsyncRolesClient(client_wrapper=self._client_wrapper)
        self.secrets = AsyncSecretsClient(client_wrapper=self._client_wrapper)
        self.sheets = AsyncSheetsClient(client_wrapper=self._client_wrapper)
        self.snapshots = AsyncSnapshotsClient(client_wrapper=self._client_wrapper)
        self.spaces = AsyncSpacesClient(client_wrapper=self._client_wrapper)
        self.users = AsyncUsersClient(client_wrapper=self._client_wrapper)
        self.versions = AsyncVersionsClient(client_wrapper=self._client_wrapper)
        self.views = AsyncViewsClient(client_wrapper=self._client_wrapper)
        self.workbooks = AsyncWorkbooksClient(client_wrapper=self._client_wrapper)


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: FlatfileEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
