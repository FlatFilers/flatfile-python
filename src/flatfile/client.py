# This file was auto-generated by Fern from our API Definition.

import typing

import httpx

from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .environment import FlatfileEnvironment
from .resources.accounts.client import AccountsClient, AsyncAccountsClient
from .resources.agents.client import AgentsClient, AsyncAgentsClient
from .resources.apps.client import AppsClient, AsyncAppsClient
from .resources.assistant.client import AssistantClient, AsyncAssistantClient
from .resources.commits.client import AsyncCommitsClient, CommitsClient
from .resources.data_retention_policies.client import AsyncDataRetentionPoliciesClient, DataRetentionPoliciesClient
from .resources.documents.client import AsyncDocumentsClient, DocumentsClient
from .resources.entitlements.client import AsyncEntitlementsClient, EntitlementsClient
from .resources.environments.client import AsyncEnvironmentsClient, EnvironmentsClient
from .resources.events.client import AsyncEventsClient, EventsClient
from .resources.files.client import AsyncFilesClient, FilesClient
from .resources.guests.client import AsyncGuestsClient, GuestsClient
from .resources.jobs.client import AsyncJobsClient, JobsClient
from .resources.mapping.client import AsyncMappingClient, MappingClient
from .resources.records.client import AsyncRecordsClient, RecordsClient
from .resources.roles.client import AsyncRolesClient, RolesClient
from .resources.secrets.client import AsyncSecretsClient, SecretsClient
from .resources.sheets.client import AsyncSheetsClient, SheetsClient
from .resources.snapshots.client import AsyncSnapshotsClient, SnapshotsClient
from .resources.spaces.client import AsyncSpacesClient, SpacesClient
from .resources.users.client import AsyncUsersClient, UsersClient
from .resources.versions.client import AsyncVersionsClient, VersionsClient
from .resources.views.client import AsyncViewsClient, ViewsClient
from .resources.workbooks.client import AsyncWorkbooksClient, WorkbooksClient


class Flatfile:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propogate to these functions.

    Parameters:
        - base_url: typing.Optional[str]. The base url to use for requests from the client.

        - environment: FlatfileEnvironment. The environment to use for requests from the client. from .environment import FlatfileEnvironment

                                            Defaults to FlatfileEnvironment.PRODUCTION

        - token: typing.Union[str, typing.Callable[[], str]].

        - timeout: typing.Optional[float]. The timeout to be used, in seconds, for requests by default the timeout is 60 seconds.

        - httpx_client: typing.Optional[httpx.Client]. The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.
    ---
    from flatfile.client import Flatfile

    client = Flatfile(
        token="YOUR_TOKEN",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: FlatfileEnvironment = FlatfileEnvironment.PRODUCTION,
        token: typing.Union[str, typing.Callable[[], str]],
        timeout: typing.Optional[float] = 60,
        httpx_client: typing.Optional[httpx.Client] = None
    ):
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            token=token,
            httpx_client=httpx.Client(timeout=timeout) if httpx_client is None else httpx_client,
        )
        self.accounts = AccountsClient(client_wrapper=self._client_wrapper)
        self.agents = AgentsClient(client_wrapper=self._client_wrapper)
        self.apps = AppsClient(client_wrapper=self._client_wrapper)
        self.assistant = AssistantClient(client_wrapper=self._client_wrapper)
        self.commits = CommitsClient(client_wrapper=self._client_wrapper)
        self.data_retention_policies = DataRetentionPoliciesClient(client_wrapper=self._client_wrapper)
        self.documents = DocumentsClient(client_wrapper=self._client_wrapper)
        self.entitlements = EntitlementsClient(client_wrapper=self._client_wrapper)
        self.environments = EnvironmentsClient(client_wrapper=self._client_wrapper)
        self.events = EventsClient(client_wrapper=self._client_wrapper)
        self.files = FilesClient(client_wrapper=self._client_wrapper)
        self.guests = GuestsClient(client_wrapper=self._client_wrapper)
        self.jobs = JobsClient(client_wrapper=self._client_wrapper)
        self.mapping = MappingClient(client_wrapper=self._client_wrapper)
        self.records = RecordsClient(client_wrapper=self._client_wrapper)
        self.roles = RolesClient(client_wrapper=self._client_wrapper)
        self.secrets = SecretsClient(client_wrapper=self._client_wrapper)
        self.sheets = SheetsClient(client_wrapper=self._client_wrapper)
        self.snapshots = SnapshotsClient(client_wrapper=self._client_wrapper)
        self.spaces = SpacesClient(client_wrapper=self._client_wrapper)
        self.users = UsersClient(client_wrapper=self._client_wrapper)
        self.versions = VersionsClient(client_wrapper=self._client_wrapper)
        self.views = ViewsClient(client_wrapper=self._client_wrapper)
        self.workbooks = WorkbooksClient(client_wrapper=self._client_wrapper)


class AsyncFlatfile:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propogate to these functions.

    Parameters:
        - base_url: typing.Optional[str]. The base url to use for requests from the client.

        - environment: FlatfileEnvironment. The environment to use for requests from the client. from .environment import FlatfileEnvironment

                                            Defaults to FlatfileEnvironment.PRODUCTION

        - token: typing.Union[str, typing.Callable[[], str]].

        - timeout: typing.Optional[float]. The timeout to be used, in seconds, for requests by default the timeout is 60 seconds.

        - httpx_client: typing.Optional[httpx.AsyncClient]. The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.
    ---
    from flatfile.client import AsyncFlatfile

    client = AsyncFlatfile(
        token="YOUR_TOKEN",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: FlatfileEnvironment = FlatfileEnvironment.PRODUCTION,
        token: typing.Union[str, typing.Callable[[], str]],
        timeout: typing.Optional[float] = 60,
        httpx_client: typing.Optional[httpx.AsyncClient] = None
    ):
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            token=token,
            httpx_client=httpx.AsyncClient(timeout=timeout) if httpx_client is None else httpx_client,
        )
        self.accounts = AsyncAccountsClient(client_wrapper=self._client_wrapper)
        self.agents = AsyncAgentsClient(client_wrapper=self._client_wrapper)
        self.apps = AsyncAppsClient(client_wrapper=self._client_wrapper)
        self.assistant = AsyncAssistantClient(client_wrapper=self._client_wrapper)
        self.commits = AsyncCommitsClient(client_wrapper=self._client_wrapper)
        self.data_retention_policies = AsyncDataRetentionPoliciesClient(client_wrapper=self._client_wrapper)
        self.documents = AsyncDocumentsClient(client_wrapper=self._client_wrapper)
        self.entitlements = AsyncEntitlementsClient(client_wrapper=self._client_wrapper)
        self.environments = AsyncEnvironmentsClient(client_wrapper=self._client_wrapper)
        self.events = AsyncEventsClient(client_wrapper=self._client_wrapper)
        self.files = AsyncFilesClient(client_wrapper=self._client_wrapper)
        self.guests = AsyncGuestsClient(client_wrapper=self._client_wrapper)
        self.jobs = AsyncJobsClient(client_wrapper=self._client_wrapper)
        self.mapping = AsyncMappingClient(client_wrapper=self._client_wrapper)
        self.records = AsyncRecordsClient(client_wrapper=self._client_wrapper)
        self.roles = AsyncRolesClient(client_wrapper=self._client_wrapper)
        self.secrets = AsyncSecretsClient(client_wrapper=self._client_wrapper)
        self.sheets = AsyncSheetsClient(client_wrapper=self._client_wrapper)
        self.snapshots = AsyncSnapshotsClient(client_wrapper=self._client_wrapper)
        self.spaces = AsyncSpacesClient(client_wrapper=self._client_wrapper)
        self.users = AsyncUsersClient(client_wrapper=self._client_wrapper)
        self.versions = AsyncVersionsClient(client_wrapper=self._client_wrapper)
        self.views = AsyncViewsClient(client_wrapper=self._client_wrapper)
        self.workbooks = AsyncWorkbooksClient(client_wrapper=self._client_wrapper)


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: FlatfileEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
